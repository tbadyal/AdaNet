pragma Ada_2005;
pragma Style_Checks (Off);

with Interfaces.C; use Interfaces.C;
with nppdefs_h;
with System;

package nppi_statistics_functions_h is

  -- Copyright 2009-2014 NVIDIA Corporation.  All rights reserved. 
  --  * 
  --  * NOTICE TO LICENSEE: 
  --  * 
  --  * The source code and/or documentation ("Licensed Deliverables") are 
  --  * subject to NVIDIA intellectual property rights under U.S. and 
  --  * international Copyright laws. 
  --  * 
  --  * The Licensed Deliverables contained herein are PROPRIETARY and 
  --  * CONFIDENTIAL to NVIDIA and are being provided under the terms and 
  --  * conditions of a form of NVIDIA software license agreement by and 
  --  * between NVIDIA and Licensee ("License Agreement") or electronically 
  --  * accepted by Licensee.  Notwithstanding any terms or conditions to 
  --  * the contrary in the License Agreement, reproduction or disclosure 
  --  * of the Licensed Deliverables to any third party without the express 
  --  * written consent of NVIDIA is prohibited. 
  --  * 
  --  * NOTWITHSTANDING ANY TERMS OR CONDITIONS TO THE CONTRARY IN THE 
  --  * LICENSE AGREEMENT, NVIDIA MAKES NO REPRESENTATION ABOUT THE 
  --  * SUITABILITY OF THESE LICENSED DELIVERABLES FOR ANY PURPOSE.  THEY ARE 
  --  * PROVIDED "AS IS" WITHOUT EXPRESS OR IMPLIED WARRANTY OF ANY KIND. 
  --  * NVIDIA DISCLAIMS ALL WARRANTIES WITH REGARD TO THESE LICENSED 
  --  * DELIVERABLES, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY, 
  --  * NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE. 
  --  * NOTWITHSTANDING ANY TERMS OR CONDITIONS TO THE CONTRARY IN THE 
  --  * LICENSE AGREEMENT, IN NO EVENT SHALL NVIDIA BE LIABLE FOR ANY 
  --  * SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, OR ANY 
  --  * DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 
  --  * WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS 
  --  * ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 
  --  * OF THESE LICENSED DELIVERABLES. 
  --  * 
  --  * U.S. Government End Users.  These Licensed Deliverables are a 
  --  * "commercial item" as that term is defined at 48 C.F.R. 2.101 (OCT 
  --  * 1995), consisting of "commercial computer software" and "commercial 
  --  * computer software documentation" as such terms are used in 48 
  --  * C.F.R. 12.212 (SEPT 1995) and are provided to the U.S. Government 
  --  * only as a commercial end item.  Consistent with 48 C.F.R.12.212 and 
  --  * 48 C.F.R. 227.7202-1 through 227.7202-4 (JUNE 1995), all 
  --  * U.S. Government End Users acquire the Licensed Deliverables with 
  --  * only those rights set forth herein. 
  --  * 
  --  * Any use of the Licensed Deliverables in individual and commercial 
  --  * software must include, in the user documentation and internal 
  --  * comments to the code, the above Disclaimer and U.S. Government End 
  --  * Users Notice. 
  --   

  --*
  -- * \file nppi_statistics_functions.h
  -- * NPP Image Processing Functionality.
  --  

  --* @defgroup image_statistics_functions Statistical Operations
  -- *  @ingroup nppi
  -- *
  -- * Primitives for computing the statistical properties of an image.
  -- * Some statistical primitives also require scratch buffer during the computation. For details, please 
  -- * refer to \ref general_scratch_buffer.
  -- * @{
  -- *
  -- * These functions can be found in either the nppi or nppist libraries. Linking to only the sub-libraries that you use can significantly
  -- * save link time, application load time, and CUDA runtime startup time when using dynamic libraries.
  -- *
  --  

  --* @defgroup image_sum Sum
  -- * Primitives for computing the sum of all the pixel values in an image.
  -- * @{
  --  

  --* @name Sum
  -- * @{
  -- * Given an image \f$pSrc\f$ with width \f$W\f$ and height \f$H\f$, the sum
  -- * will be computed as
  -- * \f[Sum = \sum_{j=0}^{H-1}\sum_{i=0}^{W-1}pSrc(j,i)\f]
  -- * All the results are stored in a 64-bit double precision format, 
  -- * except for two primitives \ref nppiSum_8u64s_C1R and \ref nppiSum_8u64s_C4R.
  -- * The sum functions require additional scratch buffer for computations.
  --  

  --*
  -- * One-channel 8-bit unsigned image sum.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- *        Use \ref nppiSumGetBufferHostSize_8u_C1R to determine the minium number of bytes required.
  -- * \param pSum Pointer to the computed sum.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSum_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pSum : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:103
   pragma Import (C, nppiSum_8u_C1R, "nppiSum_8u_C1R");

  --*
  -- * One-channel 8-bit unsigned image sum. The result is 64-bit long long integer.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- *        Use \ref nppiSumGetBufferHostSize_8u64s_C1R to determine the minium number of bytes required.
  -- * \param pSum Pointer to the computed sum.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSum_8u64s_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pSum : access nppdefs_h.Npp64s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:117
   pragma Import (C, nppiSum_8u64s_C1R, "nppiSum_8u64s_C1R");

  --*
  -- * One-channel 16-bit unsigned image sum.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- *        Use \ref nppiSumGetBufferHostSize_16u_C1R to determine the minium number of bytes required.
  -- * \param pSum Pointer to the computed sum.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSum_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pSum : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:131
   pragma Import (C, nppiSum_16u_C1R, "nppiSum_16u_C1R");

  --*
  -- * One-channel 16-bit signed image sum.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- *        Use \ref nppiSumGetBufferHostSize_16s_C1R to determine the minium number of bytes required.
  -- * \param pSum Pointer to the computed sum.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSum_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pSum : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:145
   pragma Import (C, nppiSum_16s_C1R, "nppiSum_16s_C1R");

  --*
  -- * One-channel 32-bit floating point image sum.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiSumGetBufferHostSize_32f_C1R to determine the minium number of bytes required.
  -- * \param pSum Pointer to the computed sum.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSum_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pSum : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:159
   pragma Import (C, nppiSum_32f_C1R, "nppiSum_32f_C1R");

  --*
  -- * Three-channel 8-bit unsigned image sum.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- *        Use \ref nppiSumGetBufferHostSize_8u_C3R to determine the minium number of bytes required.
  -- * \param aSum Array that contains computed sum for each channel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSum_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aSum : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:173
   pragma Import (C, nppiSum_8u_C3R, "nppiSum_8u_C3R");

  --*
  -- * Three-channel 16-bit unsigned image sum.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- *        Use \ref nppiSumGetBufferHostSize_16u_C3R to determine the minium number of bytes required.
  -- * \param aSum Array that contains computed sum for each channel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSum_16u_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aSum : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:187
   pragma Import (C, nppiSum_16u_C3R, "nppiSum_16u_C3R");

  --*
  -- * Three-channel 16-bit signed image sum.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- *        Use \ref nppiSumGetBufferHostSize_16s_C3R to determine the minium number of bytes required.
  -- * \param aSum Array that contains computed sum for each channel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSum_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aSum : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:201
   pragma Import (C, nppiSum_16s_C3R, "nppiSum_16s_C3R");

  --*
  -- * Three-channel 32-bit floating point image sum.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- *        Use \ref nppiSumGetBufferHostSize_32f_C3R to determine the minium number of bytes required.
  -- * \param aSum Array that contains computed sum for each channel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSum_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aSum : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:215
   pragma Import (C, nppiSum_32f_C3R, "nppiSum_32f_C3R");

  --*
  -- * Four-channel 8-bit unsigned image sum ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- *        Use \ref nppiSumGetBufferHostSize_8u_AC4R to determine the minium number of bytes required.
  -- * \param aSum Array that contains computed sum for each channel (alpha channel is not computed).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSum_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aSum : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:229
   pragma Import (C, nppiSum_8u_AC4R, "nppiSum_8u_AC4R");

  --*
  -- * Four-channel 16-bit unsigned image sum ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- *        Use \ref nppiSumGetBufferHostSize_16u_AC4R to determine the minium number of bytes required.
  -- * \param aSum Array that contains computed sum for each channel (alpha channel is not computed).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSum_16u_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aSum : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:243
   pragma Import (C, nppiSum_16u_AC4R, "nppiSum_16u_AC4R");

  --*
  -- * Four-channel 16-bit signed image sum ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- *        Use \ref nppiSumGetBufferHostSize_16s_AC4R to determine the minium number of bytes required.
  -- * \param aSum Array that contains computed sum for each channel (alpha channel is not computed).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSum_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aSum : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:257
   pragma Import (C, nppiSum_16s_AC4R, "nppiSum_16s_AC4R");

  --*
  -- * Four-channel 32-bit floating point image sum ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiSumGetBufferHostSize_32f_AC4R to determine the minium number of bytes required.
  -- * \param aSum Array that contains computed sum for each channel (alpha channel is not computed).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSum_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aSum : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:271
   pragma Import (C, nppiSum_32f_AC4R, "nppiSum_32f_AC4R");

  --*
  -- * Four-channel 8-bit unsigned image sum.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiSumGetBufferHostSize_8u_C4R to determine the minium number of bytes required.
  -- * \param aSum Array that contains computed sum for each channel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSum_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aSum : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:285
   pragma Import (C, nppiSum_8u_C4R, "nppiSum_8u_C4R");

  --*
  -- * Four-channel 8-bit unsigned image sum. The result is 64-bit long long integer.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiSumGetBufferHostSize_8u64s_C4R to determine the minium number of bytes required.
  -- * \param aSum Array that contains computed sum for each channel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSum_8u64s_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aSum : access nppdefs_h.Npp64s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:299
   pragma Import (C, nppiSum_8u64s_C4R, "nppiSum_8u64s_C4R");

  --*
  -- * Four-channel 16-bit unsigned image sum.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiSumGetBufferHostSize_16u_C4R to determine the minium number of bytes required.
  -- * \param aSum Array that contains computed sum for each channel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSum_16u_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aSum : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:313
   pragma Import (C, nppiSum_16u_C4R, "nppiSum_16u_C4R");

  --*
  -- * Four-channel 16-bit signed image sum.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiSumGetBufferHostSize_16s_C4R to determine the minium number of bytes required.
  -- * \param aSum Array that contains computed sum for each channel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSum_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aSum : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:327
   pragma Import (C, nppiSum_16s_C4R, "nppiSum_16s_C4R");

  --*
  -- * Four-channel 32-bit floating point image sum.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiSumGetBufferHostSize_32f_C4R to determine the minium number of bytes required.
  -- * \param aSum Array that contains computed sum for each channel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSum_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aSum : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:341
   pragma Import (C, nppiSum_32f_C4R, "nppiSum_32f_C4R");

  --* @} Sum  
  --* @name SumGetBufferHostSize 
  -- * Companion primitives for computing the device buffer size (in bytes) required by the sum primitives.
  -- * @{
  --  

  --*
  -- * Buffer size for \ref nppiSum_8u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiSumGetBufferHostSize_8u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:358
   pragma Import (C, nppiSumGetBufferHostSize_8u_C1R, "nppiSumGetBufferHostSize_8u_C1R");

  --*
  -- * Buffer size for \ref nppiSum_8u64s_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiSumGetBufferHostSize_8u64s_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:368
   pragma Import (C, nppiSumGetBufferHostSize_8u64s_C1R, "nppiSumGetBufferHostSize_8u64s_C1R");

  --* 
  -- * Buffer size for \ref nppiSum_16u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiSumGetBufferHostSize_16u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:378
   pragma Import (C, nppiSumGetBufferHostSize_16u_C1R, "nppiSumGetBufferHostSize_16u_C1R");

  --* 
  -- * Buffer size for \ref nppiSum_16s_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiSumGetBufferHostSize_16s_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:388
   pragma Import (C, nppiSumGetBufferHostSize_16s_C1R, "nppiSumGetBufferHostSize_16s_C1R");

  --* 
  -- * Buffer size for \ref nppiSum_32f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiSumGetBufferHostSize_32f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:398
   pragma Import (C, nppiSumGetBufferHostSize_32f_C1R, "nppiSumGetBufferHostSize_32f_C1R");

  --* 
  -- * Buffer size for \ref nppiSum_8u_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiSumGetBufferHostSize_8u_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:408
   pragma Import (C, nppiSumGetBufferHostSize_8u_C3R, "nppiSumGetBufferHostSize_8u_C3R");

  --* 
  -- * Buffer size for \ref nppiSum_16u_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiSumGetBufferHostSize_16u_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:418
   pragma Import (C, nppiSumGetBufferHostSize_16u_C3R, "nppiSumGetBufferHostSize_16u_C3R");

  --* 
  -- * Buffer size for \ref nppiSum_16s_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiSumGetBufferHostSize_16s_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:428
   pragma Import (C, nppiSumGetBufferHostSize_16s_C3R, "nppiSumGetBufferHostSize_16s_C3R");

  --* 
  -- * Buffer size for \ref nppiSum_32f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiSumGetBufferHostSize_32f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:438
   pragma Import (C, nppiSumGetBufferHostSize_32f_C3R, "nppiSumGetBufferHostSize_32f_C3R");

  --* 
  -- * Buffer size for \ref nppiSum_8u_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiSumGetBufferHostSize_8u_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:448
   pragma Import (C, nppiSumGetBufferHostSize_8u_AC4R, "nppiSumGetBufferHostSize_8u_AC4R");

  --* 
  -- * Buffer size for \ref nppiSum_16u_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiSumGetBufferHostSize_16u_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:458
   pragma Import (C, nppiSumGetBufferHostSize_16u_AC4R, "nppiSumGetBufferHostSize_16u_AC4R");

  --* 
  -- * Buffer size for \ref nppiSum_16s_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiSumGetBufferHostSize_16s_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:468
   pragma Import (C, nppiSumGetBufferHostSize_16s_AC4R, "nppiSumGetBufferHostSize_16s_AC4R");

  --* 
  -- * Buffer size for \ref nppiSum_32f_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiSumGetBufferHostSize_32f_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:478
   pragma Import (C, nppiSumGetBufferHostSize_32f_AC4R, "nppiSumGetBufferHostSize_32f_AC4R");

  --* 
  -- * Buffer size for \ref nppiSum_8u64s_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiSumGetBufferHostSize_8u64s_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:488
   pragma Import (C, nppiSumGetBufferHostSize_8u64s_C4R, "nppiSumGetBufferHostSize_8u64s_C4R");

  --* 
  -- * Buffer size for \ref nppiSum_8u_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiSumGetBufferHostSize_8u_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:498
   pragma Import (C, nppiSumGetBufferHostSize_8u_C4R, "nppiSumGetBufferHostSize_8u_C4R");

  --* 
  -- * Buffer size for \ref nppiSum_16u_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiSumGetBufferHostSize_16u_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:508
   pragma Import (C, nppiSumGetBufferHostSize_16u_C4R, "nppiSumGetBufferHostSize_16u_C4R");

  --* 
  -- * Buffer size for \ref nppiSum_16s_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiSumGetBufferHostSize_16s_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:518
   pragma Import (C, nppiSumGetBufferHostSize_16s_C4R, "nppiSumGetBufferHostSize_16s_C4R");

  --* 
  -- * Buffer size for \ref nppiSum_32f_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiSumGetBufferHostSize_32f_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:528
   pragma Import (C, nppiSumGetBufferHostSize_32f_C4R, "nppiSumGetBufferHostSize_32f_C4R");

  --* @} SumGetBufferHostSize  
  --* @} image_sum  
  --* @defgroup image_min Min
  -- * Primitives for computing the minimal pixel value of an image.
  -- * @{
  --  

  --* @name Min
  -- * The scratch buffer is required by the min functions.
  -- * @{
  --  

  --*
  -- * One-channel 8-bit unsigned image min. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMinGetBufferHostSize_8u_C1R to determine the minium number of bytes required.
  -- * \param pMin Pointer to the computed minimum result.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMin_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pMin : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:555
   pragma Import (C, nppiMin_8u_C1R, "nppiMin_8u_C1R");

  --*
  -- * One-channel 16-bit unsigned image min. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMinGetBufferHostSize_16u_C1R to determine the minium number of bytes required.
  -- * \param pMin Pointer to the computed minimum result.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMin_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pMin : access nppdefs_h.Npp16u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:569
   pragma Import (C, nppiMin_16u_C1R, "nppiMin_16u_C1R");

  --*
  -- * One-channel 16-bit signed image min. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMinGetBufferHostSize_16s_C1R to determine the minium number of bytes required.
  -- * \param pMin Pointer to the computed minimum result.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMin_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pMin : access nppdefs_h.Npp16s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:583
   pragma Import (C, nppiMin_16s_C1R, "nppiMin_16s_C1R");

  --*
  -- * One-channel 32-bit floating point image min. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMinGetBufferHostSize_32f_C1R to determine the minium number of bytes required.
  -- * \param pMin Pointer to the computed minimum result.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMin_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pMin : access nppdefs_h.Npp32f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:597
   pragma Import (C, nppiMin_32f_C1R, "nppiMin_32f_C1R");

  --*
  -- * Three-channel 8-bit unsigned image min. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMinGetBufferHostSize_8u_C3R to determine the minium number of bytes required.
  -- * \param aMin Array that contains the computed minimum results for each channel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMin_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMin : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:611
   pragma Import (C, nppiMin_8u_C3R, "nppiMin_8u_C3R");

  --*
  -- * Three-channel 16-bit unsigned image min. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMinGetBufferHostSize_16u_C3R to determine the minium number of bytes required.
  -- * \param aMin Array that contains the computed minimum results for each channel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMin_16u_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMin : access nppdefs_h.Npp16u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:625
   pragma Import (C, nppiMin_16u_C3R, "nppiMin_16u_C3R");

  --*
  -- * Three-channel 16-bit signed image min. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMinGetBufferHostSize_16s_C3R to determine the minium number of bytes required.
  -- * \param aMin Array that contains the computed minimum results for each channel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMin_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMin : access nppdefs_h.Npp16s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:639
   pragma Import (C, nppiMin_16s_C3R, "nppiMin_16s_C3R");

  --*
  -- * Three-channel 32-bit floating point image min. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMinGetBufferHostSize_32f_C3R to determine the minium number of bytes required.
  -- * \param aMin Array that contains the computed minimum results for each channel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMin_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMin : access nppdefs_h.Npp32f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:653
   pragma Import (C, nppiMin_32f_C3R, "nppiMin_32f_C3R");

  --*
  -- * Four-channel 8-bit unsigned image min. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMinGetBufferHostSize_8u_C4R to determine the minium number of bytes required.
  -- * \param aMin Array that contains the computed minimum results for each channel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMin_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMin : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:667
   pragma Import (C, nppiMin_8u_C4R, "nppiMin_8u_C4R");

  --*
  -- * Four-channel 16-bit unsigned image min. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMinGetBufferHostSize_16u_C4R to determine the minium number of bytes required.
  -- * \param aMin Array that contains the computed minimum results for each channel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  -- 

   function nppiMin_16u_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMin : access nppdefs_h.Npp16u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:681
   pragma Import (C, nppiMin_16u_C4R, "nppiMin_16u_C4R");

  --*
  -- * Four-channel 16-bit signed image min. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMinGetBufferHostSize_16s_C4R to determine the minium number of bytes required.
  -- * \param aMin Array that contains the computed minimum results for each channel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  -- 

   function nppiMin_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMin : access nppdefs_h.Npp16s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:695
   pragma Import (C, nppiMin_16s_C4R, "nppiMin_16s_C4R");

  --*
  -- * Four-channel 32-bit floating point image min. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMinGetBufferHostSize_32f_C4R to determine the minium number of bytes required.
  -- * \param aMin Array that contains the computed minimum results for each channel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  -- 

   function nppiMin_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMin : access nppdefs_h.Npp32f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:709
   pragma Import (C, nppiMin_32f_C4R, "nppiMin_32f_C4R");

  --*
  -- * Four-channel 8-bit unsigned image min ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMinGetBufferHostSize_8u_AC4R to determine the minium number of bytes required.
  -- * \param aMin Array that contains the computed minimum results for each channel (alpha channel is not processed).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMin_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMin : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:723
   pragma Import (C, nppiMin_8u_AC4R, "nppiMin_8u_AC4R");

  --*
  -- * Four-channel 16-bit unsigned image min ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMinGetBufferHostSize_16u_AC4R to determine the minium number of bytes required.
  -- * \param aMin Array that contains the computed minimum results for each channel (alpha channel is not processed).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMin_16u_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMin : access nppdefs_h.Npp16u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:737
   pragma Import (C, nppiMin_16u_AC4R, "nppiMin_16u_AC4R");

  --*
  -- * Four-channel 16-bit signed image min ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMinGetBufferHostSize_16s_AC4R to determine the minium number of bytes required.
  -- * \param aMin Array that contains the computed minimum results for each channel (alpha channel is not processed).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMin_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMin : access nppdefs_h.Npp16s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:751
   pragma Import (C, nppiMin_16s_AC4R, "nppiMin_16s_AC4R");

  --*
  -- * Four-channel 32-bit floating point image min ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMinGetBufferHostSize_32f_AC4R to determine the minium number of bytes required.
  -- * \param aMin Array that contains the computed minimum results for each channel (alpha channel is not processed).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMin_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMin : access nppdefs_h.Npp32f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:765
   pragma Import (C, nppiMin_32f_AC4R, "nppiMin_32f_AC4R");

  --* @} Min  
  --* @name MinGetBufferHostSize
  -- * Companion primitives for computing the device buffer size (in bytes) required by the min primitives.
  -- * @{
  --  

  --*
  -- * Buffer size for \ref nppiMin_8u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinGetBufferHostSize_8u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:782
   pragma Import (C, nppiMinGetBufferHostSize_8u_C1R, "nppiMinGetBufferHostSize_8u_C1R");

  --* 
  -- * Buffer size for \ref nppiMin_16u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinGetBufferHostSize_16u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:792
   pragma Import (C, nppiMinGetBufferHostSize_16u_C1R, "nppiMinGetBufferHostSize_16u_C1R");

  --* 
  -- * Buffer size for \ref nppiMin_16s_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinGetBufferHostSize_16s_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:802
   pragma Import (C, nppiMinGetBufferHostSize_16s_C1R, "nppiMinGetBufferHostSize_16s_C1R");

  --* 
  -- * Buffer size for \ref nppiMin_32f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinGetBufferHostSize_32f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:812
   pragma Import (C, nppiMinGetBufferHostSize_32f_C1R, "nppiMinGetBufferHostSize_32f_C1R");

  --* 
  -- * Buffer size for \ref nppiMin_8u_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinGetBufferHostSize_8u_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:822
   pragma Import (C, nppiMinGetBufferHostSize_8u_C3R, "nppiMinGetBufferHostSize_8u_C3R");

  --* 
  -- * Buffer size for \ref nppiMin_16u_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinGetBufferHostSize_16u_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:832
   pragma Import (C, nppiMinGetBufferHostSize_16u_C3R, "nppiMinGetBufferHostSize_16u_C3R");

  --* 
  -- * Buffer size for \ref nppiMin_16s_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinGetBufferHostSize_16s_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:842
   pragma Import (C, nppiMinGetBufferHostSize_16s_C3R, "nppiMinGetBufferHostSize_16s_C3R");

  --* 
  -- * Buffer size for \ref nppiMin_32f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinGetBufferHostSize_32f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:852
   pragma Import (C, nppiMinGetBufferHostSize_32f_C3R, "nppiMinGetBufferHostSize_32f_C3R");

  --* 
  -- * Buffer size for \ref nppiMin_8u_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinGetBufferHostSize_8u_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:862
   pragma Import (C, nppiMinGetBufferHostSize_8u_C4R, "nppiMinGetBufferHostSize_8u_C4R");

  --* 
  -- * Buffer size for \ref nppiMin_16u_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinGetBufferHostSize_16u_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:872
   pragma Import (C, nppiMinGetBufferHostSize_16u_C4R, "nppiMinGetBufferHostSize_16u_C4R");

  --* 
  -- * Buffer size for \ref nppiMin_16s_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinGetBufferHostSize_16s_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:882
   pragma Import (C, nppiMinGetBufferHostSize_16s_C4R, "nppiMinGetBufferHostSize_16s_C4R");

  --* 
  -- * Buffer size for \ref nppiMin_32f_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinGetBufferHostSize_32f_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:892
   pragma Import (C, nppiMinGetBufferHostSize_32f_C4R, "nppiMinGetBufferHostSize_32f_C4R");

  --* 
  -- * Buffer size for \ref nppiMin_8u_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinGetBufferHostSize_8u_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:902
   pragma Import (C, nppiMinGetBufferHostSize_8u_AC4R, "nppiMinGetBufferHostSize_8u_AC4R");

  --* 
  -- * Buffer size for \ref nppiMin_16u_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinGetBufferHostSize_16u_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:912
   pragma Import (C, nppiMinGetBufferHostSize_16u_AC4R, "nppiMinGetBufferHostSize_16u_AC4R");

  --* 
  -- * Buffer size for \ref nppiMin_16s_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinGetBufferHostSize_16s_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:922
   pragma Import (C, nppiMinGetBufferHostSize_16s_AC4R, "nppiMinGetBufferHostSize_16s_AC4R");

  --* 
  -- * Buffer size for \ref nppiMin_32f_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinGetBufferHostSize_32f_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:932
   pragma Import (C, nppiMinGetBufferHostSize_32f_AC4R, "nppiMinGetBufferHostSize_32f_AC4R");

  --* @} MinGetBufferHostSize  
  --* @} image_min  
  --* @defgroup image_min_index MinIndx
  -- * Primitives for computing the minimal value and its indices (X and Y coordinates) of an image.
  -- * @{
  --  

  --* @name MinIndx
  -- * If there are several minima in the selected ROI, the function returns one on the top leftmost position.
  -- * The scratch buffer is required by the functions.
  -- * @{
  --  

  --*
  -- * One-channel 8-bit unsigned image MinIndx.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMinIndxGetBufferHostSize_8u_C1R to determine the minium number of bytes required.
  -- * \param pMin Pointer to the computed min result.
  -- * \param pIndexX Pointer to the X coordinate of the image min value.
  -- * \param pIndexY Ppointer to the Y coordinate of the image min value.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMinIndx_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pMin : access nppdefs_h.Npp8u;
      pIndexX : access int;
      pIndexY : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:960
   pragma Import (C, nppiMinIndx_8u_C1R, "nppiMinIndx_8u_C1R");

  --*
  -- * One-channel 16-bit unsigned image MinIndx.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMinIndxGetBufferHostSize_16u_C1R to determine the minium number of bytes required.
  -- * \param pMin Pointer to the computed min result.
  -- * \param pIndexX Pointer to the X coordinate of the image min value.
  -- * \param pIndexY Pointer to the Y coordinate of the image min value.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMinIndx_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pMin : access nppdefs_h.Npp16u;
      pIndexX : access int;
      pIndexY : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:976
   pragma Import (C, nppiMinIndx_16u_C1R, "nppiMinIndx_16u_C1R");

  --*
  -- * One-channel 16-bit signed image MinIndx.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMinIndxGetBufferHostSize_16s_C1R to determine the minium number of bytes required.
  -- * \param pMin Pointer to the computed min result.
  -- * \param pIndexX Pointer to the X coordinate of the image min value.
  -- * \param pIndexY Pointer to the Y coordinate of the image min value.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMinIndx_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pMin : access nppdefs_h.Npp16s;
      pIndexX : access int;
      pIndexY : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:992
   pragma Import (C, nppiMinIndx_16s_C1R, "nppiMinIndx_16s_C1R");

  --*
  -- * One-channel 32-bit floating point image MinIndx.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMinIndxGetBufferHostSize_32f_C1R to determine the minium number of bytes required.
  -- * \param pMin Pointer to the computed min result.
  -- * \param pIndexX Pointer to the X coordinate of the image min value.
  -- * \param pIndexY Pointer to the Y coordinate of the image min value.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMinIndx_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pMin : access nppdefs_h.Npp32f;
      pIndexX : access int;
      pIndexY : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1008
   pragma Import (C, nppiMinIndx_32f_C1R, "nppiMinIndx_32f_C1R");

  --*
  -- * Three-channel 8-bit unsigned image MinIndx.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMinIndxGetBufferHostSize_8u_C3R to determine the minium number of bytes required.
  -- * \param aMin Array that contains the min values.
  -- * \param aIndexX Array that contains the X coordinates of the image min values.
  -- * \param aIndexY Array that contains the Y coordinates of the image min values.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMinIndx_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMin : access nppdefs_h.Npp8u;
      aIndexX : access int;
      aIndexY : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1024
   pragma Import (C, nppiMinIndx_8u_C3R, "nppiMinIndx_8u_C3R");

  --*
  -- * Three-channel 16-bit unsigned image MinIndx.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMinIndxGetBufferHostSize_16u_C3R to determine the minium number of bytes required.
  -- * \param aMin Array that contains the min values.
  -- * \param aIndexX Array that contains the X coordinates of the image min values.
  -- * \param aIndexY Array that contains the Y coordinates of the image min values.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMinIndx_16u_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMin : access nppdefs_h.Npp16u;
      aIndexX : access int;
      aIndexY : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1040
   pragma Import (C, nppiMinIndx_16u_C3R, "nppiMinIndx_16u_C3R");

  --*
  -- * Three-channel 16-bit signed image MinIndx.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMinIndxGetBufferHostSize_16s_C3R to determine the minium number of bytes required.
  -- * \param aMin Array that contains the min values.
  -- * \param aIndexX Array that contains the X coordinates of the image min values.
  -- * \param aIndexY Array that contains the Y coordinates of the image min values.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMinIndx_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMin : access nppdefs_h.Npp16s;
      aIndexX : access int;
      aIndexY : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1056
   pragma Import (C, nppiMinIndx_16s_C3R, "nppiMinIndx_16s_C3R");

  --*
  -- * Three-channel 32-bit floating point image MinIndx.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMinIndxGetBufferHostSize_32f_C3R to determine the minium number of bytes required.
  -- * \param aMin Array that contains the min values.
  -- * \param aIndexX Array that contains the X coordinates of the image min values.
  -- * \param aIndexY Array that contains the Y coordinates of the image min values.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMinIndx_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMin : access nppdefs_h.Npp32f;
      aIndexX : access int;
      aIndexY : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1072
   pragma Import (C, nppiMinIndx_32f_C3R, "nppiMinIndx_32f_C3R");

  --*
  -- * Four-channel 8-bit unsigned image MinIndx.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMinIndxGetBufferHostSize_8u_C4R to determine the minium number of bytes required.
  -- * \param aMin Array that contains the min values.
  -- * \param aIndexX Array that contains the X coordinates of the image min values.
  -- * \param aIndexY Array that contains the Y coordinates of the image min values.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMinIndx_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMin : access nppdefs_h.Npp8u;
      aIndexX : access int;
      aIndexY : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1088
   pragma Import (C, nppiMinIndx_8u_C4R, "nppiMinIndx_8u_C4R");

  --*
  -- * Four-channel 16-bit unsigned image MinIndx.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMinIndxGetBufferHostSize_16u_C4R to determine the minium number of bytes required.
  -- * \param aMin Array that contains the min values.
  -- * \param aIndexX Array that contains the X coordinates of the image min values.
  -- * \param aIndexY Array that contains the Y coordinates of the image min values.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMinIndx_16u_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMin : access nppdefs_h.Npp16u;
      aIndexX : access int;
      aIndexY : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1104
   pragma Import (C, nppiMinIndx_16u_C4R, "nppiMinIndx_16u_C4R");

  --*
  -- * Four-channel 16-bit signed image MinIndx.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMinIndxGetBufferHostSize_16s_C4R to determine the minium number of bytes required.
  -- * \param aMin Array that contains the min values.
  -- * \param aIndexX Array that contains the X coordinates of the image min values.
  -- * \param aIndexY Array that contains the Y coordinates of the image min values.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMinIndx_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMin : access nppdefs_h.Npp16s;
      aIndexX : access int;
      aIndexY : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1120
   pragma Import (C, nppiMinIndx_16s_C4R, "nppiMinIndx_16s_C4R");

  --*
  -- * Four-channel 32-bit floating point image MinIndx.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMinIndxGetBufferHostSize_32f_C4R to determine the minium number of bytes required.
  -- * \param aMin Array that contains the min values.
  -- * \param aIndexX Array that contains the X coordinates of the image min values.
  -- * \param aIndexY Array that contains the Y coordinates of the image min values.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMinIndx_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMin : access nppdefs_h.Npp32f;
      aIndexX : access int;
      aIndexY : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1136
   pragma Import (C, nppiMinIndx_32f_C4R, "nppiMinIndx_32f_C4R");

  --*
  -- * Four-channel 8-bit unsigned image MinIndx ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMinIndxGetBufferHostSize_8u_AC4R to determine the minium number of bytes required.
  -- * \param aMin Array that contains the min values.
  -- * \param aIndexX Array that contains the X coordinates of the image min values.
  -- * \param aIndexY Array that contains the Y coordinates of the image min values.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMinIndx_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMin : access nppdefs_h.Npp8u;
      aIndexX : access int;
      aIndexY : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1152
   pragma Import (C, nppiMinIndx_8u_AC4R, "nppiMinIndx_8u_AC4R");

  --*
  -- * Four-channel 16-bit unsigned image MinIndx ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMinIndxGetBufferHostSize_16u_AC4R to determine the minium number of bytes required.
  -- * \param aMin Array that contains the min values.
  -- * \param aIndexX Array that contains the X coordinates of the image min values.
  -- * \param aIndexY Array that contains the Y coordinates of the image min values.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMinIndx_16u_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMin : access nppdefs_h.Npp16u;
      aIndexX : access int;
      aIndexY : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1168
   pragma Import (C, nppiMinIndx_16u_AC4R, "nppiMinIndx_16u_AC4R");

  --*
  -- * Four-channel 16-bit signed image MinIndx ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMinIndxGetBufferHostSize_16s_AC4R to determine the minium number of bytes required.
  -- * \param aMin Array that contains the min values.
  -- * \param aIndexX Array that contains the X coordinates of the image min values.
  -- * \param aIndexY Array that contains the Y coordinates of the image min values.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMinIndx_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMin : access nppdefs_h.Npp16s;
      aIndexX : access int;
      aIndexY : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1184
   pragma Import (C, nppiMinIndx_16s_AC4R, "nppiMinIndx_16s_AC4R");

  --*
  -- * Four-channel 32-bit floating point image MinIndx ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMinIndxGetBufferHostSize_32f_AC4R to determine the minium number of bytes required.
  -- * \param aMin Array that contains the min values.
  -- * \param aIndexX Array that contains the X coordinates of the image min values.
  -- * \param aIndexY Array that contains the Y coordinates of the image min values.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMinIndx_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMin : access nppdefs_h.Npp32f;
      aIndexX : access int;
      aIndexY : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1200
   pragma Import (C, nppiMinIndx_32f_AC4R, "nppiMinIndx_32f_AC4R");

  --* @} Min  
  --* @name MinIndxGetBufferHostSize
  -- * Companion primitives for computing the device buffer size (in bytes) required by the MinIndx primitives.
  -- * @{
  --  

  --*
  -- * Computes the dvice scratch buffer size (in bytes) for nppiMinIndx_8u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinIndxGetBufferHostSize_8u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1216
   pragma Import (C, nppiMinIndxGetBufferHostSize_8u_C1R, "nppiMinIndxGetBufferHostSize_8u_C1R");

  --* 
  -- * Computes the dvice scratch buffer size (in bytes) for nppiMinIndx_16u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinIndxGetBufferHostSize_16u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1226
   pragma Import (C, nppiMinIndxGetBufferHostSize_16u_C1R, "nppiMinIndxGetBufferHostSize_16u_C1R");

  --* 
  -- * Computes the dvice scratch buffer size (in bytes) for nppiMinIndx_16s_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinIndxGetBufferHostSize_16s_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1236
   pragma Import (C, nppiMinIndxGetBufferHostSize_16s_C1R, "nppiMinIndxGetBufferHostSize_16s_C1R");

  --* 
  -- * Computes the dvice scratch buffer size (in bytes) for nppiMinIndx_32f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinIndxGetBufferHostSize_32f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1246
   pragma Import (C, nppiMinIndxGetBufferHostSize_32f_C1R, "nppiMinIndxGetBufferHostSize_32f_C1R");

  --* 
  -- * Computes the dvice scratch buffer size (in bytes) for nppiMinIndx_8u_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinIndxGetBufferHostSize_8u_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1256
   pragma Import (C, nppiMinIndxGetBufferHostSize_8u_C3R, "nppiMinIndxGetBufferHostSize_8u_C3R");

  --* 
  -- * Computes the dvice scratch buffer size (in bytes) for nppiMinIndx_16u_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinIndxGetBufferHostSize_16u_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1266
   pragma Import (C, nppiMinIndxGetBufferHostSize_16u_C3R, "nppiMinIndxGetBufferHostSize_16u_C3R");

  --* 
  -- * Computes the dvice scratch buffer size (in bytes) for nppiMinIndx_16s_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinIndxGetBufferHostSize_16s_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1276
   pragma Import (C, nppiMinIndxGetBufferHostSize_16s_C3R, "nppiMinIndxGetBufferHostSize_16s_C3R");

  --* 
  -- * Computes the dvice scratch buffer size (in bytes) for nppiMinIndx_32f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinIndxGetBufferHostSize_32f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1286
   pragma Import (C, nppiMinIndxGetBufferHostSize_32f_C3R, "nppiMinIndxGetBufferHostSize_32f_C3R");

  --* 
  -- * Computes the dvice scratch buffer size (in bytes) for nppiMinIndx_8u_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinIndxGetBufferHostSize_8u_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1296
   pragma Import (C, nppiMinIndxGetBufferHostSize_8u_C4R, "nppiMinIndxGetBufferHostSize_8u_C4R");

  --* 
  -- * Computes the dvice scratch buffer size (in bytes) for nppiMinIndx_16u_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinIndxGetBufferHostSize_16u_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1306
   pragma Import (C, nppiMinIndxGetBufferHostSize_16u_C4R, "nppiMinIndxGetBufferHostSize_16u_C4R");

  --* 
  -- * Computes the dvice scratch buffer size (in bytes) for nppiMinIndx_16s_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinIndxGetBufferHostSize_16s_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1316
   pragma Import (C, nppiMinIndxGetBufferHostSize_16s_C4R, "nppiMinIndxGetBufferHostSize_16s_C4R");

  --* 
  -- * Computes the dvice scratch buffer size (in bytes) for nppiMinIndx_32f_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinIndxGetBufferHostSize_32f_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1326
   pragma Import (C, nppiMinIndxGetBufferHostSize_32f_C4R, "nppiMinIndxGetBufferHostSize_32f_C4R");

  --* 
  -- * Computes the dvice scratch buffer size (in bytes) for nppiMinIndx_8u_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinIndxGetBufferHostSize_8u_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1336
   pragma Import (C, nppiMinIndxGetBufferHostSize_8u_AC4R, "nppiMinIndxGetBufferHostSize_8u_AC4R");

  --* 
  -- * Computes the dvice scratch buffer size (in bytes) for nppiMinIndx_8u_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinIndxGetBufferHostSize_16u_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1346
   pragma Import (C, nppiMinIndxGetBufferHostSize_16u_AC4R, "nppiMinIndxGetBufferHostSize_16u_AC4R");

  --* 
  -- * Computes the dvice scratch buffer size (in bytes) for nppiMinIndx_16u_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinIndxGetBufferHostSize_16s_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1356
   pragma Import (C, nppiMinIndxGetBufferHostSize_16s_AC4R, "nppiMinIndxGetBufferHostSize_16s_AC4R");

  --* 
  -- * Computes the dvice scratch buffer size (in bytes) for nppiMinIndx_32f_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinIndxGetBufferHostSize_32f_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1366
   pragma Import (C, nppiMinIndxGetBufferHostSize_32f_AC4R, "nppiMinIndxGetBufferHostSize_32f_AC4R");

  --* @} MinIndxGetBufferHostSize  
  --* @} image_min_index  
  --* @defgroup image_max Max
  -- * Primitives for computing the maximal pixel value of an image.
  -- * @{
  --  

  --* @name Max
  -- *  The scratch buffer is required by the functions.
  -- * @{
  --  

  --*
  -- * One-channel 8-bit unsigned image Max.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMaxGetBufferHostSize_8u_C1R to determaxe the maxium number of bytes required.
  -- * \param pMax Pointer to the computed maximum result.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMax_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pMax : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1393
   pragma Import (C, nppiMax_8u_C1R, "nppiMax_8u_C1R");

  --*
  -- * One-channel 16-bit unsigned image Max.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMaxGetBufferHostSize_16u_C1R to determaxe the maxium number of bytes required.
  -- * \param pMax Pointer to the computed maximum result.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMax_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pMax : access nppdefs_h.Npp16u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1407
   pragma Import (C, nppiMax_16u_C1R, "nppiMax_16u_C1R");

  --*
  -- * One-channel 16-bit signed image Max.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMaxGetBufferHostSize_16s_C1R to determaxe the maxium number of bytes required.
  -- * \param pMax Pointer to the computed maximum result.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMax_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pMax : access nppdefs_h.Npp16s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1421
   pragma Import (C, nppiMax_16s_C1R, "nppiMax_16s_C1R");

  --*
  -- * One-channel 32-bit floating point image Max.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMaxGetBufferHostSize_32f_C1R to determaxe the maxium number of bytes required.
  -- * \param pMax Pointer to the computed maximum result.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMax_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pMax : access nppdefs_h.Npp32f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1435
   pragma Import (C, nppiMax_32f_C1R, "nppiMax_32f_C1R");

  --*
  -- * Three-channel 8-bit unsigned image Max.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMaxGetBufferHostSize_8u_C3R to determaxe the maxium number of bytes required.
  -- * \param aMax Array that contains the computed maximum results for each channel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMax_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMax : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1449
   pragma Import (C, nppiMax_8u_C3R, "nppiMax_8u_C3R");

  --*
  -- * Three-channel 16-bit unsigned image Max.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMaxGetBufferHostSize_16u_C3R to determaxe the maxium number of bytes required.
  -- * \param aMax Array that contains the computed maximum results for each channel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMax_16u_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMax : access nppdefs_h.Npp16u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1463
   pragma Import (C, nppiMax_16u_C3R, "nppiMax_16u_C3R");

  --*
  -- * Three-channel 16-bit signed image Max.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMaxGetBufferHostSize_16s_C3R to determaxe the maxium number of bytes required.
  -- * \param aMax Array that contains the computed maximum results for each channel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMax_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMax : access nppdefs_h.Npp16s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1477
   pragma Import (C, nppiMax_16s_C3R, "nppiMax_16s_C3R");

  --*
  -- * Three-channel 32-bit floating point image Max. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMaxGetBufferHostSize_32f_C3R to determaxe the maxium number of bytes required.
  -- * \param aMax Array that contains the computed maximum results for each channel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMax_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMax : access nppdefs_h.Npp32f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1491
   pragma Import (C, nppiMax_32f_C3R, "nppiMax_32f_C3R");

  --*
  -- * Four-channel 8-bit unsigned image Max. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMaxGetBufferHostSize_8u_C4R to determaxe the maxium number of bytes required.
  -- * \param aMax Array that contains the computed maximum results for each channel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMax_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMax : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1505
   pragma Import (C, nppiMax_8u_C4R, "nppiMax_8u_C4R");

  --*
  -- * Four-channel 16-bit unsigned image Max. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMaxGetBufferHostSize_16u_C4R to determaxe the maxium number of bytes required.
  -- * \param aMax Array that contains the computed maximum results for each channel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  -- 

   function nppiMax_16u_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMax : access nppdefs_h.Npp16u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1519
   pragma Import (C, nppiMax_16u_C4R, "nppiMax_16u_C4R");

  --*
  -- * Four-channel 16-bit signed image Max. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMaxGetBufferHostSize_16s_C4R to determaxe the maxium number of bytes required.
  -- * \param aMax Array that contains the computed maximum results for each channel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  -- 

   function nppiMax_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMax : access nppdefs_h.Npp16s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1533
   pragma Import (C, nppiMax_16s_C4R, "nppiMax_16s_C4R");

  --*
  -- * Four-channel 32-bit floating point image Max. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMaxGetBufferHostSize_32f_C4R to determaxe the maxium number of bytes required.
  -- * \param aMax Array that contains the computed maximum results for each channel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  -- 

   function nppiMax_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMax : access nppdefs_h.Npp32f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1547
   pragma Import (C, nppiMax_32f_C4R, "nppiMax_32f_C4R");

  --*
  -- * Four-channel 8-bit unsigned image Max ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMaxGetBufferHostSize_8u_AC4R to determaxe the maxium number of bytes required.
  -- * \param aMax Array that contains the computed maximum results for each channel (alpha channel is not processed).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMax_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMax : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1561
   pragma Import (C, nppiMax_8u_AC4R, "nppiMax_8u_AC4R");

  --*
  -- * Four-channel 16-bit unsigned image Max ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMaxGetBufferHostSize_16u_AC4R to determaxe the maxium number of bytes required.
  -- * \param aMax Array that contains the computed maximum results for each channel (alpha channel is not processed).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMax_16u_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMax : access nppdefs_h.Npp16u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1575
   pragma Import (C, nppiMax_16u_AC4R, "nppiMax_16u_AC4R");

  --*
  -- * Four-channel 16-bit signed image Max ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMaxGetBufferHostSize_16s_AC4R to determaxe the maxium number of bytes required.
  -- * \param aMax Array that contains the computed maximum results for each channel (alpha channel is not processed).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMax_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMax : access nppdefs_h.Npp16s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1589
   pragma Import (C, nppiMax_16s_AC4R, "nppiMax_16s_AC4R");

  --*
  -- * Four-channel 32-bit floating point image Max ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMaxGetBufferHostSize_32f_AC4R to determaxe the maxium number of bytes required.
  -- * \param aMax Array that contains the computed maximum results for each channel (alpha channel is not processed).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMax_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMax : access nppdefs_h.Npp32f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1603
   pragma Import (C, nppiMax_32f_AC4R, "nppiMax_32f_AC4R");

  --* @}  
  --* @name MaxGetBufferHostSize
  -- * Companion primitives for computing the device buffer size (in bytes) required by the Max primitives.
  -- * @{
  --  

  --*
  -- * Buffer size for \ref nppiMax_8u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaxGetBufferHostSize_8u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1618
   pragma Import (C, nppiMaxGetBufferHostSize_8u_C1R, "nppiMaxGetBufferHostSize_8u_C1R");

  --* 
  -- * Buffer size for \ref nppiMax_16u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaxGetBufferHostSize_16u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1628
   pragma Import (C, nppiMaxGetBufferHostSize_16u_C1R, "nppiMaxGetBufferHostSize_16u_C1R");

  --* 
  -- * Buffer size for \ref nppiMax_16s_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaxGetBufferHostSize_16s_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1638
   pragma Import (C, nppiMaxGetBufferHostSize_16s_C1R, "nppiMaxGetBufferHostSize_16s_C1R");

  --* 
  -- * Buffer size for \ref nppiMax_32f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaxGetBufferHostSize_32f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1648
   pragma Import (C, nppiMaxGetBufferHostSize_32f_C1R, "nppiMaxGetBufferHostSize_32f_C1R");

  --* 
  -- * Buffer size for \ref nppiMax_8u_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaxGetBufferHostSize_8u_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1658
   pragma Import (C, nppiMaxGetBufferHostSize_8u_C3R, "nppiMaxGetBufferHostSize_8u_C3R");

  --* 
  -- * Buffer size for \ref nppiMax_16u_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaxGetBufferHostSize_16u_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1668
   pragma Import (C, nppiMaxGetBufferHostSize_16u_C3R, "nppiMaxGetBufferHostSize_16u_C3R");

  --* 
  -- * Buffer size for \ref nppiMax_16s_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaxGetBufferHostSize_16s_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1678
   pragma Import (C, nppiMaxGetBufferHostSize_16s_C3R, "nppiMaxGetBufferHostSize_16s_C3R");

  --* 
  -- * Buffer size for \ref nppiMax_32f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaxGetBufferHostSize_32f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1688
   pragma Import (C, nppiMaxGetBufferHostSize_32f_C3R, "nppiMaxGetBufferHostSize_32f_C3R");

  --* 
  -- * Buffer size for \ref nppiMax_8u_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaxGetBufferHostSize_8u_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1698
   pragma Import (C, nppiMaxGetBufferHostSize_8u_C4R, "nppiMaxGetBufferHostSize_8u_C4R");

  --* 
  -- * Buffer size for \ref nppiMax_16u_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaxGetBufferHostSize_16u_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1708
   pragma Import (C, nppiMaxGetBufferHostSize_16u_C4R, "nppiMaxGetBufferHostSize_16u_C4R");

  --* 
  -- * Buffer size for \ref nppiMax_16s_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaxGetBufferHostSize_16s_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1718
   pragma Import (C, nppiMaxGetBufferHostSize_16s_C4R, "nppiMaxGetBufferHostSize_16s_C4R");

  --* 
  -- * Buffer size for \ref nppiMax_32f_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaxGetBufferHostSize_32f_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1728
   pragma Import (C, nppiMaxGetBufferHostSize_32f_C4R, "nppiMaxGetBufferHostSize_32f_C4R");

  --* 
  -- * Buffer size for \ref nppiMax_8u_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaxGetBufferHostSize_8u_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1738
   pragma Import (C, nppiMaxGetBufferHostSize_8u_AC4R, "nppiMaxGetBufferHostSize_8u_AC4R");

  --* 
  -- * Buffer size for \ref nppiMax_16u_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaxGetBufferHostSize_16u_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1748
   pragma Import (C, nppiMaxGetBufferHostSize_16u_AC4R, "nppiMaxGetBufferHostSize_16u_AC4R");

  --* 
  -- * Buffer size for \ref nppiMax_16s_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaxGetBufferHostSize_16s_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1758
   pragma Import (C, nppiMaxGetBufferHostSize_16s_AC4R, "nppiMaxGetBufferHostSize_16s_AC4R");

  --* 
  -- * Buffer size for \ref nppiMax_32f_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaxGetBufferHostSize_32f_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1768
   pragma Import (C, nppiMaxGetBufferHostSize_32f_AC4R, "nppiMaxGetBufferHostSize_32f_AC4R");

  --* @} MaxGetBufferHostSize  
  --* @} image_max  
  --* @defgroup image_max_index MaxIndx
  -- * Primitives for computing the maximal value and its indices (X and Y coordinates) of an image.
  -- * @{
  --  

  --* @name MaxIndx
  -- * If there are several maxima in the selected region of interest, the function returns one on the top leftmost position. 
  -- * The scratch buffer is required by the functions.
  -- * @{
  -- *
  --  

  --*
  -- * One-channel 8-bit unsigned image MaxIndx.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMaxIndxGetBufferHostSize_8u_C1R to determaxe the maxium number of bytes required.
  -- * \param pMax Pointer to the computed max result.
  -- * \param pIndexX Pointer to the X coordinate of the image max value.
  -- * \param pIndexY Ppointer to the Y coordinate of the image max value.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMaxIndx_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pMax : access nppdefs_h.Npp8u;
      pIndexX : access int;
      pIndexY : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1797
   pragma Import (C, nppiMaxIndx_8u_C1R, "nppiMaxIndx_8u_C1R");

  --*
  -- * One-channel 16-bit unsigned image MaxIndx.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMaxIndxGetBufferHostSize_16u_C1R to determaxe the maxium number of bytes required.
  -- * \param pMax Pointer to the computed max result.
  -- * \param pIndexX Pointer to the X coordinate of the image max value.
  -- * \param pIndexY Pointer to the Y coordinate of the image max value.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMaxIndx_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pMax : access nppdefs_h.Npp16u;
      pIndexX : access int;
      pIndexY : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1813
   pragma Import (C, nppiMaxIndx_16u_C1R, "nppiMaxIndx_16u_C1R");

  --*
  -- * One-channel 16-bit signed image MaxIndx.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMaxIndxGetBufferHostSize_16s_C1R to determaxe the maxium number of bytes required.
  -- * \param pMax Pointer to the computed max result.
  -- * \param pIndexX Pointer to the X coordinate of the image max value.
  -- * \param pIndexY Pointer to the Y coordinate of the image max value.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMaxIndx_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pMax : access nppdefs_h.Npp16s;
      pIndexX : access int;
      pIndexY : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1829
   pragma Import (C, nppiMaxIndx_16s_C1R, "nppiMaxIndx_16s_C1R");

  --*
  -- * One-channel 32-bit floating point image MaxIndx.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMaxIndxGetBufferHostSize_32f_C1R to determaxe the maxium number of bytes required.
  -- * \param pMax Pointer to the computed max result.
  -- * \param pIndexX Pointer to the X coordinate of the image max value.
  -- * \param pIndexY Pointer to the Y coordinate of the image max value.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMaxIndx_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pMax : access nppdefs_h.Npp32f;
      pIndexX : access int;
      pIndexY : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1845
   pragma Import (C, nppiMaxIndx_32f_C1R, "nppiMaxIndx_32f_C1R");

  --*
  -- * Three-channel 8-bit unsigned image MaxIndx.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMaxIndxGetBufferHostSize_8u_C3R to determaxe the maxium number of bytes required.
  -- * \param aMax Array that contains the max values.
  -- * \param aIndexX Array that contains the X coordinates of the image max values.
  -- * \param aIndexY Array that contains the Y coordinates of the image max values.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMaxIndx_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMax : access nppdefs_h.Npp8u;
      aIndexX : access int;
      aIndexY : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1861
   pragma Import (C, nppiMaxIndx_8u_C3R, "nppiMaxIndx_8u_C3R");

  --*
  -- * Three-channel 16-bit unsigned image MaxIndx.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMaxIndxGetBufferHostSize_16u_C3R to determaxe the maxium number of bytes required.
  -- * \param aMax Array that contains the max values.
  -- * \param aIndexX Array that contains the X coordinates of the image max values.
  -- * \param aIndexY Array that contains the Y coordinates of the image max values.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMaxIndx_16u_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMax : access nppdefs_h.Npp16u;
      aIndexX : access int;
      aIndexY : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1877
   pragma Import (C, nppiMaxIndx_16u_C3R, "nppiMaxIndx_16u_C3R");

  --*
  -- * Three-channel 16-bit signed image MaxIndx.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMaxIndxGetBufferHostSize_16s_C3R to determaxe the maxium number of bytes required.
  -- * \param aMax Array that contains the max values.
  -- * \param aIndexX Array that contains the X coordinates of the image max values.
  -- * \param aIndexY Array that contains the Y coordinates of the image max values.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMaxIndx_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMax : access nppdefs_h.Npp16s;
      aIndexX : access int;
      aIndexY : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1893
   pragma Import (C, nppiMaxIndx_16s_C3R, "nppiMaxIndx_16s_C3R");

  --*
  -- * Three-channel 32-bit floating point image MaxIndx.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMaxIndxGetBufferHostSize_32f_C3R to determaxe the maxium number of bytes required.
  -- * \param aMax Array that contains the max values.
  -- * \param aIndexX Array that contains the X coordinates of the image max values.
  -- * \param aIndexY Array that contains the Y coordinates of the image max values.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMaxIndx_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMax : access nppdefs_h.Npp32f;
      aIndexX : access int;
      aIndexY : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1909
   pragma Import (C, nppiMaxIndx_32f_C3R, "nppiMaxIndx_32f_C3R");

  --*
  -- * Four-channel 8-bit unsigned image MaxIndx.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMaxIndxGetBufferHostSize_8u_C4R to determaxe the maxium number of bytes required.
  -- * \param aMax Array that contains the max values.
  -- * \param aIndexX Array that contains the X coordinates of the image max values.
  -- * \param aIndexY Array that contains the Y coordinates of the image max values.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMaxIndx_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMax : access nppdefs_h.Npp8u;
      aIndexX : access int;
      aIndexY : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1925
   pragma Import (C, nppiMaxIndx_8u_C4R, "nppiMaxIndx_8u_C4R");

  --*
  -- * Four-channel 16-bit unsigned image MaxIndx.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMaxIndxGetBufferHostSize_16u_C4R to determaxe the maxium number of bytes required.
  -- * \param aMax Array that contains the max values.
  -- * \param aIndexX Array that contains the X coordinates of the image max values.
  -- * \param aIndexY Array that contains the Y coordinates of the image max values.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMaxIndx_16u_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMax : access nppdefs_h.Npp16u;
      aIndexX : access int;
      aIndexY : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1941
   pragma Import (C, nppiMaxIndx_16u_C4R, "nppiMaxIndx_16u_C4R");

  --*
  -- * Four-channel 16-bit signed image MaxIndx.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMaxIndxGetBufferHostSize_16s_C4R to determaxe the maxium number of bytes required.
  -- * \param aMax Array that contains the max values.
  -- * \param aIndexX Array that contains the X coordinates of the image max values.
  -- * \param aIndexY Array that contains the Y coordinates of the image max values.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMaxIndx_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMax : access nppdefs_h.Npp16s;
      aIndexX : access int;
      aIndexY : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1957
   pragma Import (C, nppiMaxIndx_16s_C4R, "nppiMaxIndx_16s_C4R");

  --*
  -- * Four-channel 32-bit floating point image MaxIndx.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMaxIndxGetBufferHostSize_32f_C4R to determaxe the maxium number of bytes required.
  -- * \param aMax Array that contains the max values.
  -- * \param aIndexX Array that contains the X coordinates of the image max values.
  -- * \param aIndexY Array that contains the Y coordinates of the image max values.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMaxIndx_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMax : access nppdefs_h.Npp32f;
      aIndexX : access int;
      aIndexY : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1973
   pragma Import (C, nppiMaxIndx_32f_C4R, "nppiMaxIndx_32f_C4R");

  --*
  -- * Four-channel 8-bit unsigned image MaxIndx ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMaxIndxGetBufferHostSize_8u_AC4R to determaxe the maxium number of bytes required.
  -- * \param aMax Array that contains the max values.
  -- * \param aIndexX Array that contains the X coordinates of the image max values.
  -- * \param aIndexY Array that contains the Y coordinates of the image max values.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMaxIndx_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMax : access nppdefs_h.Npp8u;
      aIndexX : access int;
      aIndexY : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:1989
   pragma Import (C, nppiMaxIndx_8u_AC4R, "nppiMaxIndx_8u_AC4R");

  --*
  -- * Four-channel 16-bit unsigned image MaxIndx ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMaxIndxGetBufferHostSize_16u_AC4R to determaxe the maxium number of bytes required.
  -- * \param aMax Array that contains the max values.
  -- * \param aIndexX Array that contains the X coordinates of the image max values.
  -- * \param aIndexY Array that contains the Y coordinates of the image max values.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMaxIndx_16u_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMax : access nppdefs_h.Npp16u;
      aIndexX : access int;
      aIndexY : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2005
   pragma Import (C, nppiMaxIndx_16u_AC4R, "nppiMaxIndx_16u_AC4R");

  --*
  -- * Four-channel 16-bit signed image MaxIndx ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMaxIndxGetBufferHostSize_16s_AC4R to determaxe the maxium number of bytes required.
  -- * \param aMax Array that contains the max values.
  -- * \param aIndexX Array that contains the X coordinates of the image max values.
  -- * \param aIndexY Array that contains the Y coordinates of the image max values.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMaxIndx_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMax : access nppdefs_h.Npp16s;
      aIndexX : access int;
      aIndexY : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2021
   pragma Import (C, nppiMaxIndx_16s_AC4R, "nppiMaxIndx_16s_AC4R");

  --*
  -- * Four-channel 32-bit floating point image MaxIndx ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMaxIndxGetBufferHostSize_32f_AC4R to determaxe the maxium number of bytes required.
  -- * \param aMax Array that contains the max values.
  -- * \param aIndexX Array that contains the X coordinates of the image max values.
  -- * \param aIndexY Array that contains the Y coordinates of the image max values.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMaxIndx_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMax : access nppdefs_h.Npp32f;
      aIndexX : access int;
      aIndexY : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2037
   pragma Import (C, nppiMaxIndx_32f_AC4R, "nppiMaxIndx_32f_AC4R");

  --* @}  
  --* @name MaxIndxGetBufferHostSize
  -- * Companion primitives for computing the device buffer size (in bytes) required by the MaxIndx primitives.
  -- * @{
  --  

  --*
  -- * Computes the dvice scratch buffer size (in bytes) for nppiMaxIndx_8u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaxIndxGetBufferHostSize_8u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2054
   pragma Import (C, nppiMaxIndxGetBufferHostSize_8u_C1R, "nppiMaxIndxGetBufferHostSize_8u_C1R");

  --* 
  -- * Computes the dvice scratch buffer size (in bytes) for nppiMaxIndx_16u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaxIndxGetBufferHostSize_16u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2064
   pragma Import (C, nppiMaxIndxGetBufferHostSize_16u_C1R, "nppiMaxIndxGetBufferHostSize_16u_C1R");

  --* 
  -- * Computes the dvice scratch buffer size (in bytes) for nppiMaxIndx_16s_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaxIndxGetBufferHostSize_16s_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2074
   pragma Import (C, nppiMaxIndxGetBufferHostSize_16s_C1R, "nppiMaxIndxGetBufferHostSize_16s_C1R");

  --* 
  -- * Computes the dvice scratch buffer size (in bytes) for nppiMaxIndx_32f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaxIndxGetBufferHostSize_32f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2084
   pragma Import (C, nppiMaxIndxGetBufferHostSize_32f_C1R, "nppiMaxIndxGetBufferHostSize_32f_C1R");

  --* 
  -- * Computes the dvice scratch buffer size (in bytes) for nppiMaxIndx_8u_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaxIndxGetBufferHostSize_8u_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2094
   pragma Import (C, nppiMaxIndxGetBufferHostSize_8u_C3R, "nppiMaxIndxGetBufferHostSize_8u_C3R");

  --* 
  -- * Computes the dvice scratch buffer size (in bytes) for nppiMaxIndx_16u_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaxIndxGetBufferHostSize_16u_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2104
   pragma Import (C, nppiMaxIndxGetBufferHostSize_16u_C3R, "nppiMaxIndxGetBufferHostSize_16u_C3R");

  --* 
  -- * Computes the dvice scratch buffer size (in bytes) for nppiMaxIndx_16s_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaxIndxGetBufferHostSize_16s_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2114
   pragma Import (C, nppiMaxIndxGetBufferHostSize_16s_C3R, "nppiMaxIndxGetBufferHostSize_16s_C3R");

  --* 
  -- * Computes the dvice scratch buffer size (in bytes) for nppiMaxIndx_32f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaxIndxGetBufferHostSize_32f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2124
   pragma Import (C, nppiMaxIndxGetBufferHostSize_32f_C3R, "nppiMaxIndxGetBufferHostSize_32f_C3R");

  --* 
  -- * Computes the dvice scratch buffer size (in bytes) for nppiMaxIndx_8u_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaxIndxGetBufferHostSize_8u_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2134
   pragma Import (C, nppiMaxIndxGetBufferHostSize_8u_C4R, "nppiMaxIndxGetBufferHostSize_8u_C4R");

  --* 
  -- * Computes the dvice scratch buffer size (in bytes) for nppiMaxIndx_16u_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaxIndxGetBufferHostSize_16u_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2144
   pragma Import (C, nppiMaxIndxGetBufferHostSize_16u_C4R, "nppiMaxIndxGetBufferHostSize_16u_C4R");

  --* 
  -- * Computes the dvice scratch buffer size (in bytes) for nppiMaxIndx_16s_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaxIndxGetBufferHostSize_16s_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2154
   pragma Import (C, nppiMaxIndxGetBufferHostSize_16s_C4R, "nppiMaxIndxGetBufferHostSize_16s_C4R");

  --* 
  -- * Computes the dvice scratch buffer size (in bytes) for nppiMaxIndx_32f_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaxIndxGetBufferHostSize_32f_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2164
   pragma Import (C, nppiMaxIndxGetBufferHostSize_32f_C4R, "nppiMaxIndxGetBufferHostSize_32f_C4R");

  --* 
  -- * Computes the dvice scratch buffer size (in bytes) for nppiMaxIndx_8u_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaxIndxGetBufferHostSize_8u_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2174
   pragma Import (C, nppiMaxIndxGetBufferHostSize_8u_AC4R, "nppiMaxIndxGetBufferHostSize_8u_AC4R");

  --* 
  -- * Computes the dvice scratch buffer size (in bytes) for nppiMaxIndx_8u_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaxIndxGetBufferHostSize_16u_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2184
   pragma Import (C, nppiMaxIndxGetBufferHostSize_16u_AC4R, "nppiMaxIndxGetBufferHostSize_16u_AC4R");

  --* 
  -- * Computes the dvice scratch buffer size (in bytes) for nppiMaxIndx_16u_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaxIndxGetBufferHostSize_16s_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2194
   pragma Import (C, nppiMaxIndxGetBufferHostSize_16s_AC4R, "nppiMaxIndxGetBufferHostSize_16s_AC4R");

  --* 
  -- * Computes the dvice scratch buffer size (in bytes) for nppiMaxIndx_32f_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaxIndxGetBufferHostSize_32f_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2204
   pragma Import (C, nppiMaxIndxGetBufferHostSize_32f_AC4R, "nppiMaxIndxGetBufferHostSize_32f_AC4R");

  --* @}  
  --* @} image_max_index  
  --* @defgroup image_min_max MinMax
  -- * Primitives for computing both the minimal and the maximal values of an image.
  -- * @{
  --  

  --* @name MinMax
  -- * The functions require the device scratch buffer.
  -- * @{
  --  

  --*
  -- * One-channel 8-bit unsigned image MinMax.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pMin Pointer to the computed minimal result.
  -- * \param pMax Pointer to the computed maximal result.
  -- * \param pDeviceBuffer Buffer to a scratch memory. 
  -- *        Use \ref nppiMinMaxGetBufferHostSize_8u_C1R to determine the minium number of bytes required.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMinMax_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pMin : access nppdefs_h.Npp8u;
      pMax : access nppdefs_h.Npp8u;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2230
   pragma Import (C, nppiMinMax_8u_C1R, "nppiMinMax_8u_C1R");

  --*
  -- * One-channel 16-bit unsigned image MinMax.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pMin Pointer to the computed minimal result.
  -- * \param pMax Pointer to the computed maximal result.
  -- * \param pDeviceBuffer Buffer to a scratch memory. Use \ref nppiMinMaxGetBufferHostSize_16u_C1R to determine
  -- *          the minium number of bytes required.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMinMax_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pMin : access nppdefs_h.Npp16u;
      pMax : access nppdefs_h.Npp16u;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2245
   pragma Import (C, nppiMinMax_16u_C1R, "nppiMinMax_16u_C1R");

  --*
  -- * One-channel 16-bit signed image MinMax.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pMin Pointer to the computed minimal result.
  -- * \param pMax Pointer to the computed maximal result.
  -- * \param pDeviceBuffer Buffer to a scratch memory. Use \ref nppiMinMaxGetBufferHostSize_16s_C1R to determine
  -- *          the minium number of bytes required.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMinMax_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pMin : access nppdefs_h.Npp16s;
      pMax : access nppdefs_h.Npp16s;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2260
   pragma Import (C, nppiMinMax_16s_C1R, "nppiMinMax_16s_C1R");

  --*
  -- * One-channel 32-bit floating point image MinMax.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pMin Pointer to the computed minimal result.
  -- * \param pMax Pointer to the computed maximal result.
  -- * \param pDeviceBuffer Buffer to a scratch memory. Use \ref nppiMinMaxGetBufferHostSize_32f_C1R to determine
  -- *          the minium number of bytes required.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMinMax_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pMin : access nppdefs_h.Npp32f;
      pMax : access nppdefs_h.Npp32f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2275
   pragma Import (C, nppiMinMax_32f_C1R, "nppiMinMax_32f_C1R");

  --*
  -- * Three-channel 8-bit unsigned image MinMax.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aMin Array that contains the minima.
  -- * \param aMax Array that contains the maxima.
  -- * \param pDeviceBuffer Buffer to a scratch memory. Use \ref nppiMinMaxGetBufferHostSize_8u_C3R to determine
  -- *          the minium number of bytes required.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMinMax_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aMin : access nppdefs_h.Npp8u;
      aMax : access nppdefs_h.Npp8u;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2290
   pragma Import (C, nppiMinMax_8u_C3R, "nppiMinMax_8u_C3R");

  --*
  -- * Three-channel 16-bit unsigned image MinMax.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aMin Array that contains the minima.
  -- * \param aMax Array that contains the maxima.
  -- * \param pDeviceBuffer Buffer to a scratch memory. Use \ref nppiMinMaxGetBufferHostSize_16u_C3R to determine
  -- *          the minium number of bytes required.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMinMax_16u_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aMin : access nppdefs_h.Npp16u;
      aMax : access nppdefs_h.Npp16u;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2305
   pragma Import (C, nppiMinMax_16u_C3R, "nppiMinMax_16u_C3R");

  --*
  -- * Three-channel 16-bit signed image MinMax.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aMin Array that contains the minima.
  -- * \param aMax Array that contains the maxima.
  -- * \param pDeviceBuffer Buffer to a scratch memory. Use \ref nppiMinMaxGetBufferHostSize_16s_C3R to determine
  -- *          the minium number of bytes required.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMinMax_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aMin : access nppdefs_h.Npp16s;
      aMax : access nppdefs_h.Npp16s;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2320
   pragma Import (C, nppiMinMax_16s_C3R, "nppiMinMax_16s_C3R");

  --*
  -- * Three-channel 32-bit floating point image MinMax.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aMin Array that contains the minima.
  -- * \param aMax Array that contains the maxima.
  -- * \param pDeviceBuffer Buffer to a scratch memory. Use \ref nppiMinMaxGetBufferHostSize_32f_C3R to determine
  -- *          the minium number of bytes required.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMinMax_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aMin : access nppdefs_h.Npp32f;
      aMax : access nppdefs_h.Npp32f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2335
   pragma Import (C, nppiMinMax_32f_C3R, "nppiMinMax_32f_C3R");

  --*
  -- * Four-channel 8-bit unsigned image MinMax ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aMin Array that contains the minima.
  -- * \param aMax Array that contains the maxima.
  -- * \param pDeviceBuffer Buffer to a scratch memory. Use \ref nppiMinMaxGetBufferHostSize_8u_AC4R to determine
  -- *          the minium number of bytes required.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMinMax_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aMin : access nppdefs_h.Npp8u;
      aMax : access nppdefs_h.Npp8u;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2350
   pragma Import (C, nppiMinMax_8u_AC4R, "nppiMinMax_8u_AC4R");

  --*
  -- * Four-channel 16-bit unsigned image MinMax ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aMin Array that contains the minima.
  -- * \param aMax Array that contains the maxima.
  -- * \param pDeviceBuffer Buffer to a scratch memory. Use \ref nppiMinMaxGetBufferHostSize_16u_AC4R to determine
  -- *          the minium number of bytes required.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMinMax_16u_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aMin : access nppdefs_h.Npp16u;
      aMax : access nppdefs_h.Npp16u;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2365
   pragma Import (C, nppiMinMax_16u_AC4R, "nppiMinMax_16u_AC4R");

  --*
  -- * Four-channel 16-bit signed image MinMax ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aMin Array that contains the minima.
  -- * \param aMax Array that contains the maxima.
  -- * \param pDeviceBuffer Buffer to a scratch memory. Use \ref nppiMinMaxGetBufferHostSize_16s_AC4R to determine
  -- *          the minium number of bytes required.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMinMax_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aMin : access nppdefs_h.Npp16s;
      aMax : access nppdefs_h.Npp16s;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2380
   pragma Import (C, nppiMinMax_16s_AC4R, "nppiMinMax_16s_AC4R");

  --*
  -- * Four-channel 32-bit floating point image MinMax ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aMin Array that contains the minima.
  -- * \param aMax Array that contains the maxima.
  -- * \param pDeviceBuffer Buffer to a scratch memory. Use \ref nppiMinMaxGetBufferHostSize_32f_AC4R to determine
  -- *          the minium number of bytes required.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMinMax_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aMin : access nppdefs_h.Npp32f;
      aMax : access nppdefs_h.Npp32f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2395
   pragma Import (C, nppiMinMax_32f_AC4R, "nppiMinMax_32f_AC4R");

  --*
  -- * Four-channel 8-bit unsigned image MinMax.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aMin Array that contains the minima.
  -- * \param aMax Array that contains the maxima.
  -- * \param pDeviceBuffer Buffer to a scratch memory. Use \ref nppiMinMaxGetBufferHostSize_8u_C4R to determine
  -- *          the minium number of bytes required.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMinMax_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aMin : access nppdefs_h.Npp8u;
      aMax : access nppdefs_h.Npp8u;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2410
   pragma Import (C, nppiMinMax_8u_C4R, "nppiMinMax_8u_C4R");

  --*
  -- * Four-channel 16-bit unsigned image MinMax.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aMin Array that contains the minima.
  -- * \param aMax Array that contains the maxima.
  -- * \param pDeviceBuffer Buffer to a scratch memory. Use \ref nppiMinMaxGetBufferHostSize_16u_C4R to determine
  -- *          the minium number of bytes required.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMinMax_16u_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aMin : access nppdefs_h.Npp16u;
      aMax : access nppdefs_h.Npp16u;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2425
   pragma Import (C, nppiMinMax_16u_C4R, "nppiMinMax_16u_C4R");

  --*
  -- * Four-channel 16-bit signed image MinMax.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aMin Array that contains the minima.
  -- * \param aMax Array that contains the maxima.
  -- * \param pDeviceBuffer Buffer to a scratch memory. Use \ref nppiMinMaxGetBufferHostSize_16s_C4R to determine
  -- *          the minium number of bytes required.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMinMax_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aMin : access nppdefs_h.Npp16s;
      aMax : access nppdefs_h.Npp16s;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2440
   pragma Import (C, nppiMinMax_16s_C4R, "nppiMinMax_16s_C4R");

  --*
  -- * Four-channel 32-bit floating point image MinMax.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aMin Array that contains the minima.
  -- * \param aMax Array that contains the maxima.
  -- * \param pDeviceBuffer Buffer to a scratch memory. Use \ref nppiMinMaxGetBufferHostSize_32f_C4R to determine
  -- *          the minium number of bytes required.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMinMax_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aMin : access nppdefs_h.Npp32f;
      aMax : access nppdefs_h.Npp32f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2455
   pragma Import (C, nppiMinMax_32f_C4R, "nppiMinMax_32f_C4R");

  --* @}  
  --* @name MinMaxGetBufferHostSize
  -- * Companion primitives for computing the device buffer size (in bytes) required by the MinMax primitives.
  -- * @{
  --  

  --* 
  -- * Buffer size for \ref nppiMinMax_8u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinMaxGetBufferHostSize_8u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2471
   pragma Import (C, nppiMinMaxGetBufferHostSize_8u_C1R, "nppiMinMaxGetBufferHostSize_8u_C1R");

  --* 
  -- * Buffer size for \ref nppiMinMax_16u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinMaxGetBufferHostSize_16u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2481
   pragma Import (C, nppiMinMaxGetBufferHostSize_16u_C1R, "nppiMinMaxGetBufferHostSize_16u_C1R");

  --* 
  -- * Buffer size for \ref nppiMinMax_16s_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinMaxGetBufferHostSize_16s_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2491
   pragma Import (C, nppiMinMaxGetBufferHostSize_16s_C1R, "nppiMinMaxGetBufferHostSize_16s_C1R");

  --* 
  -- * Buffer size for \ref nppiMinMax_32f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinMaxGetBufferHostSize_32f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2501
   pragma Import (C, nppiMinMaxGetBufferHostSize_32f_C1R, "nppiMinMaxGetBufferHostSize_32f_C1R");

  --* 
  -- * Buffer size for \ref nppiMinMax_8u_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinMaxGetBufferHostSize_8u_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2511
   pragma Import (C, nppiMinMaxGetBufferHostSize_8u_C3R, "nppiMinMaxGetBufferHostSize_8u_C3R");

  --* 
  -- * Buffer size for \ref nppiMinMax_16u_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinMaxGetBufferHostSize_16u_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2521
   pragma Import (C, nppiMinMaxGetBufferHostSize_16u_C3R, "nppiMinMaxGetBufferHostSize_16u_C3R");

  --* 
  -- * Buffer size for \ref nppiMinMax_16s_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinMaxGetBufferHostSize_16s_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2531
   pragma Import (C, nppiMinMaxGetBufferHostSize_16s_C3R, "nppiMinMaxGetBufferHostSize_16s_C3R");

  --* 
  -- * Buffer size for \ref nppiMinMax_32f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinMaxGetBufferHostSize_32f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2541
   pragma Import (C, nppiMinMaxGetBufferHostSize_32f_C3R, "nppiMinMaxGetBufferHostSize_32f_C3R");

  --* 
  -- * Buffer size for \ref nppiMinMax_8u_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinMaxGetBufferHostSize_8u_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2551
   pragma Import (C, nppiMinMaxGetBufferHostSize_8u_AC4R, "nppiMinMaxGetBufferHostSize_8u_AC4R");

  --* 
  -- * Buffer size for \ref nppiMinMax_16u_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinMaxGetBufferHostSize_16u_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2561
   pragma Import (C, nppiMinMaxGetBufferHostSize_16u_AC4R, "nppiMinMaxGetBufferHostSize_16u_AC4R");

  --* 
  -- * Buffer size for \ref nppiMinMax_16s_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinMaxGetBufferHostSize_16s_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2571
   pragma Import (C, nppiMinMaxGetBufferHostSize_16s_AC4R, "nppiMinMaxGetBufferHostSize_16s_AC4R");

  --* 
  -- * Buffer size for \ref nppiMinMax_32f_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinMaxGetBufferHostSize_32f_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2581
   pragma Import (C, nppiMinMaxGetBufferHostSize_32f_AC4R, "nppiMinMaxGetBufferHostSize_32f_AC4R");

  --* 
  -- * Buffer size for \ref nppiMinMax_8u_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinMaxGetBufferHostSize_8u_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2591
   pragma Import (C, nppiMinMaxGetBufferHostSize_8u_C4R, "nppiMinMaxGetBufferHostSize_8u_C4R");

  --* 
  -- * Buffer size for \ref nppiMinMax_16u_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  -- 

  -- host pointer  
   function nppiMinMaxGetBufferHostSize_16u_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2601
   pragma Import (C, nppiMinMaxGetBufferHostSize_16u_C4R, "nppiMinMaxGetBufferHostSize_16u_C4R");

  --* 
  -- * Buffer size for \ref nppiMinMax_16s_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinMaxGetBufferHostSize_16s_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2611
   pragma Import (C, nppiMinMaxGetBufferHostSize_16s_C4R, "nppiMinMaxGetBufferHostSize_16s_C4R");

  --* 
  -- * Buffer size for \ref nppiMinMax_32f_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinMaxGetBufferHostSize_32f_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2621
   pragma Import (C, nppiMinMaxGetBufferHostSize_32f_C4R, "nppiMinMaxGetBufferHostSize_32f_C4R");

  --* @}  
  --* @} image_min_max  
  --* @defgroup image_min_max_index MinMaxIndx
  -- * Primitives for computing the minimal and the maximal values with their indices (X and Y coordinates) of an image.
  -- * @{
  --  

  --* @name MinMaxIndx
  -- * If there are several minima and maxima in the selected region of interest, the function returns ones on the top leftmost position.
  -- * The scratch buffer is required by the functions.
  -- * @{
  --  

  --*
  -- * Computes the minimal and the maximal pixel values with their X and Y coordinates of 1-channel 8-bit unsigned char image. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pMinValue Pointer to the minimum value.
  -- * \param pMaxValue Pointer to the maximum value.
  -- * \param pMinIndex Pointer to the indicies (X and Y coordinates) of the minimum value.
  -- * \param pMaxIndex Pointer to the indicies (X and Y coordinates) of the maximum value.
  -- * \param pDeviceBuffer Buffer to a scratch memory. Use \ref nppiMinMaxIndxGetBufferHostSize_8u_C1R to determine
  -- *          the minium number of bytes required.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes. 
  -- * If any of pMinValue, pMaxValue, pMinIndex, or pMaxIndex is not needed, zero pointer must be passed correspondingly.
  --  

   function nppiMinMaxIndx_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pMinValue : access nppdefs_h.Npp8u;
      pMaxValue : access nppdefs_h.Npp8u;
      pMinIndex : access nppdefs_h.NppiPoint;
      pMaxIndex : access nppdefs_h.NppiPoint;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2652
   pragma Import (C, nppiMinMaxIndx_8u_C1R, "nppiMinMaxIndx_8u_C1R");

  --*
  -- * Computes the minimal and the maximal pixel values with their X and Y coordinates of 1-channel 8-bit signed char image. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pMinValue Pointer to the minimum value.
  -- * \param pMaxValue Pointer to the maximum value.
  -- * \param pMinIndex Pointer to the indicies (X and Y coordinates) of the minimum value.
  -- * \param pMaxIndex Pointer to the indicies (X and Y coordinates) of the maximum value.
  -- * \param pDeviceBuffer Buffer to a scratch memory. Use \ref nppiMinMaxIndxGetBufferHostSize_8s_C1R to determine
  -- *          the minium number of bytes required.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes. 
  -- * If any of pMinValue, pMaxValue, pMinIndex, or pMaxIndex is not needed, zero pointer must be passed correspondingly.
  --  

   function nppiMinMaxIndx_8s_C1R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pMinValue : access nppdefs_h.Npp8s;
      pMaxValue : access nppdefs_h.Npp8s;
      pMinIndex : access nppdefs_h.NppiPoint;
      pMaxIndex : access nppdefs_h.NppiPoint;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2670
   pragma Import (C, nppiMinMaxIndx_8s_C1R, "nppiMinMaxIndx_8s_C1R");

  --*
  -- * Computes the minimal and the maximal pixel values with their X and Y coordinates of 1-channel 16-bit unsigned short image. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pMinValue Pointer to the minimum value.
  -- * \param pMaxValue Pointer to the maximum value.
  -- * \param pMinIndex Pointer to the indicies (X and Y coordinates) of the minimum value.
  -- * \param pMaxIndex Pointer to the indicies (X and Y coordinates) of the maximum value.
  -- * \param pDeviceBuffer Buffer to a scratch memory. Use \ref nppiMinMaxIndxGetBufferHostSize_16u_C1R to determine
  -- *          the minium number of bytes required.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes. 
  -- * If any of pMinValue, pMaxValue, pMinIndex, or pMaxIndex is not needed, zero pointer must be passed correspondingly.
  --  

   function nppiMinMaxIndx_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pMinValue : access nppdefs_h.Npp16u;
      pMaxValue : access nppdefs_h.Npp16u;
      pMinIndex : access nppdefs_h.NppiPoint;
      pMaxIndex : access nppdefs_h.NppiPoint;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2688
   pragma Import (C, nppiMinMaxIndx_16u_C1R, "nppiMinMaxIndx_16u_C1R");

  --*
  -- * Computes the minimal and the maximal pixel values with their X and Y coordinates of 1-channel 32-bit floating point image. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pMinValue Pointer to the minimum value.
  -- * \param pMaxValue Pointer to the maximum value.
  -- * \param pMinIndex Pointer to the indicies (X and Y coordinates) of the minimum value.
  -- * \param pMaxIndex Pointer to the indicies (X and Y coordinates) of the maximum value.
  -- * \param pDeviceBuffer Buffer to a scratch memory. Use \ref nppiMinMaxIndxGetBufferHostSize_32f_C1R to determine
  -- *          the minium number of bytes required.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.
  -- * If any of pMinValue, pMaxValue, pMinIndex, or pMaxIndex is not needed, zero pointer must be passed correspondingly.
  --  

   function nppiMinMaxIndx_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pMinValue : access nppdefs_h.Npp32f;
      pMaxValue : access nppdefs_h.Npp32f;
      pMinIndex : access nppdefs_h.NppiPoint;
      pMaxIndex : access nppdefs_h.NppiPoint;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2706
   pragma Import (C, nppiMinMaxIndx_32f_C1R, "nppiMinMaxIndx_32f_C1R");

  --* @}  
  --* @name Masked MinMaxIndx
  -- * See \ref masked_operation.
  -- * @{
  --  

  --*
  -- * Masked one-channel 8-bit unsigned image MinMaxIndx.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pMinValue Pointer to the minimum value.
  -- * \param pMaxValue Pointer to the maximum value.
  -- * \param pMinIndex Pointer to the indicies (X and Y coordinates) of the minimum value.
  -- * \param pMaxIndex Pointer to the indicies (X and Y coordinates) of the maximum value.
  -- * \param pDeviceBuffer Buffer to a scratch memory. Use \ref nppiMinMaxIndxGetBufferHostSize_8u_C1MR to determine
  -- *          the minium number of bytes required.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes. 
  -- * If the mask is filled with zeros, then all the returned values are zeros, i.e., pMinIndex = {0, 0}, pMaxIndex = {0, 0},
  -- * pMinValue = 0, pMaxValue = 0.
  -- * If any of pMinValue, pMaxValue, pMinIndex, or pMaxIndex is not needed, zero pointer must be passed correspondingly.
  --  

   function nppiMinMaxIndx_8u_C1MR
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pMinValue : access nppdefs_h.Npp8u;
      pMaxValue : access nppdefs_h.Npp8u;
      pMinIndex : access nppdefs_h.NppiPoint;
      pMaxIndex : access nppdefs_h.NppiPoint;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2734
   pragma Import (C, nppiMinMaxIndx_8u_C1MR, "nppiMinMaxIndx_8u_C1MR");

  --*
  -- * Masked one-channel 8-bit signed image MinMaxIndx.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pMinValue Pointer to the minimum value.
  -- * \param pMaxValue Pointer to the maximum value.
  -- * \param pMinIndex Pointer to the indicies (X and Y coordinates) of the minimum value.
  -- * \param pMaxIndex Pointer to the indicies (X and Y coordinates) of the maximum value.
  -- * \param pDeviceBuffer Buffer to a scratch memory. Use \ref nppiMinMaxIndxGetBufferHostSize_8s_C1MR to determine
  -- *          the minium number of bytes required.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes. 
  -- * If the mask is filled with zeros, then all the returned values are zeros, i.e., pMinIndex = {0, 0}, pMaxIndex = {0, 0},
  -- * pMinValue = 0, pMaxValue = 0.
  -- * If any of pMinValue, pMaxValue, pMinIndex, or pMaxIndex is not needed, zero pointer must be passed correspondingly.
  --  

   function nppiMinMaxIndx_8s_C1MR
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pMinValue : access nppdefs_h.Npp8s;
      pMaxValue : access nppdefs_h.Npp8s;
      pMinIndex : access nppdefs_h.NppiPoint;
      pMaxIndex : access nppdefs_h.NppiPoint;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2756
   pragma Import (C, nppiMinMaxIndx_8s_C1MR, "nppiMinMaxIndx_8s_C1MR");

  --*
  -- * Masked one-channel 16-bit unsigned image MinMaxIndx.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pMinValue Pointer to the minimum value.
  -- * \param pMaxValue Pointer to the maximum value.
  -- * \param pMinIndex Pointer to the indicies (X and Y coordinates) of the minimum value.
  -- * \param pMaxIndex Pointer to the indicies (X and Y coordinates) of the maximum value.
  -- * \param pDeviceBuffer Buffer to a scratch memory. Use \ref nppiMinMaxIndxGetBufferHostSize_16u_C1MR to determine
  -- *          the minium number of bytes required.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes. 
  -- * If the mask is filled with zeros, then all the returned values are zeros, i.e., pMinIndex = {0, 0}, pMaxIndex = {0, 0},
  -- * pMinValue = 0, pMaxValue = 0.
  -- * If any of pMinValue, pMaxValue, pMinIndex, or pMaxIndex is not needed, zero pointer must be passed correspondingly.
  --  

   function nppiMinMaxIndx_16u_C1MR
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pMinValue : access nppdefs_h.Npp16u;
      pMaxValue : access nppdefs_h.Npp16u;
      pMinIndex : access nppdefs_h.NppiPoint;
      pMaxIndex : access nppdefs_h.NppiPoint;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2778
   pragma Import (C, nppiMinMaxIndx_16u_C1MR, "nppiMinMaxIndx_16u_C1MR");

  --*
  -- * Masked one-channel 32-bit floating point image MinMaxIndx.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pMinValue Pointer to the minimum value.
  -- * \param pMaxValue Pointer to the maximum value.
  -- * \param pMinIndex Pointer to the indicies (X and Y coordinates) of the minimum value.
  -- * \param pMaxIndex Pointer to the indicies (X and Y coordinates) of the maximum value.
  -- * \param pDeviceBuffer Buffer to a scratch memory. Use \ref nppiMinMaxIndxGetBufferHostSize_32f_C1MR to determine
  -- *          the minium number of bytes required.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.
  -- * If the mask is filled with zeros, then all the returned values are zeros, i.e., pMinIndex = {0, 0}, pMaxIndex = {0, 0},
  -- * pMinValue = 0, pMaxValue = 0.
  -- * If any of pMinValue, pMaxValue, pMinIndex, or pMaxIndex is not needed, zero pointer must be passed correspondingly.
  --  

   function nppiMinMaxIndx_32f_C1MR
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pMinValue : access nppdefs_h.Npp32f;
      pMaxValue : access nppdefs_h.Npp32f;
      pMinIndex : access nppdefs_h.NppiPoint;
      pMaxIndex : access nppdefs_h.NppiPoint;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2800
   pragma Import (C, nppiMinMaxIndx_32f_C1MR, "nppiMinMaxIndx_32f_C1MR");

  --* @}  
  --* @name Channel MinMaxIndx
  -- * See \ref channel_of_interest.
  -- * @{
  --  

  --*
  -- * Three-channel 8-bit unsigned image MinMaxIndx affecting only single channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pMinValue Pointer to the minimum value.
  -- * \param pMaxValue Pointer to the maximum value.
  -- * \param pMinIndex Pointer to the indicies (X and Y coordinates) of the minimum value.
  -- * \param pMaxIndex Pointer to the indicies (X and Y coordinates) of the maximum value.
  -- * \param pDeviceBuffer Buffer to a scratch memory. Use \ref nppiMinMaxIndxGetBufferHostSize_8u_C3CR to determine
  -- *          the minium number of bytes required.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.
  -- * If any of pMinValue, pMaxValue, pMinIndex, or pMaxIndex is not needed, zero pointer must be passed correspondingly.
  --  

   function nppiMinMaxIndx_8u_C3CR
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pMinValue : access nppdefs_h.Npp8u;
      pMaxValue : access nppdefs_h.Npp8u;
      pMinIndex : access nppdefs_h.NppiPoint;
      pMaxIndex : access nppdefs_h.NppiPoint;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2825
   pragma Import (C, nppiMinMaxIndx_8u_C3CR, "nppiMinMaxIndx_8u_C3CR");

  --*
  -- * Three-channel 8-bit signed image MinMaxIndx affecting only single channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pMinValue Pointer to the minimum value.
  -- * \param pMaxValue Pointer to the maximum value.
  -- * \param pMinIndex Pointer to the indicies (X and Y coordinates) of the minimum value.
  -- * \param pMaxIndex Pointer to the indicies (X and Y coordinates) of the maximum value.
  -- * \param pDeviceBuffer Buffer to a scratch memory. Use \ref nppiMinMaxIndxGetBufferHostSize_8s_C3CR to determine
  -- *          the minium number of bytes required.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.
  -- * If any of pMinValue, pMaxValue, pMinIndex, or pMaxIndex is not needed, zero pointer must be passed correspondingly.
  --  

   function nppiMinMaxIndx_8s_C3CR
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pMinValue : access nppdefs_h.Npp8s;
      pMaxValue : access nppdefs_h.Npp8s;
      pMinIndex : access nppdefs_h.NppiPoint;
      pMaxIndex : access nppdefs_h.NppiPoint;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2844
   pragma Import (C, nppiMinMaxIndx_8s_C3CR, "nppiMinMaxIndx_8s_C3CR");

  --*
  -- * Three-channel 16-bit unsigned image MinMaxIndx affecting only single channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pMinValue Pointer to the minimum value.
  -- * \param pMaxValue Pointer to the maximum value.
  -- * \param pMinIndex Pointer to the indicies (X and Y coordinates) of the minimum value.
  -- * \param pMaxIndex Pointer to the indicies (X and Y coordinates) of the maximum value.
  -- * \param pDeviceBuffer Buffer to a scratch memory. Use \ref nppiMinMaxIndxGetBufferHostSize_16u_C3CR to determine
  -- *          the minium number of bytes required.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.
  -- * If any of pMinValue, pMaxValue, pMinIndex, or pMaxIndex is not needed, zero pointer must be passed correspondingly.
  --  

   function nppiMinMaxIndx_16u_C3CR
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pMinValue : access nppdefs_h.Npp16u;
      pMaxValue : access nppdefs_h.Npp16u;
      pMinIndex : access nppdefs_h.NppiPoint;
      pMaxIndex : access nppdefs_h.NppiPoint;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2863
   pragma Import (C, nppiMinMaxIndx_16u_C3CR, "nppiMinMaxIndx_16u_C3CR");

  --*
  -- * Three-channel 32-bit floating point image MinMaxIndx affecting only single channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pMinValue Pointer to the minimum value.
  -- * \param pMaxValue Pointer to the maximum value.
  -- * \param pMinIndex Pointer to the indicies (X and Y coordinates) of the minimum value.
  -- * \param pMaxIndex Pointer to the indicies (X and Y coordinates) of the maximum value.
  -- * \param pDeviceBuffer Buffer to a scratch memory. Use \ref nppiMinMaxIndxGetBufferHostSize_32f_C3CR to determine
  -- *          the minium number of bytes required.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified, or NPP_COI_ERROR if an invalid channel of interest is specified.
  -- * If any of pMinValue, pMaxValue, pMinIndex, or pMaxIndex is not needed, zero pointer must be passed correspondingly.
  --  

   function nppiMinMaxIndx_32f_C3CR
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pMinValue : access nppdefs_h.Npp32f;
      pMaxValue : access nppdefs_h.Npp32f;
      pMinIndex : access nppdefs_h.NppiPoint;
      pMaxIndex : access nppdefs_h.NppiPoint;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2882
   pragma Import (C, nppiMinMaxIndx_32f_C3CR, "nppiMinMaxIndx_32f_C3CR");

  --* @}  
  --* @name Masked Channel MinMaxIndx
  -- * See \ref masked_operation and \ref channel_of_interest.
  -- * @{
  --  

  --*
  -- * Masked three-channel 8-bit unsigned image MinMaxIndx affecting only single channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pMinValue Pointer to the minimum value.
  -- * \param pMaxValue Pointer to the maximum value.
  -- * \param pMinIndex Pointer to the indicies (X and Y coordinates) of the minimum value.
  -- * \param pMaxIndex Pointer to the indicies (X and Y coordinates) of the maximum value.
  -- * \param pDeviceBuffer Buffer to a scratch memory. Use \ref nppiMinMaxIndxGetBufferHostSize_8u_C3CMR to determine
  -- *          the minium number of bytes required.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.
  -- * If the mask is filled with zeros, then all the returned values are zeros, i.e., pMinIndex = {0, 0}, pMaxIndex = {0, 0},
  -- * pMinValue = 0, pMaxValue = 0.
  -- * If any of pMinValue, pMaxValue, pMinIndex, or pMaxIndex is not needed, zero pointer must be passed correspondingly.
  --  

   function nppiMinMaxIndx_8u_C3CMR
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pMinValue : access nppdefs_h.Npp8u;
      pMaxValue : access nppdefs_h.Npp8u;
      pMinIndex : access nppdefs_h.NppiPoint;
      pMaxIndex : access nppdefs_h.NppiPoint;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2911
   pragma Import (C, nppiMinMaxIndx_8u_C3CMR, "nppiMinMaxIndx_8u_C3CMR");

  --*
  -- * Masked three-channel 8-bit signed image MinMaxIndx affecting only single channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pMinValue Pointer to the minimum value.
  -- * \param pMaxValue Pointer to the maximum value.
  -- * \param pMinIndex Pointer to the indicies (X and Y coordinates) of the minimum value.
  -- * \param pMaxIndex Pointer to the indicies (X and Y coordinates) of the maximum value.
  -- * \param pDeviceBuffer Buffer to a scratch memory. Use \ref nppiMinMaxIndxGetBufferHostSize_8s_C3CMR to determine
  -- *          the minium number of bytes required.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.
  -- * If the mask is filled with zeros, then all the returned values are zeros, i.e., pMinIndex = {0, 0}, pMaxIndex = {0, 0},
  -- * pMinValue = 0, pMaxValue = 0.
  -- * If any of pMinValue, pMaxValue, pMinIndex, or pMaxIndex is not needed, zero pointer must be passed correspondingly.
  --  

   function nppiMinMaxIndx_8s_C3CMR
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pMinValue : access nppdefs_h.Npp8s;
      pMaxValue : access nppdefs_h.Npp8s;
      pMinIndex : access nppdefs_h.NppiPoint;
      pMaxIndex : access nppdefs_h.NppiPoint;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2934
   pragma Import (C, nppiMinMaxIndx_8s_C3CMR, "nppiMinMaxIndx_8s_C3CMR");

  --*
  -- * Masked three-channel 16-bit unsigned image MinMaxIndx affecting only single channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pMinValue Pointer to the minimum value.
  -- * \param pMaxValue Pointer to the maximum value.
  -- * \param pMinIndex Pointer to the indicies (X and Y coordinates) of the minimum value.
  -- * \param pMaxIndex Pointer to the indicies (X and Y coordinates) of the maximum value.
  -- * \param pDeviceBuffer Buffer to a scratch memory. Use \ref nppiMinMaxIndxGetBufferHostSize_16u_C3CMR to determine
  -- *          the minium number of bytes required.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.
  -- * If the mask is filled with zeros, then all the returned values are zeros, i.e., pMinIndex = {0, 0}, pMaxIndex = {0, 0},
  -- * pMinValue = 0, pMaxValue = 0.
  -- * If any of pMinValue, pMaxValue, pMinIndex, or pMaxIndex is not needed, zero pointer must be passed correspondingly.
  --  

   function nppiMinMaxIndx_16u_C3CMR
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pMinValue : access nppdefs_h.Npp16u;
      pMaxValue : access nppdefs_h.Npp16u;
      pMinIndex : access nppdefs_h.NppiPoint;
      pMaxIndex : access nppdefs_h.NppiPoint;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2957
   pragma Import (C, nppiMinMaxIndx_16u_C3CMR, "nppiMinMaxIndx_16u_C3CMR");

  --*
  -- * Masked three-channel 32-bit floating point image MinMaxIndx affecting only single channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pMinValue Pointer to the minimum value.
  -- * \param pMaxValue Pointer to the maximum value.
  -- * \param pMinIndex Pointer to the indicies (X and Y coordinates) of the minimum value.
  -- * \param pMaxIndex Pointer to the indicies (X and Y coordinates) of the maximum value.
  -- * \param pDeviceBuffer Buffer to a scratch memory. Use \ref nppiMinMaxIndxGetBufferHostSize_32f_C3CMR to determine
  -- *          the minium number of bytes required.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified, or NPP_COI_ERROR if an invalid channel of interest is specified.
  -- * If the mask is filled with zeros, then all the returned values are zeros, i.e., pMinIndex = {0, 0}, pMaxIndex = {0, 0},
  -- * pMinValue = 0, pMaxValue = 0.
  -- * If any of pMinValue, pMaxValue, pMinIndex, or pMaxIndex is not needed, zero pointer must be passed correspondingly.
  --  

   function nppiMinMaxIndx_32f_C3CMR
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pMinValue : access nppdefs_h.Npp32f;
      pMaxValue : access nppdefs_h.Npp32f;
      pMinIndex : access nppdefs_h.NppiPoint;
      pMaxIndex : access nppdefs_h.NppiPoint;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2980
   pragma Import (C, nppiMinMaxIndx_32f_C3CMR, "nppiMinMaxIndx_32f_C3CMR");

  --* @}  
  --* @name MinMaxIndxGetBufferHostSize
  -- * Companion primitives for computing the device buffer size (in bytes) required by the MinMaxIndx primitives.
  -- * @{
  --  

  --* 
  -- * Buffer size for \ref nppiMinMaxIndx_8u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  -- 

  -- host pointer  
   function nppiMinMaxIndxGetBufferHostSize_8u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:2995
   pragma Import (C, nppiMinMaxIndxGetBufferHostSize_8u_C1R, "nppiMinMaxIndxGetBufferHostSize_8u_C1R");

  --* 
  -- * Buffer size for \ref nppiMinMaxIndx_8s_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinMaxIndxGetBufferHostSize_8s_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3005
   pragma Import (C, nppiMinMaxIndxGetBufferHostSize_8s_C1R, "nppiMinMaxIndxGetBufferHostSize_8s_C1R");

  --* 
  -- * Buffer size for \ref nppiMinMaxIndx_16u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinMaxIndxGetBufferHostSize_16u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3015
   pragma Import (C, nppiMinMaxIndxGetBufferHostSize_16u_C1R, "nppiMinMaxIndxGetBufferHostSize_16u_C1R");

  --* 
  -- * Buffer size for \ref nppiMinMaxIndx_32f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinMaxIndxGetBufferHostSize_32f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3025
   pragma Import (C, nppiMinMaxIndxGetBufferHostSize_32f_C1R, "nppiMinMaxIndxGetBufferHostSize_32f_C1R");

  --* 
  -- * Buffer size for \ref nppiMinMaxIndx_8u_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinMaxIndxGetBufferHostSize_8u_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3035
   pragma Import (C, nppiMinMaxIndxGetBufferHostSize_8u_C1MR, "nppiMinMaxIndxGetBufferHostSize_8u_C1MR");

  --* 
  -- * Buffer size for \ref nppiMinMaxIndx_8s_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinMaxIndxGetBufferHostSize_8s_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3045
   pragma Import (C, nppiMinMaxIndxGetBufferHostSize_8s_C1MR, "nppiMinMaxIndxGetBufferHostSize_8s_C1MR");

  --* 
  -- * Buffer size for \ref nppiMinMaxIndx_16u_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinMaxIndxGetBufferHostSize_16u_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3055
   pragma Import (C, nppiMinMaxIndxGetBufferHostSize_16u_C1MR, "nppiMinMaxIndxGetBufferHostSize_16u_C1MR");

  --* 
  -- * Buffer size for \ref nppiMinMaxIndx_32f_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinMaxIndxGetBufferHostSize_32f_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3065
   pragma Import (C, nppiMinMaxIndxGetBufferHostSize_32f_C1MR, "nppiMinMaxIndxGetBufferHostSize_32f_C1MR");

  --* 
  -- * Buffer size for \ref nppiMinMaxIndx_8u_C3CR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinMaxIndxGetBufferHostSize_8u_C3CR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3075
   pragma Import (C, nppiMinMaxIndxGetBufferHostSize_8u_C3CR, "nppiMinMaxIndxGetBufferHostSize_8u_C3CR");

  --* 
  -- * Buffer size for \ref nppiMinMaxIndx_8s_C3CR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinMaxIndxGetBufferHostSize_8s_C3CR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3085
   pragma Import (C, nppiMinMaxIndxGetBufferHostSize_8s_C3CR, "nppiMinMaxIndxGetBufferHostSize_8s_C3CR");

  --* 
  -- * Buffer size for \ref nppiMinMaxIndx_16u_C3CR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinMaxIndxGetBufferHostSize_16u_C3CR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3095
   pragma Import (C, nppiMinMaxIndxGetBufferHostSize_16u_C3CR, "nppiMinMaxIndxGetBufferHostSize_16u_C3CR");

  --* 
  -- * Buffer size for \ref nppiMinMaxIndx_32f_C3CR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinMaxIndxGetBufferHostSize_32f_C3CR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3105
   pragma Import (C, nppiMinMaxIndxGetBufferHostSize_32f_C3CR, "nppiMinMaxIndxGetBufferHostSize_32f_C3CR");

  --* 
  -- * Buffer size for \ref nppiMinMaxIndx_8u_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinMaxIndxGetBufferHostSize_8u_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3115
   pragma Import (C, nppiMinMaxIndxGetBufferHostSize_8u_C3CMR, "nppiMinMaxIndxGetBufferHostSize_8u_C3CMR");

  --* 
  -- * Buffer size for \ref nppiMinMaxIndx_8s_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinMaxIndxGetBufferHostSize_8s_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3125
   pragma Import (C, nppiMinMaxIndxGetBufferHostSize_8s_C3CMR, "nppiMinMaxIndxGetBufferHostSize_8s_C3CMR");

  --* 
  -- * Buffer size for \ref nppiMinMaxIndx_16u_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinMaxIndxGetBufferHostSize_16u_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3135
   pragma Import (C, nppiMinMaxIndxGetBufferHostSize_16u_C3CMR, "nppiMinMaxIndxGetBufferHostSize_16u_C3CMR");

  --* 
  -- * Buffer size for \ref nppiMinMaxIndx_32f_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMinMaxIndxGetBufferHostSize_32f_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3145
   pragma Import (C, nppiMinMaxIndxGetBufferHostSize_32f_C3CMR, "nppiMinMaxIndxGetBufferHostSize_32f_C3CMR");

  --* @}  
  --* @} image_min_max_index  
  --* @defgroup image_mean Mean
  -- * Primitives for computing the arithmetic mean of all the pixel values in an image.
  -- * @{
  --  

  --* @name Mean
  -- * Given an image \f$pSrc\f$ with width \f$W\f$ and height \f$H\f$, the arithmetic mean
  -- * will be computed as
  -- * \f[Mean = \frac{1}{W\cdot H}\sum_{j=0}^{H-1}\sum_{i=0}^{W-1}pSrc(j,i)\f]
  -- * The mean functions require additional scratch buffer for computations.
  -- * @{
  --  

  --*
  -- * One-channel 8-bit unsigned image Mean.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMeanGetBufferHostSize_8u_C1R to determine the minium number of bytes required.
  -- * \param pMean Pointer to the computed mean result.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMean_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pMean : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3173
   pragma Import (C, nppiMean_8u_C1R, "nppiMean_8u_C1R");

  --*
  -- * One-channel 16-bit unsigned image Mean.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMeanGetBufferHostSize_16u_C1R to determine the minium number of bytes required.
  -- * \param pMean Pointer to the computed mean result.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMean_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pMean : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3187
   pragma Import (C, nppiMean_16u_C1R, "nppiMean_16u_C1R");

  --*
  -- * One-channel 16-bit signed image Mean.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMeanGetBufferHostSize_16s_C1R to determine the minium number of bytes required.
  -- * \param pMean Pointer to the computed mean result.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMean_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pMean : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3201
   pragma Import (C, nppiMean_16s_C1R, "nppiMean_16s_C1R");

  --*
  -- * One-channel 32-bit floating point image Mean.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMeanGetBufferHostSize_32f_C1R to determine the minium number of bytes required.
  -- * \param pMean Pointer to the computed mean result.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if an invalid 
  -- * floating-point image is specified.
  --  

   function nppiMean_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pMean : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3216
   pragma Import (C, nppiMean_32f_C1R, "nppiMean_32f_C1R");

  --*
  -- * Three-channel 8-bit unsigned image Mean.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMeanGetBufferHostSize_8u_C3R to determine the minium number of bytes required.
  -- * \param aMean Array that contains the computed mean results.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMean_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMean : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3230
   pragma Import (C, nppiMean_8u_C3R, "nppiMean_8u_C3R");

  --*
  -- * Three-channel 16-bit unsigned image Mean.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMeanGetBufferHostSize_16u_C3R to determine the minium number of bytes required.
  -- * \param aMean Array that contains the computed mean results.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMean_16u_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMean : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3244
   pragma Import (C, nppiMean_16u_C3R, "nppiMean_16u_C3R");

  --*
  -- * Three-channel 16-bit signed image Mean.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMeanGetBufferHostSize_16s_C3R to determine the minium number of bytes required.
  -- * \param aMean Array that contains the computed mean results.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMean_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMean : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3258
   pragma Import (C, nppiMean_16s_C3R, "nppiMean_16s_C3R");

  --*
  -- * Three-channel 32-bit floating point image Mean.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMeanGetBufferHostSize_32f_C3R to determine the minium number of bytes required.
  -- * \param aMean Array that contains the computed mean results.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if an invalid 
  -- * floating-point image is specified.
  --  

   function nppiMean_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMean : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3273
   pragma Import (C, nppiMean_32f_C3R, "nppiMean_32f_C3R");

  --*
  -- * Four-channel 8-bit unsigned image Mean.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMeanGetBufferHostSize_8u_C4R to determine the minium number of bytes required.
  -- * \param aMean Array that contains the computed mean results.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMean_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMean : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3287
   pragma Import (C, nppiMean_8u_C4R, "nppiMean_8u_C4R");

  --*
  -- * Four-channel 16-bit unsigned image Mean.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMeanGetBufferHostSize_16u_C4R to determine the minium number of bytes required.
  -- * \param aMean Array that contains the computed mean results.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMean_16u_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMean : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3301
   pragma Import (C, nppiMean_16u_C4R, "nppiMean_16u_C4R");

  --*
  -- * Four-channel 16-bit signed image Mean.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMeanGetBufferHostSize_16s_C4R to determine the minium number of bytes required.
  -- * \param aMean Array that contains the computed mean results.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMean_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMean : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3315
   pragma Import (C, nppiMean_16s_C4R, "nppiMean_16s_C4R");

  --*
  -- * Four-channel 32-bit floating point image Mean.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMeanGetBufferHostSize_32f_C4R to determine the minium number of bytes required.
  -- * \param aMean Array that contains the computed mean results.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if an invalid 
  -- * floating-point image is specified.
  --  

   function nppiMean_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMean : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3330
   pragma Import (C, nppiMean_32f_C4R, "nppiMean_32f_C4R");

  --*
  -- * Four-channel 8-bit unsigned image Mean ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMeanGetBufferHostSize_8u_AC4R to determine the minium number of bytes required.
  -- * \param aMean Array that contains the computed mean results.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMean_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMean : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3344
   pragma Import (C, nppiMean_8u_AC4R, "nppiMean_8u_AC4R");

  --*
  -- * Four-channel 16-bit unsigned image Mean ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMeanGetBufferHostSize_16u_AC4R to determine the minium number of bytes required.
  -- * \param aMean Array that contains the computed mean results.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMean_16u_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMean : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3358
   pragma Import (C, nppiMean_16u_AC4R, "nppiMean_16u_AC4R");

  --*
  -- * Four-channel 16-bit signed image Mean ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMeanGetBufferHostSize_16s_AC4R to determine the minium number of bytes required.
  -- * \param aMean Array that contains the computed mean results.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMean_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMean : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3372
   pragma Import (C, nppiMean_16s_AC4R, "nppiMean_16s_AC4R");

  --*
  -- * Four-channel 32-bit floating point image Mean ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMeanGetBufferHostSize_32f_AC4R to determine the minium number of bytes required.
  -- * \param aMean Array that contains the computed mean results.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if an invalid 
  -- * floating-point image is specified.
  --  

   function nppiMean_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      aMean : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3387
   pragma Import (C, nppiMean_32f_AC4R, "nppiMean_32f_AC4R");

  --* @}  
  --* @name Masked Mean
  -- * See \ref masked_operation.
  -- * @{
  --  

  --*
  -- * Masked one-channel 8-bit unsigned image Mean.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMeanGetBufferHostSize_8u_C1MR to determine the minium number of bytes required.
  -- * \param pMean Pointer to the computed mean result.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiMean_8u_C1MR
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pMean : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3409
   pragma Import (C, nppiMean_8u_C1MR, "nppiMean_8u_C1MR");

  --*
  -- * Masked one-channel 8-bit signed image Mean.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMeanGetBufferHostSize_8s_C1MR to determine the minium number of bytes required.
  -- * \param pMean Pointer to the computed mean result.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiMean_8s_C1MR
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pMean : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3425
   pragma Import (C, nppiMean_8s_C1MR, "nppiMean_8s_C1MR");

  --*
  -- * Masked one-channel 16-bit unsigned image Mean.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMeanGetBufferHostSize_16u_C1MR to determine the minium number of bytes required.
  -- * \param pMean Pointer to the computed mean result.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiMean_16u_C1MR
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pMean : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3441
   pragma Import (C, nppiMean_16u_C1MR, "nppiMean_16u_C1MR");

  --*
  -- * Masked one-channel 32-bit floating point image Mean.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMeanGetBufferHostSize_32f_C1MR to determine the minium number of bytes required.
  -- * \param pMean Pointer to the computed mean result.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if an invalid 
  -- * floating-point image is specified.
  --  

   function nppiMean_32f_C1MR
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pMean : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3458
   pragma Import (C, nppiMean_32f_C1MR, "nppiMean_32f_C1MR");

  --* @}  
  --* @name Masked Channel Mean
  -- * See \ref channel_of_interest and \ref masked_operation.
  -- * @{
  --  

  --*
  -- * Masked three-channel 8-bit unsigned image Mean affecting only single channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMeanGetBufferHostSize_8u_C3CMR to determine the minium number of bytes required.
  -- * \param pMean Pointer to the computed mean result.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.
  --  

   function nppiMean_8u_C3CMR
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pMean : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3480
   pragma Import (C, nppiMean_8u_C3CMR, "nppiMean_8u_C3CMR");

  --*
  -- * Masked three-channel 8-bit signed image Mean affecting only single channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMeanGetBufferHostSize_8s_C3CMR to determine the minium number of bytes required.
  -- * \param pMean Pointer to the computed mean result.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.
  --  

   function nppiMean_8s_C3CMR
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pMean : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3497
   pragma Import (C, nppiMean_8s_C3CMR, "nppiMean_8s_C3CMR");

  --*
  -- * Masked three-channel 16-bit unsigned image Mean affecting only single channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMeanGetBufferHostSize_16u_C3CMR to determine the minium number of bytes required.
  -- * \param pMean Pointer to the computed mean result.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.
  --  

   function nppiMean_16u_C3CMR
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pMean : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3514
   pragma Import (C, nppiMean_16u_C3CMR, "nppiMean_16u_C3CMR");

  --*
  -- * Masked three-channel 32-bit floating point image Mean affecting only single channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMeanGetBufferHostSize_32f_C3CMR to determine the minium number of bytes required.
  -- * \param pMean Pointer to the computed mean result.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if an invalid 
  -- * floating-point image is specified, or NPP_COI_ERROR if an invalid channel of interest is specified.
  --  

   function nppiMean_32f_C3CMR
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pMean : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3532
   pragma Import (C, nppiMean_32f_C3CMR, "nppiMean_32f_C3CMR");

  --* @}  
  --* @name MeanGetBufferHostSize
  -- * Companion primitives for computing the device buffer size (in bytes) required by the Mean primitives.
  -- * @{
  --  

  --*
  -- * Buffer size for \ref nppiMean_8u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMeanGetBufferHostSize_8u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3547
   pragma Import (C, nppiMeanGetBufferHostSize_8u_C1R, "nppiMeanGetBufferHostSize_8u_C1R");

  --*
  -- * Buffer size for \ref nppiMean_16u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  -- 

  -- host pointer  
   function nppiMeanGetBufferHostSize_16u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3557
   pragma Import (C, nppiMeanGetBufferHostSize_16u_C1R, "nppiMeanGetBufferHostSize_16u_C1R");

  --*
  -- * Buffer size for \ref nppiMean_16s_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  -- 

  -- host pointer  
   function nppiMeanGetBufferHostSize_16s_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3567
   pragma Import (C, nppiMeanGetBufferHostSize_16s_C1R, "nppiMeanGetBufferHostSize_16s_C1R");

  --* 
  -- * Buffer size for \ref nppiMean_32f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMeanGetBufferHostSize_32f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3577
   pragma Import (C, nppiMeanGetBufferHostSize_32f_C1R, "nppiMeanGetBufferHostSize_32f_C1R");

  --* 
  -- * Buffer size for \ref nppiMean_8u_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMeanGetBufferHostSize_8u_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3587
   pragma Import (C, nppiMeanGetBufferHostSize_8u_C3R, "nppiMeanGetBufferHostSize_8u_C3R");

  --* 
  -- * Buffer size for \ref nppiMean_16u_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMeanGetBufferHostSize_16u_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3597
   pragma Import (C, nppiMeanGetBufferHostSize_16u_C3R, "nppiMeanGetBufferHostSize_16u_C3R");

  --* 
  -- * Buffer size for \ref nppiMean_16s_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMeanGetBufferHostSize_16s_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3607
   pragma Import (C, nppiMeanGetBufferHostSize_16s_C3R, "nppiMeanGetBufferHostSize_16s_C3R");

  --* 
  -- * Buffer size for \ref nppiMean_32f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMeanGetBufferHostSize_32f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3617
   pragma Import (C, nppiMeanGetBufferHostSize_32f_C3R, "nppiMeanGetBufferHostSize_32f_C3R");

  --* 
  -- * Buffer size for \ref nppiMean_8u_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMeanGetBufferHostSize_8u_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3627
   pragma Import (C, nppiMeanGetBufferHostSize_8u_AC4R, "nppiMeanGetBufferHostSize_8u_AC4R");

  --* 
  -- * Buffer size for \ref nppiMean_16u_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMeanGetBufferHostSize_16u_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3637
   pragma Import (C, nppiMeanGetBufferHostSize_16u_AC4R, "nppiMeanGetBufferHostSize_16u_AC4R");

  --* 
  -- * Buffer size for \ref nppiMean_16s_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMeanGetBufferHostSize_16s_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3647
   pragma Import (C, nppiMeanGetBufferHostSize_16s_AC4R, "nppiMeanGetBufferHostSize_16s_AC4R");

  --* 
  -- * Buffer size for \ref nppiMean_32f_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMeanGetBufferHostSize_32f_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3657
   pragma Import (C, nppiMeanGetBufferHostSize_32f_AC4R, "nppiMeanGetBufferHostSize_32f_AC4R");

  --* 
  -- * Buffer size for \ref nppiMean_8u_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMeanGetBufferHostSize_8u_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3667
   pragma Import (C, nppiMeanGetBufferHostSize_8u_C4R, "nppiMeanGetBufferHostSize_8u_C4R");

  --* 
  -- * Buffer size for \ref nppiMean_16u_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMeanGetBufferHostSize_16u_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3677
   pragma Import (C, nppiMeanGetBufferHostSize_16u_C4R, "nppiMeanGetBufferHostSize_16u_C4R");

  --* 
  -- * Buffer size for \ref nppiMean_16s_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMeanGetBufferHostSize_16s_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3687
   pragma Import (C, nppiMeanGetBufferHostSize_16s_C4R, "nppiMeanGetBufferHostSize_16s_C4R");

  --* 
  -- * Buffer size for \ref nppiMean_32f_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMeanGetBufferHostSize_32f_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3697
   pragma Import (C, nppiMeanGetBufferHostSize_32f_C4R, "nppiMeanGetBufferHostSize_32f_C4R");

  --* 
  -- * Buffer size for \ref nppiMean_8u_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMeanGetBufferHostSize_8u_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3707
   pragma Import (C, nppiMeanGetBufferHostSize_8u_C1MR, "nppiMeanGetBufferHostSize_8u_C1MR");

  --* 
  -- * Buffer size for \ref nppiMean_8s_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMeanGetBufferHostSize_8s_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3717
   pragma Import (C, nppiMeanGetBufferHostSize_8s_C1MR, "nppiMeanGetBufferHostSize_8s_C1MR");

  --* 
  -- * Buffer size for \ref nppiMean_16u_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMeanGetBufferHostSize_16u_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3727
   pragma Import (C, nppiMeanGetBufferHostSize_16u_C1MR, "nppiMeanGetBufferHostSize_16u_C1MR");

  --* 
  -- * Buffer size for \ref nppiMean_32f_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMeanGetBufferHostSize_32f_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3737
   pragma Import (C, nppiMeanGetBufferHostSize_32f_C1MR, "nppiMeanGetBufferHostSize_32f_C1MR");

  --* 
  -- * Buffer size for \ref nppiMean_8u_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMeanGetBufferHostSize_8u_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3747
   pragma Import (C, nppiMeanGetBufferHostSize_8u_C3CMR, "nppiMeanGetBufferHostSize_8u_C3CMR");

  --* 
  -- * Buffer size for \ref nppiMean_8s_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMeanGetBufferHostSize_8s_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3757
   pragma Import (C, nppiMeanGetBufferHostSize_8s_C3CMR, "nppiMeanGetBufferHostSize_8s_C3CMR");

  --* 
  -- * Buffer size for \ref nppiMean_16u_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMeanGetBufferHostSize_16u_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3767
   pragma Import (C, nppiMeanGetBufferHostSize_16u_C3CMR, "nppiMeanGetBufferHostSize_16u_C3CMR");

  --* 
  -- * Buffer size for \ref nppiMean_32f_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMeanGetBufferHostSize_32f_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3777
   pragma Import (C, nppiMeanGetBufferHostSize_32f_C3CMR, "nppiMeanGetBufferHostSize_32f_C3CMR");

  --* @}  
  --* @} image_mean  
  --* @defgroup image_mean_stddev Mean_StdDev
  -- * Primitives for computing both the arithmetic mean and the standard deviation of an image.
  -- * @{
  --  

  --* @name Mean_StdDev
  -- * Given an image \f$pSrc\f$ with width \f$W\f$ and height \f$H\f$, the mean and the standard deviation
  -- * will be computed as
  -- * \f[Mean = \frac{1}{W\cdot H}\sum_{j=0}^{H-1}\sum_{i=0}^{W-1}pSrc(j,i)\f]
  -- * \f[StdDev = \sqrt{\frac{1}{W\cdot H}\sum_{j=0}^{H-1}\sum_{i=0}^{W-1}(pSrc(j,i)-Mean)^2}\f]
  -- * The Mean_StdDev primitives require additional scratch buffer for computations.
  -- * @{
  --  

  --*
  -- * One-channel 8-bit unsigned image Mean_StdDev.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMeanStdDevGetBufferHostSize_8u_C1R to determine the minium number of bytes required.
  -- * \param pMean Pointer to the computed mean.
  -- * \param pStdDev Pointer to the computed standard deviation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMean_StdDev_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pMean : access nppdefs_h.Npp64f;
      pStdDev : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3807
   pragma Import (C, nppiMean_StdDev_8u_C1R, "nppiMean_StdDev_8u_C1R");

  --*
  -- * One-channel 8-bit signed image Mean_StdDev.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMeanStdDevGetBufferHostSize_8s_C1R to determine the minium number of bytes required.
  -- * \param pMean Pointer to the computed mean.
  -- * \param pStdDev Pointer to the computed standard deviation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMean_StdDev_8s_C1R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pMean : access nppdefs_h.Npp64f;
      pStdDev : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3821
   pragma Import (C, nppiMean_StdDev_8s_C1R, "nppiMean_StdDev_8s_C1R");

  --*
  -- * One-channel 16-bit unsigned image Mean_StdDev.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMeanStdDevGetBufferHostSize_16u_C1R to determine the minium number of bytes required.
  -- * \param pMean Pointer to the computed mean.
  -- * \param pStdDev Pointer to the computed standard deviation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMean_StdDev_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pMean : access nppdefs_h.Npp64f;
      pStdDev : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3835
   pragma Import (C, nppiMean_StdDev_16u_C1R, "nppiMean_StdDev_16u_C1R");

  --*
  -- * One-channel 32-bit floating point image Mean_StdDev.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMeanStdDevGetBufferHostSize_32f_C1R to determine the minium number of bytes required.
  -- * \param pMean Pointer to the computed mean.
  -- * \param pStdDev Pointer to the computed standard deviation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid 
  -- * floating-point image is specified.
  --  

   function nppiMean_StdDev_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pMean : access nppdefs_h.Npp64f;
      pStdDev : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3850
   pragma Import (C, nppiMean_StdDev_32f_C1R, "nppiMean_StdDev_32f_C1R");

  --* @}  
  --* @name Masked Mean_StdDev
  -- * See \ref masked_operation.
  -- * @{
  --  

  --*
  -- * Masked one-channel 8-bit unsigned image Mean_StdDev.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMeanStdDevGetBufferHostSize_8u_C1MR to determine the minium number of bytes required.
  -- * \param pMean Pointer to the computed mean.
  -- * \param pStdDev Pointer to the computed standard deviation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMean_StdDev_8u_C1MR
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pMean : access nppdefs_h.Npp64f;
      pStdDev : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3872
   pragma Import (C, nppiMean_StdDev_8u_C1MR, "nppiMean_StdDev_8u_C1MR");

  --*
  -- * Masked one-channel 8-bit signed image Mean_StdDev.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMeanStdDevGetBufferHostSize_8s_C1MR to determine the minium number of bytes required.
  -- * \param pMean Pointer to the computed mean.
  -- * \param pStdDev Pointer to the computed standard deviation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMean_StdDev_8s_C1MR
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pMean : access nppdefs_h.Npp64f;
      pStdDev : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3888
   pragma Import (C, nppiMean_StdDev_8s_C1MR, "nppiMean_StdDev_8s_C1MR");

  --*
  -- * Masked one-channel 16-bit unsigned image Mean_StdDev.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMeanStdDevGetBufferHostSize_16u_C1MR to determine the minium number of bytes required.
  -- * \param pMean Pointer to the computed mean.
  -- * \param pStdDev Pointer to the computed standard deviation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiMean_StdDev_16u_C1MR
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pMean : access nppdefs_h.Npp64f;
      pStdDev : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3904
   pragma Import (C, nppiMean_StdDev_16u_C1MR, "nppiMean_StdDev_16u_C1MR");

  --*
  -- * Masked one-channel 32-bit floating point image Mean_StdDev.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMeanStdDevGetBufferHostSize_32f_C1MR to determine the minium number of bytes required.
  -- * \param pMean Pointer to the computed mean.
  -- * \param pStdDev Pointer to the computed standard deviation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid 
  -- * floating-point image is specified.
  --  

   function nppiMean_StdDev_32f_C1MR
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pMean : access nppdefs_h.Npp64f;
      pStdDev : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3921
   pragma Import (C, nppiMean_StdDev_32f_C1MR, "nppiMean_StdDev_32f_C1MR");

  --* @}  
  --* @name Channel Mean_StdDev
  -- * See \ref channel_of_interest.
  -- * @{
  --  

  --*
  -- * Three-channel 8-bit unsigned image Mean_StdDev affecting only single channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMeanStdDevGetBufferHostSize_8u_C3CR to determine the minium number of bytes required.
  -- * \param pMean Pointer to the computed mean.
  -- * \param pStdDev Pointer to the computed standard deviation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.
  --  

   function nppiMean_StdDev_8u_C3CR
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pMean : access nppdefs_h.Npp64f;
      pStdDev : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3942
   pragma Import (C, nppiMean_StdDev_8u_C3CR, "nppiMean_StdDev_8u_C3CR");

  --*
  -- * Three-channel 8-bit signed image Mean_StdDev affecting only single channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMeanStdDevGetBufferHostSize_8s_C3CR to determine the minium number of bytes required.
  -- * \param pMean Pointer to the computed mean.
  -- * \param pStdDev Pointer to the computed standard deviation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.
  --  

   function nppiMean_StdDev_8s_C3CR
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pMean : access nppdefs_h.Npp64f;
      pStdDev : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3957
   pragma Import (C, nppiMean_StdDev_8s_C3CR, "nppiMean_StdDev_8s_C3CR");

  --*
  -- * Three-channel 16-bit unsigned image Mean_StdDev affecting only single channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMeanStdDevGetBufferHostSize_16u_C3CR to determine the minium number of bytes required.
  -- * \param pMean Pointer to the computed mean.
  -- * \param pStdDev Pointer to the computed standard deviation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.
  --  

   function nppiMean_StdDev_16u_C3CR
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pMean : access nppdefs_h.Npp64f;
      pStdDev : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3972
   pragma Import (C, nppiMean_StdDev_16u_C3CR, "nppiMean_StdDev_16u_C3CR");

  --*
  -- * Three-channel 32-bit floating point image Mean_StdDev affecting only single channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMeanStdDevGetBufferHostSize_32f_C3CR to determine the minium number of bytes required.
  -- * \param pMean Pointer to the computed mean.
  -- * \param pStdDev Pointer to the computed standard deviation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if an invalid 
  -- * floating-point image is specified, or NPP_COI_ERROR if an invalid channel of interest is specified.
  --  

   function nppiMean_StdDev_32f_C3CR
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pMean : access nppdefs_h.Npp64f;
      pStdDev : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:3988
   pragma Import (C, nppiMean_StdDev_32f_C3CR, "nppiMean_StdDev_32f_C3CR");

  --* @}  
  --* @name Masked Channel Mean_StdDev
  -- * See \ref masked_operation and \ref channel_of_interest.
  -- * @{
  --  

  --*
  -- * Masked three-channel 8-bit unsigned image Mean_StdDev.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMeanStdDevGetBufferHostSize_8u_C3CMR to determine the minium number of bytes required.
  -- * \param pMean Pointer to the computed mean.
  -- * \param pStdDev Pointer to the computed standard deviation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.
  --  

   function nppiMean_StdDev_8u_C3CMR
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pMean : access nppdefs_h.Npp64f;
      pStdDev : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4011
   pragma Import (C, nppiMean_StdDev_8u_C3CMR, "nppiMean_StdDev_8u_C3CMR");

  --*
  -- * Masked three-channel 8-bit signed image Mean_StdDev.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMeanStdDevGetBufferHostSize_8s_C3CMR to determine the minium number of bytes required.
  -- * \param pMean Pointer to the computed mean.
  -- * \param pStdDev Pointer to the computed standard deviation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.
  --  

   function nppiMean_StdDev_8s_C3CMR
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pMean : access nppdefs_h.Npp64f;
      pStdDev : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4028
   pragma Import (C, nppiMean_StdDev_8s_C3CMR, "nppiMean_StdDev_8s_C3CMR");

  --*
  -- * Masked three-channel 16-bit unsigned image Mean_StdDev.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMeanStdDevGetBufferHostSize_16u_C3CMR to determine the minium number of bytes required.
  -- * \param pMean Pointer to the computed mean.
  -- * \param pStdDev Pointer to the computed standard deviation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.
  --  

   function nppiMean_StdDev_16u_C3CMR
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pMean : access nppdefs_h.Npp64f;
      pStdDev : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4045
   pragma Import (C, nppiMean_StdDev_16u_C3CMR, "nppiMean_StdDev_16u_C3CMR");

  --*
  -- * Masked three-channel 32-bit floating point image Mean_StdDev.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer
  -- *        Use \ref nppiMeanStdDevGetBufferHostSize_32f_C3CMR to determine the minium number of bytes required.
  -- * \param pMean Pointer to the computed mean.
  -- * \param pStdDev Pointer to the computed standard deviation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if an invalid 
  -- * floating-point image is specified, or NPP_COI_ERROR if an invalid channel of interest is specified.
  --  

   function nppiMean_StdDev_32f_C3CMR
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pDeviceBuffer : access nppdefs_h.Npp8u;
      pMean : access nppdefs_h.Npp64f;
      pStdDev : access nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4063
   pragma Import (C, nppiMean_StdDev_32f_C3CMR, "nppiMean_StdDev_32f_C3CMR");

  --* @}  
  --* @name MeanStdDevGetBufferHostSize
  -- * Companion primitives for computing the device buffer size (in bytes) required by the Mean_StdDev primitives.
  -- * @{
  --  

  --* 
  -- * Buffer size for \ref nppiMean_StdDev_8u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMeanStdDevGetBufferHostSize_8u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4078
   pragma Import (C, nppiMeanStdDevGetBufferHostSize_8u_C1R, "nppiMeanStdDevGetBufferHostSize_8u_C1R");

  --* 
  -- * Buffer size for \ref nppiMean_StdDev_8s_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMeanStdDevGetBufferHostSize_8s_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4088
   pragma Import (C, nppiMeanStdDevGetBufferHostSize_8s_C1R, "nppiMeanStdDevGetBufferHostSize_8s_C1R");

  --* 
  -- * Buffer size for \ref nppiMean_StdDev_16u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMeanStdDevGetBufferHostSize_16u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4098
   pragma Import (C, nppiMeanStdDevGetBufferHostSize_16u_C1R, "nppiMeanStdDevGetBufferHostSize_16u_C1R");

  --* 
  -- * Buffer size for \ref nppiMean_StdDev_32f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMeanStdDevGetBufferHostSize_32f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4108
   pragma Import (C, nppiMeanStdDevGetBufferHostSize_32f_C1R, "nppiMeanStdDevGetBufferHostSize_32f_C1R");

  --* 
  -- * Buffer size for \ref nppiMean_StdDev_8u_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMeanStdDevGetBufferHostSize_8u_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4118
   pragma Import (C, nppiMeanStdDevGetBufferHostSize_8u_C1MR, "nppiMeanStdDevGetBufferHostSize_8u_C1MR");

  --* 
  -- * Buffer size for \ref nppiMean_StdDev_8s_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMeanStdDevGetBufferHostSize_8s_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4128
   pragma Import (C, nppiMeanStdDevGetBufferHostSize_8s_C1MR, "nppiMeanStdDevGetBufferHostSize_8s_C1MR");

  --* 
  -- * Buffer size for \ref nppiMean_StdDev_16u_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMeanStdDevGetBufferHostSize_16u_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4138
   pragma Import (C, nppiMeanStdDevGetBufferHostSize_16u_C1MR, "nppiMeanStdDevGetBufferHostSize_16u_C1MR");

  --* 
  -- * Buffer size for \ref nppiMean_StdDev_32f_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMeanStdDevGetBufferHostSize_32f_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4148
   pragma Import (C, nppiMeanStdDevGetBufferHostSize_32f_C1MR, "nppiMeanStdDevGetBufferHostSize_32f_C1MR");

  --* 
  -- * Buffer size for \ref nppiMean_StdDev_8u_C3CR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMeanStdDevGetBufferHostSize_8u_C3CR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4158
   pragma Import (C, nppiMeanStdDevGetBufferHostSize_8u_C3CR, "nppiMeanStdDevGetBufferHostSize_8u_C3CR");

  --* 
  -- * Buffer size for \ref nppiMean_StdDev_8s_C3CR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMeanStdDevGetBufferHostSize_8s_C3CR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4168
   pragma Import (C, nppiMeanStdDevGetBufferHostSize_8s_C3CR, "nppiMeanStdDevGetBufferHostSize_8s_C3CR");

  --* 
  -- * Buffer size for \ref nppiMean_StdDev_16u_C3CR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMeanStdDevGetBufferHostSize_16u_C3CR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4178
   pragma Import (C, nppiMeanStdDevGetBufferHostSize_16u_C3CR, "nppiMeanStdDevGetBufferHostSize_16u_C3CR");

  --* 
  -- * Buffer size for \ref nppiMean_StdDev_32f_C3CR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMeanStdDevGetBufferHostSize_32f_C3CR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4188
   pragma Import (C, nppiMeanStdDevGetBufferHostSize_32f_C3CR, "nppiMeanStdDevGetBufferHostSize_32f_C3CR");

  --* 
  -- * Buffer size for \ref nppiMean_StdDev_8u_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMeanStdDevGetBufferHostSize_8u_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4198
   pragma Import (C, nppiMeanStdDevGetBufferHostSize_8u_C3CMR, "nppiMeanStdDevGetBufferHostSize_8u_C3CMR");

  --* 
  -- * Buffer size for \ref nppiMean_StdDev_8s_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMeanStdDevGetBufferHostSize_8s_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4208
   pragma Import (C, nppiMeanStdDevGetBufferHostSize_8s_C3CMR, "nppiMeanStdDevGetBufferHostSize_8s_C3CMR");

  --* 
  -- * Buffer size for \ref nppiMean_StdDev_16u_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMeanStdDevGetBufferHostSize_16u_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4218
   pragma Import (C, nppiMeanStdDevGetBufferHostSize_16u_C3CMR, "nppiMeanStdDevGetBufferHostSize_16u_C3CMR");

  --* 
  -- * Buffer size for \ref nppiMean_StdDev_32f_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMeanStdDevGetBufferHostSize_32f_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4228
   pragma Import (C, nppiMeanStdDevGetBufferHostSize_32f_C3CMR, "nppiMeanStdDevGetBufferHostSize_32f_C3CMR");

  --* @}  
  --* @} image_mean_stddev  
  --* @defgroup image_norm Image Norms
  -- *
  -- * Primitives for computing the norms of an image, the norms of difference, and the relative errors of two images.
  -- * Given an image \f$pSrc\f$ with width \f$W\f$ and height \f$H\f$, 
  -- * -# The infinity norm (Norm_Inf) is defined as the largest absolute pixel value of the image.
  -- * -# The L1 norm (Norm_L1) is defined as the sum of the absolute pixel value of the image, i.e., \f[Norm\_L1 = \sum_{j=0}^{H-1}\sum_{i=0}^{W-1}\left| pSrc(j,i)\right|\f].
  -- * -# The L2 norm (Norm_L2) is defined as the square root of the sum of the squared absolute pixel value of the image, i.e.,\f[Norm\_L2 = \sqrt{\sum_{j=0}^{H-1}\sum_{i=0}^{W-1}\left| pSrc(j,i)\right| ^2}\f].
  -- * 
  -- * Given two images \f$pSrc1\f$ and \f$pSrc2\f$ both with width \f$W\f$ and height \f$H\f$, 
  -- * -# The infinity norm of differece (NormDiff_Inf) is defined as the largest absolute difference between pixels of two images.
  -- * -# The L1 norm of differece (NormDiff_L1) is defined as the sum of the absolute difference between pixels of two images, i.e., \f[NormDiff\_L1 = \sum_{j=0}^{H-1}\sum_{i=0}^{W-1}\left| pSrc1(j,i)-pSrc2(j,i)\right|\f].
  -- * -# The L2 norm of differece (NormDiff_L2) is defined as the squared root of the sum of the squared absolute difference between pixels of two images, i.e.,\f[NormDiff\_L2 = \sqrt{\sum_{j=0}^{H-1}\sum_{i=0}^{W-1}\left| pSrc1(j,i)-pSrc2(j,i)\right| ^2}\f].
  -- * 
  -- * Given two images \f$pSrc1\f$ and \f$pSrc2\f$ both with width \f$W\f$ and height \f$H\f$, 
  -- * -# The relative error for the infinity norm of differece (NormRel_Inf) is defined as NormDiff_Inf divided by the infinity norm of the second image, i.e., \f[NormRel\_Inf = \frac{NormDiff\_Inf}{Norm\_Inf_{src2}}\f]
  -- * -# The relative error for the L1 norm of differece (NormRel_L1) is defined as NormDiff_L1 divided by the L1 norm of the second image, i.e., \f[NormRel\_L1 = \frac{NormDiff\_L1}{Norm\_L1_{src2}}\f]
  -- * -# The relative error for the L2 norm of differece (NormRel_L2) is defined as NormDiff_L2 divided by the L2 norm of the second image, i.e., \f[NormRel\_L2 = \frac{NormDiff\_L2}{Norm\_L2_{src2}}\f]
  -- * 
  -- * The norm functions require the addition device scratch buffer for the computations.
  -- * 
  -- * @{
  -- *
  --  

  --* @defgroup image_inf_norm Norm_Inf
  -- * Primitives for computing the infinity norm of an image. 
  -- * @{
  --  

  --* @name Basic Norm_Inf
  -- * @{
  --  

  --*
  -- * One-channel 8-bit unsigned image Norm_Inf.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNorm Pointer to the norm value.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormInfGetBufferHostSize_8u_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_Inf_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4276
   pragma Import (C, nppiNorm_Inf_8u_C1R, "nppiNorm_Inf_8u_C1R");

  --*
  -- * One-channel 16-bit unsigned image Norm_Inf.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNorm Pointer to the norm value.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormInfGetBufferHostSize_16u_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_Inf_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4289
   pragma Import (C, nppiNorm_Inf_16u_C1R, "nppiNorm_Inf_16u_C1R");

  --*
  -- * One-channel 16-bit signed image Norm_Inf.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNorm Pointer to the norm value.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormInfGetBufferHostSize_16s_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_Inf_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4302
   pragma Import (C, nppiNorm_Inf_16s_C1R, "nppiNorm_Inf_16s_C1R");

  --*
  -- * One-channel 32-bit signed image Norm_Inf.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNorm Pointer to the norm value.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormInfGetBufferHostSize_32s_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_Inf_32s_C1R
     (pSrc : access nppdefs_h.Npp32s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4315
   pragma Import (C, nppiNorm_Inf_32s_C1R, "nppiNorm_Inf_32s_C1R");

  --*
  -- * One-channel 32-bit floating point image Norm_Inf.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNorm Pointer to the norm value.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormInfGetBufferHostSize_32f_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_Inf_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4328
   pragma Import (C, nppiNorm_Inf_32f_C1R, "nppiNorm_Inf_32f_C1R");

  --*
  -- * Three-channel 8-bit unsigned image Norm_Inf.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNorm Array that contains the norm values of Three-channels.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormInfGetBufferHostSize_8u_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_Inf_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4341
   pragma Import (C, nppiNorm_Inf_8u_C3R, "nppiNorm_Inf_8u_C3R");

  --*
  -- * Three-channel 16-bit unsigned image Norm_Inf.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNorm Array that contains the norm values of Three-channels.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormInfGetBufferHostSize_16u_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_Inf_16u_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4354
   pragma Import (C, nppiNorm_Inf_16u_C3R, "nppiNorm_Inf_16u_C3R");

  --*
  -- * Three-channel 16-bit signed image Norm_Inf.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNorm Array that contains the norm values of Three-channels.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormInfGetBufferHostSize_16s_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_Inf_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4367
   pragma Import (C, nppiNorm_Inf_16s_C3R, "nppiNorm_Inf_16s_C3R");

  --*
  -- * Three-channel 32-bit floating point image Norm_Inf.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNorm Array that contains the norm values of Three-channels.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormInfGetBufferHostSize_32f_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_Inf_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4380
   pragma Import (C, nppiNorm_Inf_32f_C3R, "nppiNorm_Inf_32f_C3R");

  --*
  -- * Four-channel 8-bit unsigned image Norm_Inf ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNorm Array that contains the norm values of Three-channels.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormInfGetBufferHostSize_8u_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_Inf_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4393
   pragma Import (C, nppiNorm_Inf_8u_AC4R, "nppiNorm_Inf_8u_AC4R");

  --*
  -- * Four-channel 16-bit unsigned image Norm_Inf ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNorm Array that contains the norm values of Three-channels.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormInfGetBufferHostSize_16u_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_Inf_16u_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4406
   pragma Import (C, nppiNorm_Inf_16u_AC4R, "nppiNorm_Inf_16u_AC4R");

  --*
  -- * Four-channel 16-bit signed image Norm_Inf ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNorm Array that contains the norm values of Three-channels.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormInfGetBufferHostSize_16s_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_Inf_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4419
   pragma Import (C, nppiNorm_Inf_16s_AC4R, "nppiNorm_Inf_16s_AC4R");

  --*
  -- * Four-channel 32-bit floating point image Norm_Inf ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNorm Array that contains the norm values of Three-channels.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormInfGetBufferHostSize_32f_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_Inf_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4432
   pragma Import (C, nppiNorm_Inf_32f_AC4R, "nppiNorm_Inf_32f_AC4R");

  --*
  -- * Four-channel 8-bit unsigned image Norm_Inf.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNorm Array that contains the norm values of Four-channels.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormInfGetBufferHostSize_8u_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_Inf_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4445
   pragma Import (C, nppiNorm_Inf_8u_C4R, "nppiNorm_Inf_8u_C4R");

  --*
  -- * Four-channel 16-bit unsigned image Norm_Inf.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNorm Array that contains the norm values of Four-channels.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormInfGetBufferHostSize_16u_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_Inf_16u_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4458
   pragma Import (C, nppiNorm_Inf_16u_C4R, "nppiNorm_Inf_16u_C4R");

  --*
  -- * Four-channel 16-bit signed image Norm_Inf.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNorm Array that contains the norm values of Four-channels.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormInfGetBufferHostSize_16s_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_Inf_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4471
   pragma Import (C, nppiNorm_Inf_16s_C4R, "nppiNorm_Inf_16s_C4R");

  --*
  -- * Four-channel 32-bit floating point image Norm_Inf.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNorm Array that contains the norm values of Four-channels.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormInfGetBufferHostSize_32f_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_Inf_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4484
   pragma Import (C, nppiNorm_Inf_32f_C4R, "nppiNorm_Inf_32f_C4R");

  --* @}  
  --* @name Masked Norm_Inf
  -- * See \ref masked_operation.
  -- * @{
  --  

  --*
  -- * Masked one-channel 8-bit unsigned image Norm_Inf.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNorm Pointer to the norm value.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormInfGetBufferHostSize_8u_C1MR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_Inf_8u_C1MR
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4505
   pragma Import (C, nppiNorm_Inf_8u_C1MR, "nppiNorm_Inf_8u_C1MR");

  --*
  -- * Masked one-channel 8-bit signed image Norm_Inf.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNorm Pointer to the norm value.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormInfGetBufferHostSize_8s_C1MR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_Inf_8s_C1MR
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4520
   pragma Import (C, nppiNorm_Inf_8s_C1MR, "nppiNorm_Inf_8s_C1MR");

  --*
  -- * Masked one-channel 16-bit unsigned image Norm_Inf.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNorm Pointer to the norm value.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormInfGetBufferHostSize_16u_C1MR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_Inf_16u_C1MR
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4535
   pragma Import (C, nppiNorm_Inf_16u_C1MR, "nppiNorm_Inf_16u_C1MR");

  --*
  -- * Masked one-channel 32-bit floating point image Norm_Inf.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNorm Pointer to the norm value.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormInfGetBufferHostSize_32f_C1MR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_Inf_32f_C1MR
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4550
   pragma Import (C, nppiNorm_Inf_32f_C1MR, "nppiNorm_Inf_32f_C1MR");

  --* @}  
  --* @name Masked Channel Norm_Inf
  -- * See \ref channel_of_interest and \ref masked_operation.
  -- * @{
  --  

  --*
  -- * Masked three-channel 8-bit unsigned image Norm_Inf affecting only single channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pNorm Pointer to the norm value.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormInfGetBufferHostSize_8u_C3CMR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.
  --  

   function nppiNorm_Inf_8u_C3CMR
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4572
   pragma Import (C, nppiNorm_Inf_8u_C3CMR, "nppiNorm_Inf_8u_C3CMR");

  --*
  -- * Masked three-channel 8-bit signed image Norm_Inf affecting only single channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pNorm Pointer to the norm value.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormInfGetBufferHostSize_8s_C3CMR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.
  --  

   function nppiNorm_Inf_8s_C3CMR
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4588
   pragma Import (C, nppiNorm_Inf_8s_C3CMR, "nppiNorm_Inf_8s_C3CMR");

  --*
  -- * Masked three-channel 16-bit unsigned image Norm_Inf affecting only single channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pNorm Pointer to the norm value.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormInfGetBufferHostSize_16u_C3CMR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.
  --  

   function nppiNorm_Inf_16u_C3CMR
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4604
   pragma Import (C, nppiNorm_Inf_16u_C3CMR, "nppiNorm_Inf_16u_C3CMR");

  --*
  -- * Masked three-channel 32-bit floating point image Norm_Inf affecting only single channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pNorm Pointer to the norm value.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormInfGetBufferHostSize_32f_C3CMR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if an invalid 
  -- * floating-point image is specified, or NPP_COI_ERROR if an invalid channel of interest is specified.
  --  

   function nppiNorm_Inf_32f_C3CMR
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4621
   pragma Import (C, nppiNorm_Inf_32f_C3CMR, "nppiNorm_Inf_32f_C3CMR");

  --* @}  
  --* @name NormInfGetBufferHostSize
  -- * Companion primitives for computing the device buffer size (in bytes) required by the Norm_Inf primitives.
  -- * @{
  --  

  --* Buffer size for \ref nppiNorm_Inf_8u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormInfGetBufferHostSize_8u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4636
   pragma Import (C, nppiNormInfGetBufferHostSize_8u_C1R, "nppiNormInfGetBufferHostSize_8u_C1R");

  --* 
  -- * Buffer size for \ref nppiNorm_Inf_16u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormInfGetBufferHostSize_16u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4646
   pragma Import (C, nppiNormInfGetBufferHostSize_16u_C1R, "nppiNormInfGetBufferHostSize_16u_C1R");

  --* 
  -- * Buffer size for \ref nppiNorm_Inf_16s_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormInfGetBufferHostSize_16s_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4656
   pragma Import (C, nppiNormInfGetBufferHostSize_16s_C1R, "nppiNormInfGetBufferHostSize_16s_C1R");

  --* 
  -- * Buffer size for \ref nppiNorm_Inf_32s_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormInfGetBufferHostSize_32s_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4666
   pragma Import (C, nppiNormInfGetBufferHostSize_32s_C1R, "nppiNormInfGetBufferHostSize_32s_C1R");

  --* 
  -- * Buffer size for \ref nppiNorm_Inf_32f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormInfGetBufferHostSize_32f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4676
   pragma Import (C, nppiNormInfGetBufferHostSize_32f_C1R, "nppiNormInfGetBufferHostSize_32f_C1R");

  --* 
  -- * Buffer size for \ref nppiNorm_Inf_8u_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormInfGetBufferHostSize_8u_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4686
   pragma Import (C, nppiNormInfGetBufferHostSize_8u_C1MR, "nppiNormInfGetBufferHostSize_8u_C1MR");

  --* 
  -- * Buffer size for \ref nppiNorm_Inf_8s_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormInfGetBufferHostSize_8s_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4696
   pragma Import (C, nppiNormInfGetBufferHostSize_8s_C1MR, "nppiNormInfGetBufferHostSize_8s_C1MR");

  --* 
  -- * Buffer size for \ref nppiNorm_Inf_16u_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormInfGetBufferHostSize_16u_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4706
   pragma Import (C, nppiNormInfGetBufferHostSize_16u_C1MR, "nppiNormInfGetBufferHostSize_16u_C1MR");

  --* 
  -- * Buffer size for \ref nppiNorm_Inf_32f_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormInfGetBufferHostSize_32f_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4716
   pragma Import (C, nppiNormInfGetBufferHostSize_32f_C1MR, "nppiNormInfGetBufferHostSize_32f_C1MR");

  --* 
  -- * Buffer size for \ref nppiNorm_Inf_8u_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormInfGetBufferHostSize_8u_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4726
   pragma Import (C, nppiNormInfGetBufferHostSize_8u_C3R, "nppiNormInfGetBufferHostSize_8u_C3R");

  --* 
  -- * Buffer size for \ref nppiNorm_Inf_16u_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormInfGetBufferHostSize_16u_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4736
   pragma Import (C, nppiNormInfGetBufferHostSize_16u_C3R, "nppiNormInfGetBufferHostSize_16u_C3R");

  --* 
  -- * Buffer size for \ref nppiNorm_Inf_16s_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormInfGetBufferHostSize_16s_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4746
   pragma Import (C, nppiNormInfGetBufferHostSize_16s_C3R, "nppiNormInfGetBufferHostSize_16s_C3R");

  --* 
  -- * Buffer size for \ref nppiNorm_Inf_32f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormInfGetBufferHostSize_32f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4756
   pragma Import (C, nppiNormInfGetBufferHostSize_32f_C3R, "nppiNormInfGetBufferHostSize_32f_C3R");

  --* 
  -- * Buffer size for \ref nppiNorm_Inf_8u_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormInfGetBufferHostSize_8u_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4766
   pragma Import (C, nppiNormInfGetBufferHostSize_8u_AC4R, "nppiNormInfGetBufferHostSize_8u_AC4R");

  --* 
  -- * Buffer size for \ref nppiNorm_Inf_16u_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormInfGetBufferHostSize_16u_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4776
   pragma Import (C, nppiNormInfGetBufferHostSize_16u_AC4R, "nppiNormInfGetBufferHostSize_16u_AC4R");

  --* 
  -- * Buffer size for \ref nppiNorm_Inf_16s_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormInfGetBufferHostSize_16s_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4786
   pragma Import (C, nppiNormInfGetBufferHostSize_16s_AC4R, "nppiNormInfGetBufferHostSize_16s_AC4R");

  --* 
  -- * Buffer size for \ref nppiNorm_Inf_32f_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormInfGetBufferHostSize_32f_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4796
   pragma Import (C, nppiNormInfGetBufferHostSize_32f_AC4R, "nppiNormInfGetBufferHostSize_32f_AC4R");

  --* 
  -- * Buffer size for \ref nppiNorm_Inf_8u_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormInfGetBufferHostSize_8u_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4806
   pragma Import (C, nppiNormInfGetBufferHostSize_8u_C4R, "nppiNormInfGetBufferHostSize_8u_C4R");

  --* 
  -- * Buffer size for \ref nppiNorm_Inf_16u_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormInfGetBufferHostSize_16u_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4816
   pragma Import (C, nppiNormInfGetBufferHostSize_16u_C4R, "nppiNormInfGetBufferHostSize_16u_C4R");

  --* 
  -- * Buffer size for \ref nppiNorm_Inf_16s_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormInfGetBufferHostSize_16s_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4826
   pragma Import (C, nppiNormInfGetBufferHostSize_16s_C4R, "nppiNormInfGetBufferHostSize_16s_C4R");

  --* 
  -- * Buffer size for \ref nppiNorm_Inf_32f_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormInfGetBufferHostSize_32f_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4836
   pragma Import (C, nppiNormInfGetBufferHostSize_32f_C4R, "nppiNormInfGetBufferHostSize_32f_C4R");

  --* 
  -- * Buffer size for \ref nppiNorm_Inf_8u_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormInfGetBufferHostSize_8u_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4846
   pragma Import (C, nppiNormInfGetBufferHostSize_8u_C3CMR, "nppiNormInfGetBufferHostSize_8u_C3CMR");

  --* 
  -- * Buffer size for \ref nppiNorm_Inf_8s_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormInfGetBufferHostSize_8s_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4856
   pragma Import (C, nppiNormInfGetBufferHostSize_8s_C3CMR, "nppiNormInfGetBufferHostSize_8s_C3CMR");

  --* 
  -- * Buffer size for \ref nppiNorm_Inf_16u_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormInfGetBufferHostSize_16u_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4866
   pragma Import (C, nppiNormInfGetBufferHostSize_16u_C3CMR, "nppiNormInfGetBufferHostSize_16u_C3CMR");

  --* 
  -- * Buffer size for \ref nppiNorm_Inf_32f_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormInfGetBufferHostSize_32f_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4876
   pragma Import (C, nppiNormInfGetBufferHostSize_32f_C3CMR, "nppiNormInfGetBufferHostSize_32f_C3CMR");

  --* @}  
  --* @} image_inf_norm  
  --* @defgroup image_L1_norm Norm_L1
  -- * Primitives for computing the L1 norm of an image. 
  -- * @{
  --  

  --* @name Basic Norm_L1
  -- * @{
  --  

  --*
  -- * One-channel 8-bit unsigned image Norm_L1.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNorm Pointer to the norm value.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormL1GetBufferHostSize_8u_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_L1_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4899
   pragma Import (C, nppiNorm_L1_8u_C1R, "nppiNorm_L1_8u_C1R");

  --*
  -- * One-channel 16-bit unsigned image Norm_L1.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNorm Pointer to the norm value.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormL1GetBufferHostSize_16u_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_L1_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4912
   pragma Import (C, nppiNorm_L1_16u_C1R, "nppiNorm_L1_16u_C1R");

  --*
  -- * One-channel 16-bit signed image Norm_L1.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNorm Pointer to the norm value.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormL1GetBufferHostSize_16s_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_L1_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4925
   pragma Import (C, nppiNorm_L1_16s_C1R, "nppiNorm_L1_16s_C1R");

  --*
  -- * One-channel 32-bit floating point image Norm_L1.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNorm Pointer to the norm value.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormL1GetBufferHostSize_32f_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_L1_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4938
   pragma Import (C, nppiNorm_L1_32f_C1R, "nppiNorm_L1_32f_C1R");

  --*
  -- * Three-channel 8-bit unsigned image Norm_L1.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNorm Array that contains the norm values of Three-channels.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormL1GetBufferHostSize_8u_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_L1_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4951
   pragma Import (C, nppiNorm_L1_8u_C3R, "nppiNorm_L1_8u_C3R");

  --*
  -- * Three-channel 16-bit unsigned image Norm_L1.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNorm Array that contains the norm values of Three-channels.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormL1GetBufferHostSize_16u_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_L1_16u_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4964
   pragma Import (C, nppiNorm_L1_16u_C3R, "nppiNorm_L1_16u_C3R");

  --*
  -- * Three-channel 16-bit signed image Norm_L1.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNorm Array that contains the norm values of Three-channels.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormL1GetBufferHostSize_16s_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_L1_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4977
   pragma Import (C, nppiNorm_L1_16s_C3R, "nppiNorm_L1_16s_C3R");

  --*
  -- * Three-channel 32-bit floating point image Norm_L1.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNorm Array that contains the norm values of Three-channels.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormL1GetBufferHostSize_32f_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_L1_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:4990
   pragma Import (C, nppiNorm_L1_32f_C3R, "nppiNorm_L1_32f_C3R");

  --*
  -- * Four-channel 8-bit unsigned image Norm_L1 ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNorm Array that contains the norm values of Three-channels.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormL1GetBufferHostSize_8u_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_L1_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5003
   pragma Import (C, nppiNorm_L1_8u_AC4R, "nppiNorm_L1_8u_AC4R");

  --*
  -- * Four-channel 16-bit unsigned image Norm_L1 ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNorm Array that contains the norm values of Three-channels.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormL1GetBufferHostSize_16u_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_L1_16u_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5016
   pragma Import (C, nppiNorm_L1_16u_AC4R, "nppiNorm_L1_16u_AC4R");

  --*
  -- * Four-channel 16-bit signed image Norm_L1 ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNorm Array that contains the norm values of Three-channels.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormL1GetBufferHostSize_16s_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_L1_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5029
   pragma Import (C, nppiNorm_L1_16s_AC4R, "nppiNorm_L1_16s_AC4R");

  --*
  -- * Four-channel 32-bit floating point image Norm_L1 ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNorm Array that contains the norm values of Three-channels.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormL1GetBufferHostSize_32f_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_L1_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5042
   pragma Import (C, nppiNorm_L1_32f_AC4R, "nppiNorm_L1_32f_AC4R");

  --*
  -- * Four-channel 8-bit unsigned image Norm_L1.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNorm Array that contains the norm values of Four-channels.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormL1GetBufferHostSize_8u_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_L1_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5055
   pragma Import (C, nppiNorm_L1_8u_C4R, "nppiNorm_L1_8u_C4R");

  --*
  -- * Four-channel 16-bit unsigned image Norm_L1.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNorm Array that contains the norm values of Four-channels.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormL1GetBufferHostSize_16u_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_L1_16u_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5068
   pragma Import (C, nppiNorm_L1_16u_C4R, "nppiNorm_L1_16u_C4R");

  --*
  -- * Four-channel 16-bit signed image Norm_L1.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNorm Array that contains the norm values of Four-channels.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormL1GetBufferHostSize_16s_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_L1_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5081
   pragma Import (C, nppiNorm_L1_16s_C4R, "nppiNorm_L1_16s_C4R");

  --*
  -- * Four-channel 32-bit floating point image Norm_L1.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNorm Array that contains the norm values of Four-channels.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormL1GetBufferHostSize_32f_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_L1_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5094
   pragma Import (C, nppiNorm_L1_32f_C4R, "nppiNorm_L1_32f_C4R");

  --* @}  
  --* @name Masked Norm_L1
  -- * See \ref masked_operation.
  -- * @{
  --  

  --*
  -- * Masked one-channel 8-bit unsigned image Norm_L1.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNorm Pointer to the norm value.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormL1GetBufferHostSize_8u_C1MR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_L1_8u_C1MR
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5114
   pragma Import (C, nppiNorm_L1_8u_C1MR, "nppiNorm_L1_8u_C1MR");

  --*
  -- * Masked one-channel 8-bit signed image Norm_L1.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNorm Pointer to the norm value.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormL1GetBufferHostSize_8s_C1MR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_L1_8s_C1MR
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5129
   pragma Import (C, nppiNorm_L1_8s_C1MR, "nppiNorm_L1_8s_C1MR");

  --*
  -- * Masked one-channel 16-bit unsigned image Norm_L1.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNorm Pointer to the norm value.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormL1GetBufferHostSize_16u_C1MR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_L1_16u_C1MR
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5144
   pragma Import (C, nppiNorm_L1_16u_C1MR, "nppiNorm_L1_16u_C1MR");

  --*
  -- * Masked one-channel 32-bit floating point image Norm_L1.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNorm Pointer to the norm value.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormL1GetBufferHostSize_32f_C1MR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_L1_32f_C1MR
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5159
   pragma Import (C, nppiNorm_L1_32f_C1MR, "nppiNorm_L1_32f_C1MR");

  --* @}  
  --* @name Masked Channel Norm_L1
  -- * See \ref channel_of_interest and \ref masked_operation.
  -- * @{
  --  

  --*
  -- * Masked three-channel 8-bit unsigned image Norm_L1 affecting only single channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pNorm Pointer to the norm value.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormL1GetBufferHostSize_8u_C3CMR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.
  --  

   function nppiNorm_L1_8u_C3CMR
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5180
   pragma Import (C, nppiNorm_L1_8u_C3CMR, "nppiNorm_L1_8u_C3CMR");

  --*
  -- * Masked three-channel 8-bit signed image Norm_L1 affecting only single channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pNorm Pointer to the norm value.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormL1GetBufferHostSize_8s_C3CMR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.
  --  

   function nppiNorm_L1_8s_C3CMR
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5196
   pragma Import (C, nppiNorm_L1_8s_C3CMR, "nppiNorm_L1_8s_C3CMR");

  --*
  -- * Masked three-channel 16-bit unsigned image Norm_L1 affecting only single channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pNorm Pointer to the norm value.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormL1GetBufferHostSize_16u_C3CMR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.
  --  

   function nppiNorm_L1_16u_C3CMR
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5212
   pragma Import (C, nppiNorm_L1_16u_C3CMR, "nppiNorm_L1_16u_C3CMR");

  --*
  -- * Masked three-channel 32-bit floating point image Norm_L1 affecting only single channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pNorm Pointer to the norm value.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormL1GetBufferHostSize_32f_C3CMR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if the step of 
  -- * the source image cannot be divided by 4, or NPP_COI_ERROR if an invalid channel of interest is specified.
  --  

   function nppiNorm_L1_32f_C3CMR
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5229
   pragma Import (C, nppiNorm_L1_32f_C3CMR, "nppiNorm_L1_32f_C3CMR");

  --* @}  
  --* @name NormL1GetBufferHostSize
  -- * Companion primitives for computing the device buffer size (in bytes) required by the Norm_L1 primitives.
  -- * @{
  --  

  --* 
  -- * Buffer size for \ref nppiNorm_L1_8u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL1GetBufferHostSize_8u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5244
   pragma Import (C, nppiNormL1GetBufferHostSize_8u_C1R, "nppiNormL1GetBufferHostSize_8u_C1R");

  --* 
  -- * Buffer size for \ref nppiNorm_L1_16u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL1GetBufferHostSize_16u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5254
   pragma Import (C, nppiNormL1GetBufferHostSize_16u_C1R, "nppiNormL1GetBufferHostSize_16u_C1R");

  --* 
  -- * Buffer size for \ref nppiNorm_L1_16s_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL1GetBufferHostSize_16s_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5264
   pragma Import (C, nppiNormL1GetBufferHostSize_16s_C1R, "nppiNormL1GetBufferHostSize_16s_C1R");

  --* 
  -- * Buffer size for \ref nppiNorm_L1_32f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL1GetBufferHostSize_32f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5274
   pragma Import (C, nppiNormL1GetBufferHostSize_32f_C1R, "nppiNormL1GetBufferHostSize_32f_C1R");

  --* 
  -- * Buffer size for \ref nppiNorm_L1_8u_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL1GetBufferHostSize_8u_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5284
   pragma Import (C, nppiNormL1GetBufferHostSize_8u_C1MR, "nppiNormL1GetBufferHostSize_8u_C1MR");

  --* 
  -- * Buffer size for \ref nppiNorm_L1_8s_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL1GetBufferHostSize_8s_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5294
   pragma Import (C, nppiNormL1GetBufferHostSize_8s_C1MR, "nppiNormL1GetBufferHostSize_8s_C1MR");

  --* 
  -- * Buffer size for \ref nppiNorm_L1_16u_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL1GetBufferHostSize_16u_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5304
   pragma Import (C, nppiNormL1GetBufferHostSize_16u_C1MR, "nppiNormL1GetBufferHostSize_16u_C1MR");

  --* 
  -- * Buffer size for \ref nppiNorm_L1_32f_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL1GetBufferHostSize_32f_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5314
   pragma Import (C, nppiNormL1GetBufferHostSize_32f_C1MR, "nppiNormL1GetBufferHostSize_32f_C1MR");

  --* 
  -- * Buffer size for \ref nppiNorm_L1_8u_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL1GetBufferHostSize_8u_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5324
   pragma Import (C, nppiNormL1GetBufferHostSize_8u_C3R, "nppiNormL1GetBufferHostSize_8u_C3R");

  --* 
  -- * Buffer size for \ref nppiNorm_L1_16u_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL1GetBufferHostSize_16u_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5334
   pragma Import (C, nppiNormL1GetBufferHostSize_16u_C3R, "nppiNormL1GetBufferHostSize_16u_C3R");

  --* 
  -- * Buffer size for \ref nppiNorm_L1_16s_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL1GetBufferHostSize_16s_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5344
   pragma Import (C, nppiNormL1GetBufferHostSize_16s_C3R, "nppiNormL1GetBufferHostSize_16s_C3R");

  --* 
  -- * Buffer size for \ref nppiNorm_L1_32f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL1GetBufferHostSize_32f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5354
   pragma Import (C, nppiNormL1GetBufferHostSize_32f_C3R, "nppiNormL1GetBufferHostSize_32f_C3R");

  --* 
  -- * Buffer size for \ref nppiNorm_L1_8u_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL1GetBufferHostSize_8u_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5364
   pragma Import (C, nppiNormL1GetBufferHostSize_8u_AC4R, "nppiNormL1GetBufferHostSize_8u_AC4R");

  --* 
  -- * Buffer size for \ref nppiNorm_L1_16u_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL1GetBufferHostSize_16u_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5374
   pragma Import (C, nppiNormL1GetBufferHostSize_16u_AC4R, "nppiNormL1GetBufferHostSize_16u_AC4R");

  --* 
  -- * Buffer size for \ref nppiNorm_L1_16s_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL1GetBufferHostSize_16s_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5384
   pragma Import (C, nppiNormL1GetBufferHostSize_16s_AC4R, "nppiNormL1GetBufferHostSize_16s_AC4R");

  --* 
  -- * Buffer size for \ref nppiNorm_L1_32f_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL1GetBufferHostSize_32f_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5394
   pragma Import (C, nppiNormL1GetBufferHostSize_32f_AC4R, "nppiNormL1GetBufferHostSize_32f_AC4R");

  --* 
  -- * Buffer size for \ref nppiNorm_L1_8u_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL1GetBufferHostSize_8u_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5404
   pragma Import (C, nppiNormL1GetBufferHostSize_8u_C4R, "nppiNormL1GetBufferHostSize_8u_C4R");

  --* 
  -- * Buffer size for \ref nppiNorm_L1_16u_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL1GetBufferHostSize_16u_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5414
   pragma Import (C, nppiNormL1GetBufferHostSize_16u_C4R, "nppiNormL1GetBufferHostSize_16u_C4R");

  --* 
  -- * Buffer size for \ref nppiNorm_L1_16s_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL1GetBufferHostSize_16s_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5424
   pragma Import (C, nppiNormL1GetBufferHostSize_16s_C4R, "nppiNormL1GetBufferHostSize_16s_C4R");

  --* 
  -- * Buffer size for \ref nppiNorm_L1_32f_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL1GetBufferHostSize_32f_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5434
   pragma Import (C, nppiNormL1GetBufferHostSize_32f_C4R, "nppiNormL1GetBufferHostSize_32f_C4R");

  --* 
  -- * Buffer size for \ref nppiNorm_L1_8u_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL1GetBufferHostSize_8u_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5444
   pragma Import (C, nppiNormL1GetBufferHostSize_8u_C3CMR, "nppiNormL1GetBufferHostSize_8u_C3CMR");

  --* 
  -- * Buffer size for \ref nppiNorm_L1_8s_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL1GetBufferHostSize_8s_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5454
   pragma Import (C, nppiNormL1GetBufferHostSize_8s_C3CMR, "nppiNormL1GetBufferHostSize_8s_C3CMR");

  --* 
  -- * Buffer size for \ref nppiNorm_L1_16u_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL1GetBufferHostSize_16u_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5464
   pragma Import (C, nppiNormL1GetBufferHostSize_16u_C3CMR, "nppiNormL1GetBufferHostSize_16u_C3CMR");

  --* 
  -- * Buffer size for \ref nppiNorm_L1_32f_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL1GetBufferHostSize_32f_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5474
   pragma Import (C, nppiNormL1GetBufferHostSize_32f_C3CMR, "nppiNormL1GetBufferHostSize_32f_C3CMR");

  --* @}   
  --* @} image_L1_norm  
  --* @defgroup image_L2_norm Norm_L2
  -- * Primitives for computing the L2 norm of an image. 
  -- * @{
  --  

  --* @name Basic Norm_L2
  -- * Computes the L2 norm of an image. 
  -- * @{
  --  

  --*
  -- * One-channel 8-bit unsigned image Norm_L2.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNorm Pointer to the norm value.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormL2GetBufferHostSize_8u_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_L2_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5497
   pragma Import (C, nppiNorm_L2_8u_C1R, "nppiNorm_L2_8u_C1R");

  --*
  -- * One-channel 16-bit unsigned image Norm_L2.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNorm Pointer to the norm value.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormL2GetBufferHostSize_16u_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_L2_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5510
   pragma Import (C, nppiNorm_L2_16u_C1R, "nppiNorm_L2_16u_C1R");

  --*
  -- * One-channel 16-bit signed image Norm_L2.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNorm Pointer to the norm value.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormL2GetBufferHostSize_16s_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_L2_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5523
   pragma Import (C, nppiNorm_L2_16s_C1R, "nppiNorm_L2_16s_C1R");

  --*
  -- * One-channel 32-bit floating point image Norm_L2.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNorm Pointer to the norm value.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormL2GetBufferHostSize_32f_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_L2_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5536
   pragma Import (C, nppiNorm_L2_32f_C1R, "nppiNorm_L2_32f_C1R");

  --*
  -- * Three-channel 8-bit unsigned image Norm_L2.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNorm Array that contains the norm values of Three-channels.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormL2GetBufferHostSize_8u_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_L2_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5549
   pragma Import (C, nppiNorm_L2_8u_C3R, "nppiNorm_L2_8u_C3R");

  --*
  -- * Three-channel 16-bit unsigned image Norm_L2.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNorm Array that contains the norm values of Three-channels.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormL2GetBufferHostSize_16u_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_L2_16u_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5562
   pragma Import (C, nppiNorm_L2_16u_C3R, "nppiNorm_L2_16u_C3R");

  --*
  -- * Three-channel 16-bit signed image Norm_L2.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNorm Array that contains the norm values of Three-channels.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormL2GetBufferHostSize_16s_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_L2_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5575
   pragma Import (C, nppiNorm_L2_16s_C3R, "nppiNorm_L2_16s_C3R");

  --*
  -- * Three-channel 32-bit floating point image Norm_L2.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNorm Array that contains the norm values of Three-channels.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormL2GetBufferHostSize_32f_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_L2_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5588
   pragma Import (C, nppiNorm_L2_32f_C3R, "nppiNorm_L2_32f_C3R");

  --*
  -- * Four-channel 8-bit unsigned image Norm_L2 ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNorm Array that contains the norm values of Three-channels.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormL2GetBufferHostSize_8u_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_L2_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5601
   pragma Import (C, nppiNorm_L2_8u_AC4R, "nppiNorm_L2_8u_AC4R");

  --*
  -- * Four-channel 16-bit unsigned image Norm_L2 ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNorm Array that contains the norm values of Three-channels.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormL2GetBufferHostSize_16u_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_L2_16u_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5614
   pragma Import (C, nppiNorm_L2_16u_AC4R, "nppiNorm_L2_16u_AC4R");

  --*
  -- * Four-channel 16-bit signed image Norm_L2 ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNorm Array that contains the norm values of Three-channels.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormL2GetBufferHostSize_16s_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_L2_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5627
   pragma Import (C, nppiNorm_L2_16s_AC4R, "nppiNorm_L2_16s_AC4R");

  --*
  -- * Four-channel 32-bit floating point image Norm_L2 ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNorm Array that contains the norm values of Three-channels.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormL2GetBufferHostSize_32f_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_L2_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5640
   pragma Import (C, nppiNorm_L2_32f_AC4R, "nppiNorm_L2_32f_AC4R");

  --*
  -- * Four-channel 8-bit unsigned image Norm_L2.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNorm Array that contains the norm values of Four-channels.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormL2GetBufferHostSize_8u_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_L2_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5653
   pragma Import (C, nppiNorm_L2_8u_C4R, "nppiNorm_L2_8u_C4R");

  --*
  -- * Four-channel 16-bit unsigned image Norm_L2.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNorm Array that contains the norm values of Four-channels.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormL2GetBufferHostSize_16u_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_L2_16u_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5666
   pragma Import (C, nppiNorm_L2_16u_C4R, "nppiNorm_L2_16u_C4R");

  --*
  -- * Four-channel 16-bit signed image Norm_L2.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNorm Array that contains the norm values of Four-channels.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormL2GetBufferHostSize_16s_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_L2_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5679
   pragma Import (C, nppiNorm_L2_16s_C4R, "nppiNorm_L2_16s_C4R");

  --*
  -- * Four-channel 32-bit floating point image Norm_L2.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNorm Array that contains the norm values of Four-channels.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- *        Use \ref nppiNormL2GetBufferHostSize_32f_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_L2_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5692
   pragma Import (C, nppiNorm_L2_32f_C4R, "nppiNorm_L2_32f_C4R");

  --* @}  
  --* @name Masked Norm_L2
  -- * See \ref masked_operation.
  -- * @{
  --  

  --*
  -- * Masked one-channel 8-bit unsigned image Norm_L2.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNorm Pointer to the norm value.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormL2GetBufferHostSize_8u_C1MR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_L2_8u_C1MR
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5713
   pragma Import (C, nppiNorm_L2_8u_C1MR, "nppiNorm_L2_8u_C1MR");

  --*
  -- * Masked one-channel 8-bit signed image Norm_L2.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNorm Pointer to the norm value.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormL2GetBufferHostSize_8s_C1MR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_L2_8s_C1MR
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5728
   pragma Import (C, nppiNorm_L2_8s_C1MR, "nppiNorm_L2_8s_C1MR");

  --*
  -- * Masked one-channel 16-bit unsigned image Norm_L2.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNorm Pointer to the norm value.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormL2GetBufferHostSize_16u_C1MR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiNorm_L2_16u_C1MR
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5743
   pragma Import (C, nppiNorm_L2_16u_C1MR, "nppiNorm_L2_16u_C1MR");

  --*
  -- * Masked one-channel 32-bit floating point image Norm_L2.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNorm Pointer to the norm value.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormL2GetBufferHostSize_32f_C1MR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if the step 
  -- * of the source image cannot be divided by 4. 
  --  

   function nppiNorm_L2_32f_C1MR
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5759
   pragma Import (C, nppiNorm_L2_32f_C1MR, "nppiNorm_L2_32f_C1MR");

  --* @}  
  --* @name Masked Channel Norm_L2
  -- * See \ref channel_of_interest and \ref masked_operation.
  -- * @{
  --  

  --*
  -- * Masked three-channel 8-bit unsigned image Norm_L2.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pNorm Pointer to the norm value.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- *        Use \ref nppiNormL2GetBufferHostSize_8u_C3CMR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.
  --  

   function nppiNorm_L2_8u_C3CMR
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5780
   pragma Import (C, nppiNorm_L2_8u_C3CMR, "nppiNorm_L2_8u_C3CMR");

  --*
  -- * Masked three-channel 8-bit signed image Norm_L2.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pNorm Pointer to the norm value.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- *        Use \ref nppiNormL2GetBufferHostSize_8s_C3CMR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.
  --  

   function nppiNorm_L2_8s_C3CMR
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5796
   pragma Import (C, nppiNorm_L2_8s_C3CMR, "nppiNorm_L2_8s_C3CMR");

  --*
  -- * Masked three-channel 16-bit unsigned image Norm_L2.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pNorm Pointer to the norm value.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- *        Use \ref nppiNormL2GetBufferHostSize_16u_C3CMR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.
  --  

   function nppiNorm_L2_16u_C3CMR
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5812
   pragma Import (C, nppiNorm_L2_16u_C3CMR, "nppiNorm_L2_16u_C3CMR");

  --*
  -- * Masked three-channel 32-bit floating point image Norm_L2.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pNorm Pointer to the norm value.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormL2GetBufferHostSize_32f_C3CMR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if the step 
  -- * of the source image cannot be divided by 4, or NPP_COI_ERROR if an invalid channel of interest is specified.
  --  

   function nppiNorm_L2_32f_C3CMR
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pNorm : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5829
   pragma Import (C, nppiNorm_L2_32f_C3CMR, "nppiNorm_L2_32f_C3CMR");

  --* @}  
  --* @name NormL2GetBufferHostSize
  -- * Companion primitives for computing the device buffer size (in bytes) required by the Norm_L2 primitives.
  -- * @{
  --  

  --* 
  -- * Buffer size for \ref nppiNorm_L2_8u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL2GetBufferHostSize_8u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5844
   pragma Import (C, nppiNormL2GetBufferHostSize_8u_C1R, "nppiNormL2GetBufferHostSize_8u_C1R");

  --* 
  -- * Buffer size for \ref nppiNorm_L2_16u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL2GetBufferHostSize_16u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5854
   pragma Import (C, nppiNormL2GetBufferHostSize_16u_C1R, "nppiNormL2GetBufferHostSize_16u_C1R");

  --* 
  -- * Buffer size for \ref nppiNorm_L2_16s_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL2GetBufferHostSize_16s_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5864
   pragma Import (C, nppiNormL2GetBufferHostSize_16s_C1R, "nppiNormL2GetBufferHostSize_16s_C1R");

  --* 
  -- * Buffer size for \ref nppiNorm_L2_32f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL2GetBufferHostSize_32f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5874
   pragma Import (C, nppiNormL2GetBufferHostSize_32f_C1R, "nppiNormL2GetBufferHostSize_32f_C1R");

  --* 
  -- * Buffer size for \ref nppiNorm_L2_8u_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL2GetBufferHostSize_8u_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5884
   pragma Import (C, nppiNormL2GetBufferHostSize_8u_C1MR, "nppiNormL2GetBufferHostSize_8u_C1MR");

  --* 
  -- * Buffer size for \ref nppiNorm_L2_8s_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL2GetBufferHostSize_8s_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5894
   pragma Import (C, nppiNormL2GetBufferHostSize_8s_C1MR, "nppiNormL2GetBufferHostSize_8s_C1MR");

  --* 
  -- * Buffer size for \ref nppiNorm_L2_16u_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL2GetBufferHostSize_16u_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5904
   pragma Import (C, nppiNormL2GetBufferHostSize_16u_C1MR, "nppiNormL2GetBufferHostSize_16u_C1MR");

  --* 
  -- * Buffer size for \ref nppiNorm_L2_32f_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL2GetBufferHostSize_32f_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5914
   pragma Import (C, nppiNormL2GetBufferHostSize_32f_C1MR, "nppiNormL2GetBufferHostSize_32f_C1MR");

  --* 
  -- * Buffer size for \ref nppiNorm_L2_8u_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL2GetBufferHostSize_8u_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5924
   pragma Import (C, nppiNormL2GetBufferHostSize_8u_C3R, "nppiNormL2GetBufferHostSize_8u_C3R");

  --* 
  -- * Buffer size for \ref nppiNorm_L2_16u_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL2GetBufferHostSize_16u_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5934
   pragma Import (C, nppiNormL2GetBufferHostSize_16u_C3R, "nppiNormL2GetBufferHostSize_16u_C3R");

  --* 
  -- * Buffer size for \ref nppiNorm_L2_16s_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL2GetBufferHostSize_16s_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5944
   pragma Import (C, nppiNormL2GetBufferHostSize_16s_C3R, "nppiNormL2GetBufferHostSize_16s_C3R");

  --* 
  -- * Buffer size for \ref nppiNorm_L2_32f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL2GetBufferHostSize_32f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5954
   pragma Import (C, nppiNormL2GetBufferHostSize_32f_C3R, "nppiNormL2GetBufferHostSize_32f_C3R");

  --* 
  -- * Buffer size for \ref nppiNorm_L2_8u_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL2GetBufferHostSize_8u_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5964
   pragma Import (C, nppiNormL2GetBufferHostSize_8u_AC4R, "nppiNormL2GetBufferHostSize_8u_AC4R");

  --* 
  -- * Buffer size for \ref nppiNorm_L2_16u_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL2GetBufferHostSize_16u_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5974
   pragma Import (C, nppiNormL2GetBufferHostSize_16u_AC4R, "nppiNormL2GetBufferHostSize_16u_AC4R");

  --* 
  -- * Buffer size for \ref nppiNorm_L2_16s_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL2GetBufferHostSize_16s_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5984
   pragma Import (C, nppiNormL2GetBufferHostSize_16s_AC4R, "nppiNormL2GetBufferHostSize_16s_AC4R");

  --* 
  -- * Buffer size for \ref nppiNorm_L2_32f_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL2GetBufferHostSize_32f_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:5994
   pragma Import (C, nppiNormL2GetBufferHostSize_32f_AC4R, "nppiNormL2GetBufferHostSize_32f_AC4R");

  --* 
  -- * Buffer size for \ref nppiNorm_L2_8u_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL2GetBufferHostSize_8u_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6004
   pragma Import (C, nppiNormL2GetBufferHostSize_8u_C4R, "nppiNormL2GetBufferHostSize_8u_C4R");

  --* 
  -- * Buffer size for \ref nppiNorm_L2_16u_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL2GetBufferHostSize_16u_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6014
   pragma Import (C, nppiNormL2GetBufferHostSize_16u_C4R, "nppiNormL2GetBufferHostSize_16u_C4R");

  --* 
  -- * Buffer size for \ref nppiNorm_L2_16s_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL2GetBufferHostSize_16s_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6024
   pragma Import (C, nppiNormL2GetBufferHostSize_16s_C4R, "nppiNormL2GetBufferHostSize_16s_C4R");

  --* 
  -- * Buffer size for \ref nppiNorm_L2_32f_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL2GetBufferHostSize_32f_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6034
   pragma Import (C, nppiNormL2GetBufferHostSize_32f_C4R, "nppiNormL2GetBufferHostSize_32f_C4R");

  --* 
  -- * Buffer size for \ref nppiNorm_L2_8u_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL2GetBufferHostSize_8u_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6044
   pragma Import (C, nppiNormL2GetBufferHostSize_8u_C3CMR, "nppiNormL2GetBufferHostSize_8u_C3CMR");

  --* 
  -- * Buffer size for \ref nppiNorm_L2_8s_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL2GetBufferHostSize_8s_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6054
   pragma Import (C, nppiNormL2GetBufferHostSize_8s_C3CMR, "nppiNormL2GetBufferHostSize_8s_C3CMR");

  --* 
  -- * Buffer size for \ref nppiNorm_L2_16u_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL2GetBufferHostSize_16u_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6064
   pragma Import (C, nppiNormL2GetBufferHostSize_16u_C3CMR, "nppiNormL2GetBufferHostSize_16u_C3CMR");

  --* 
  -- * Buffer size for \ref nppiNorm_L2_32f_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormL2GetBufferHostSize_32f_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6074
   pragma Import (C, nppiNormL2GetBufferHostSize_32f_C3CMR, "nppiNormL2GetBufferHostSize_32f_C3CMR");

  --* @}  
  --* @} image_L2_norm  
  --* @defgroup image_inf_normdiff NormDiff_Inf
  -- * Primitives for computing the infinity norm of difference of pixels between two images.
  -- * @{
  --  

  --* @name Basic NormDiff_Inf
  -- * @{
  --  

  --*
  -- * One-channel 8-bit unsigned image NormDiff_Inf.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormDiff Pointer to the computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffInfGetBufferHostSize_8u_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiNormDiff_Inf_8u_C1R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6099
   pragma Import (C, nppiNormDiff_Inf_8u_C1R, "nppiNormDiff_Inf_8u_C1R");

  --*
  -- * One-channel 16-bit unsigned image NormDiff_Inf.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormDiff Pointer to the computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffInfGetBufferHostSize_16u_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiNormDiff_Inf_16u_C1R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6116
   pragma Import (C, nppiNormDiff_Inf_16u_C1R, "nppiNormDiff_Inf_16u_C1R");

  --*
  -- * One-channel 16-bit signed image NormDiff_Inf.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormDiff Pointer to the computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffInfGetBufferHostSize_16s_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiNormDiff_Inf_16s_C1R
     (pSrc1 : access nppdefs_h.Npp16s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6133
   pragma Import (C, nppiNormDiff_Inf_16s_C1R, "nppiNormDiff_Inf_16s_C1R");

  --*
  -- * One-channel 32-bit floating point image NormDiff_Inf.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormDiff Pointer to the computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffInfGetBufferHostSize_32f_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiNormDiff_Inf_32f_C1R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6151
   pragma Import (C, nppiNormDiff_Inf_32f_C1R, "nppiNormDiff_Inf_32f_C1R");

  --*
  -- * Three-channel 8-bit unsigned image NormDiff_Inf.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormDiff Array that contains computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffInfGetBufferHostSize_8u_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiNormDiff_Inf_8u_C3R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6168
   pragma Import (C, nppiNormDiff_Inf_8u_C3R, "nppiNormDiff_Inf_8u_C3R");

  --*
  -- * Three-channel 16-bit unsigned image NormDiff_Inf.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormDiff Array that contains computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffInfGetBufferHostSize_16u_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiNormDiff_Inf_16u_C3R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6185
   pragma Import (C, nppiNormDiff_Inf_16u_C3R, "nppiNormDiff_Inf_16u_C3R");

  --*
  -- * Three-channel 16-bit signed image NormDiff_Inf.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormDiff Array that contains computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffInfGetBufferHostSize_16s_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiNormDiff_Inf_16s_C3R
     (pSrc1 : access nppdefs_h.Npp16s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6202
   pragma Import (C, nppiNormDiff_Inf_16s_C3R, "nppiNormDiff_Inf_16s_C3R");

  --*
  -- * Three-channel 32-bit floating point image NormDiff_Inf.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormDiff Array that contains computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffInfGetBufferHostSize_32f_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if 
  -- * an invalid floating-point image is specified.
  -- 

   function nppiNormDiff_Inf_32f_C3R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6220
   pragma Import (C, nppiNormDiff_Inf_32f_C3R, "nppiNormDiff_Inf_32f_C3R");

  --*
  -- * Four-channel 8-bit unsigned image NormDiff_Inf ignoring alpha channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormDiff Array that contains computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffInfGetBufferHostSize_8u_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiNormDiff_Inf_8u_AC4R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6237
   pragma Import (C, nppiNormDiff_Inf_8u_AC4R, "nppiNormDiff_Inf_8u_AC4R");

  --*
  -- * Four-channel 16-bit unsigned image NormDiff_Inf ignoring alpha channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormDiff Array that contains computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffInfGetBufferHostSize_16u_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiNormDiff_Inf_16u_AC4R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6254
   pragma Import (C, nppiNormDiff_Inf_16u_AC4R, "nppiNormDiff_Inf_16u_AC4R");

  --*
  -- * Four-channel 16-bit signed image NormDiff_Inf ignoring alpha channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormDiff Array that contains computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffInfGetBufferHostSize_16s_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiNormDiff_Inf_16s_AC4R
     (pSrc1 : access nppdefs_h.Npp16s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6271
   pragma Import (C, nppiNormDiff_Inf_16s_AC4R, "nppiNormDiff_Inf_16s_AC4R");

  --*
  -- * Four-channel 32-bit floating point image NormDiff_Inf ignoring alpha channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormDiff Array that contains computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffInfGetBufferHostSize_32f_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if 
  -- * an invalid floating-point image is specified.
  -- 

   function nppiNormDiff_Inf_32f_AC4R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6289
   pragma Import (C, nppiNormDiff_Inf_32f_AC4R, "nppiNormDiff_Inf_32f_AC4R");

  --*
  -- * Four-channel 8-bit unsigned image NormDiff_Inf.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormDiff Array that contains computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffInfGetBufferHostSize_8u_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiNormDiff_Inf_8u_C4R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6306
   pragma Import (C, nppiNormDiff_Inf_8u_C4R, "nppiNormDiff_Inf_8u_C4R");

  --*
  -- * Four-channel 16-bit unsigned image NormDiff_Inf.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormDiff Array that contains computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffInfGetBufferHostSize_16u_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiNormDiff_Inf_16u_C4R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6323
   pragma Import (C, nppiNormDiff_Inf_16u_C4R, "nppiNormDiff_Inf_16u_C4R");

  --*
  -- * Four-channel 16-bit signed image NormDiff_Inf.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormDiff Array that contains computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffInfGetBufferHostSize_16s_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiNormDiff_Inf_16s_C4R
     (pSrc1 : access nppdefs_h.Npp16s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6340
   pragma Import (C, nppiNormDiff_Inf_16s_C4R, "nppiNormDiff_Inf_16s_C4R");

  --*
  -- * Four-channel 32-bit floating point image NormDiff_Inf.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormDiff Array that contains computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffInfGetBufferHostSize_32f_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if 
  -- * an invalid floating-point image is specified.
  -- 

   function nppiNormDiff_Inf_32f_C4R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6358
   pragma Import (C, nppiNormDiff_Inf_32f_C4R, "nppiNormDiff_Inf_32f_C4R");

  --* @}  
  --* @name Masked NormDiff_Inf
  -- * See \ref masked_operation.
  -- * @{
  --  

  --*
  -- * Masked one-channel 8-bit unsigned images NormDiff_Inf.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormDiff Pointer to the computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffInfGetBufferHostSize_8u_C1MR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiNormDiff_Inf_8u_C1MR
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6383
   pragma Import (C, nppiNormDiff_Inf_8u_C1MR, "nppiNormDiff_Inf_8u_C1MR");

  --*
  -- * Masked one-channel 8-bit signed images NormDiff_Inf.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormDiff Pointer to the computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffInfGetBufferHostSize_8s_C1MR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiNormDiff_Inf_8s_C1MR
     (pSrc1 : access nppdefs_h.Npp8s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8s;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6403
   pragma Import (C, nppiNormDiff_Inf_8s_C1MR, "nppiNormDiff_Inf_8s_C1MR");

  --*
  -- * Masked one-channel 16-bit unsigned images NormDiff_Inf.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormDiff Pointer to the computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffInfGetBufferHostSize_16u_C1MR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiNormDiff_Inf_16u_C1MR
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6423
   pragma Import (C, nppiNormDiff_Inf_16u_C1MR, "nppiNormDiff_Inf_16u_C1MR");

  --*
  -- * Masked one-channel 32-bit floating point images NormDiff_Inf.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormDiff Pointer to the computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffInfGetBufferHostSize_32f_C1MR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if 
  -- * an invalid floating-point image is specified.
  -- 

   function nppiNormDiff_Inf_32f_C1MR
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6444
   pragma Import (C, nppiNormDiff_Inf_32f_C1MR, "nppiNormDiff_Inf_32f_C1MR");

  --* @}  
  --* @name Masked Channel Mean
  -- * See \ref masked_operation and \ref channel_of_interest.
  -- * @{
  --  

  --*
  -- * Masked three-channel 8-bit unsigned image NormDiff_Inf affecting only single channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pNormDiff Pointer to the computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffInfGetBufferHostSize_8u_C3CMR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.
  -- 

   function nppiNormDiff_Inf_8u_C3CMR
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6470
   pragma Import (C, nppiNormDiff_Inf_8u_C3CMR, "nppiNormDiff_Inf_8u_C3CMR");

  --*
  -- * Masked three-channel 8-bit signed image NormDiff_Inf affecting only single channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pNormDiff Pointer to the computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffInfGetBufferHostSize_8s_C3CMR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.
  -- 

   function nppiNormDiff_Inf_8s_C3CMR
     (pSrc1 : access nppdefs_h.Npp8s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8s;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6491
   pragma Import (C, nppiNormDiff_Inf_8s_C3CMR, "nppiNormDiff_Inf_8s_C3CMR");

  --*
  -- * Masked three-channel 16-bit unsigned image NormDiff_Inf affecting only single channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pNormDiff Pointer to the computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffInfGetBufferHostSize_16u_C3CMR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.
  -- 

   function nppiNormDiff_Inf_16u_C3CMR
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6512
   pragma Import (C, nppiNormDiff_Inf_16u_C3CMR, "nppiNormDiff_Inf_16u_C3CMR");

  --*
  -- * Masked three-channel 32-bit floating point image NormDiff_Inf affecting only single channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pNormDiff Pointer to the computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffInfGetBufferHostSize_32f_C3CMR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_COI_ERROR if an invalid channel 
  -- * of interest is specified, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.
  -- 

   function nppiNormDiff_Inf_32f_C3CMR
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6534
   pragma Import (C, nppiNormDiff_Inf_32f_C3CMR, "nppiNormDiff_Inf_32f_C3CMR");

  --* @}  
  --* @name NormDiffInfGetBufferHostSize
  -- * Companion primitives for computing the device buffer size (in bytes) required by the NormDiff_Inf primitives.
  -- * @{
  --  

  --* 
  -- * Buffer size for \ref nppiNormDiff_Inf_8u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffInfGetBufferHostSize_8u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6552
   pragma Import (C, nppiNormDiffInfGetBufferHostSize_8u_C1R, "nppiNormDiffInfGetBufferHostSize_8u_C1R");

  --* 
  -- * Buffer size for \ref nppiNormDiff_Inf_16u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffInfGetBufferHostSize_16u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6562
   pragma Import (C, nppiNormDiffInfGetBufferHostSize_16u_C1R, "nppiNormDiffInfGetBufferHostSize_16u_C1R");

  --* 
  -- * Buffer size for \ref nppiNormDiff_Inf_16s_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffInfGetBufferHostSize_16s_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6572
   pragma Import (C, nppiNormDiffInfGetBufferHostSize_16s_C1R, "nppiNormDiffInfGetBufferHostSize_16s_C1R");

  --* 
  -- * Buffer size for \ref nppiNormDiff_Inf_32f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffInfGetBufferHostSize_32f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6582
   pragma Import (C, nppiNormDiffInfGetBufferHostSize_32f_C1R, "nppiNormDiffInfGetBufferHostSize_32f_C1R");

  --* 
  -- * Buffer size for \ref nppiNormDiff_Inf_8u_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffInfGetBufferHostSize_8u_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6592
   pragma Import (C, nppiNormDiffInfGetBufferHostSize_8u_C1MR, "nppiNormDiffInfGetBufferHostSize_8u_C1MR");

  --* 
  -- * Buffer size for \ref nppiNormDiff_Inf_8s_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffInfGetBufferHostSize_8s_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6602
   pragma Import (C, nppiNormDiffInfGetBufferHostSize_8s_C1MR, "nppiNormDiffInfGetBufferHostSize_8s_C1MR");

  --* 
  -- * Buffer size for \ref nppiNormDiff_Inf_16u_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffInfGetBufferHostSize_16u_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6612
   pragma Import (C, nppiNormDiffInfGetBufferHostSize_16u_C1MR, "nppiNormDiffInfGetBufferHostSize_16u_C1MR");

  --* 
  -- * Buffer size for \ref nppiNormDiff_Inf_32f_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffInfGetBufferHostSize_32f_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6622
   pragma Import (C, nppiNormDiffInfGetBufferHostSize_32f_C1MR, "nppiNormDiffInfGetBufferHostSize_32f_C1MR");

  --* 
  -- * Buffer size for \ref nppiNormDiff_Inf_8u_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffInfGetBufferHostSize_8u_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6632
   pragma Import (C, nppiNormDiffInfGetBufferHostSize_8u_C3R, "nppiNormDiffInfGetBufferHostSize_8u_C3R");

  --* 
  -- * Buffer size for \ref nppiNormDiff_Inf_16u_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffInfGetBufferHostSize_16u_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6642
   pragma Import (C, nppiNormDiffInfGetBufferHostSize_16u_C3R, "nppiNormDiffInfGetBufferHostSize_16u_C3R");

  --* 
  -- * Buffer size for \ref nppiNormDiff_Inf_16s_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffInfGetBufferHostSize_16s_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6652
   pragma Import (C, nppiNormDiffInfGetBufferHostSize_16s_C3R, "nppiNormDiffInfGetBufferHostSize_16s_C3R");

  --* 
  -- * Buffer size for \ref nppiNormDiff_Inf_32f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffInfGetBufferHostSize_32f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6662
   pragma Import (C, nppiNormDiffInfGetBufferHostSize_32f_C3R, "nppiNormDiffInfGetBufferHostSize_32f_C3R");

  --* 
  -- * Buffer size for \ref nppiNormDiff_Inf_8u_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffInfGetBufferHostSize_8u_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6672
   pragma Import (C, nppiNormDiffInfGetBufferHostSize_8u_C4R, "nppiNormDiffInfGetBufferHostSize_8u_C4R");

  --* 
  -- * Buffer size for \ref nppiNormDiff_Inf_16u_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffInfGetBufferHostSize_16u_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6682
   pragma Import (C, nppiNormDiffInfGetBufferHostSize_16u_C4R, "nppiNormDiffInfGetBufferHostSize_16u_C4R");

  --* 
  -- * Buffer size for \ref nppiNormDiff_Inf_16s_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffInfGetBufferHostSize_16s_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6692
   pragma Import (C, nppiNormDiffInfGetBufferHostSize_16s_C4R, "nppiNormDiffInfGetBufferHostSize_16s_C4R");

  --* 
  -- * Buffer size for \ref nppiNormDiff_Inf_32f_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffInfGetBufferHostSize_32f_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6702
   pragma Import (C, nppiNormDiffInfGetBufferHostSize_32f_C4R, "nppiNormDiffInfGetBufferHostSize_32f_C4R");

  --* 
  -- * Buffer size for \ref nppiNormDiff_Inf_8u_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffInfGetBufferHostSize_8u_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6712
   pragma Import (C, nppiNormDiffInfGetBufferHostSize_8u_AC4R, "nppiNormDiffInfGetBufferHostSize_8u_AC4R");

  --* 
  -- * Buffer size for \ref nppiNormDiff_Inf_16u_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffInfGetBufferHostSize_16u_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6722
   pragma Import (C, nppiNormDiffInfGetBufferHostSize_16u_AC4R, "nppiNormDiffInfGetBufferHostSize_16u_AC4R");

  --* 
  -- * Buffer size for \ref nppiNormDiff_Inf_16s_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffInfGetBufferHostSize_16s_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6732
   pragma Import (C, nppiNormDiffInfGetBufferHostSize_16s_AC4R, "nppiNormDiffInfGetBufferHostSize_16s_AC4R");

  --* 
  -- * Buffer size for \ref nppiNormDiff_Inf_32f_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffInfGetBufferHostSize_32f_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6742
   pragma Import (C, nppiNormDiffInfGetBufferHostSize_32f_AC4R, "nppiNormDiffInfGetBufferHostSize_32f_AC4R");

  --* 
  -- * Buffer size for \ref nppiNormDiff_Inf_8u_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffInfGetBufferHostSize_8u_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6752
   pragma Import (C, nppiNormDiffInfGetBufferHostSize_8u_C3CMR, "nppiNormDiffInfGetBufferHostSize_8u_C3CMR");

  --* 
  -- * Buffer size for \ref nppiNormDiff_Inf_8s_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffInfGetBufferHostSize_8s_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6762
   pragma Import (C, nppiNormDiffInfGetBufferHostSize_8s_C3CMR, "nppiNormDiffInfGetBufferHostSize_8s_C3CMR");

  --* 
  -- * Buffer size for \ref nppiNormDiff_Inf_16u_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffInfGetBufferHostSize_16u_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6772
   pragma Import (C, nppiNormDiffInfGetBufferHostSize_16u_C3CMR, "nppiNormDiffInfGetBufferHostSize_16u_C3CMR");

  --* 
  -- * Buffer size for \ref nppiNormDiff_Inf_32f_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffInfGetBufferHostSize_32f_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6782
   pragma Import (C, nppiNormDiffInfGetBufferHostSize_32f_C3CMR, "nppiNormDiffInfGetBufferHostSize_32f_C3CMR");

  --* @}  
  --* @} image_inf_normdiff  
  --* @defgroup image_L1_normdiff NormDiff_L1
  -- * Primitives for computing the L1 norm of difference of pixels between two images.
  -- * @{
  --  

  --* @name Basic NormDiff_L1
  -- * @{
  --  

  --*
  -- * One-channel 8-bit unsigned image NormDiff_L1.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormDiff Pointer to the computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL1GetBufferHostSize_8u_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiNormDiff_L1_8u_C1R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6807
   pragma Import (C, nppiNormDiff_L1_8u_C1R, "nppiNormDiff_L1_8u_C1R");

  --*
  -- * One-channel 16-bit unsigned image NormDiff_L1.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormDiff Pointer to the computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL1GetBufferHostSize_16u_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiNormDiff_L1_16u_C1R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6824
   pragma Import (C, nppiNormDiff_L1_16u_C1R, "nppiNormDiff_L1_16u_C1R");

  --*
  -- * One-channel 16-bit signed image NormDiff_L1.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormDiff Pointer to the computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL1GetBufferHostSize_16s_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiNormDiff_L1_16s_C1R
     (pSrc1 : access nppdefs_h.Npp16s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6841
   pragma Import (C, nppiNormDiff_L1_16s_C1R, "nppiNormDiff_L1_16s_C1R");

  --*
  -- * One-channel 32-bit floating point image NormDiff_L1.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormDiff Pointer to the computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL1GetBufferHostSize_32f_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiNormDiff_L1_32f_C1R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6859
   pragma Import (C, nppiNormDiff_L1_32f_C1R, "nppiNormDiff_L1_32f_C1R");

  --*
  -- * Three-channel 8-bit unsigned image NormDiff_L1.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormDiff Array that contains computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL1GetBufferHostSize_8u_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiNormDiff_L1_8u_C3R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6876
   pragma Import (C, nppiNormDiff_L1_8u_C3R, "nppiNormDiff_L1_8u_C3R");

  --*
  -- * Three-channel 16-bit unsigned image NormDiff_L1.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormDiff Array that contains computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL1GetBufferHostSize_16u_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiNormDiff_L1_16u_C3R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6893
   pragma Import (C, nppiNormDiff_L1_16u_C3R, "nppiNormDiff_L1_16u_C3R");

  --*
  -- * Three-channel 16-bit signed image NormDiff_L1.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormDiff Array that contains computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL1GetBufferHostSize_16s_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiNormDiff_L1_16s_C3R
     (pSrc1 : access nppdefs_h.Npp16s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6910
   pragma Import (C, nppiNormDiff_L1_16s_C3R, "nppiNormDiff_L1_16s_C3R");

  --*
  -- * Three-channel 32-bit floating point image NormDiff_L1.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormDiff Array that contains computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL1GetBufferHostSize_32f_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if 
  -- * an invalid floating-point image is specified.
  -- 

   function nppiNormDiff_L1_32f_C3R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6928
   pragma Import (C, nppiNormDiff_L1_32f_C3R, "nppiNormDiff_L1_32f_C3R");

  --*
  -- * Four-channel 8-bit unsigned image NormDiff_L1 ignoring alpha channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormDiff Array that contains computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL1GetBufferHostSize_8u_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiNormDiff_L1_8u_AC4R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6945
   pragma Import (C, nppiNormDiff_L1_8u_AC4R, "nppiNormDiff_L1_8u_AC4R");

  --*
  -- * Four-channel 16-bit unsigned image NormDiff_L1 ignoring alpha channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormDiff Array that contains computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL1GetBufferHostSize_16u_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiNormDiff_L1_16u_AC4R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6962
   pragma Import (C, nppiNormDiff_L1_16u_AC4R, "nppiNormDiff_L1_16u_AC4R");

  --*
  -- * Four-channel 16-bit signed image NormDiff_L1 ignoring alpha channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormDiff Array that contains computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL1GetBufferHostSize_16s_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiNormDiff_L1_16s_AC4R
     (pSrc1 : access nppdefs_h.Npp16s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6979
   pragma Import (C, nppiNormDiff_L1_16s_AC4R, "nppiNormDiff_L1_16s_AC4R");

  --*
  -- * Four-channel 32-bit floating point image NormDiff_L1 ignoring alpha channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormDiff Array that contains computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL1GetBufferHostSize_32f_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if 
  -- * an invalid floating-point image is specified.
  -- 

   function nppiNormDiff_L1_32f_AC4R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:6997
   pragma Import (C, nppiNormDiff_L1_32f_AC4R, "nppiNormDiff_L1_32f_AC4R");

  --*
  -- * Four-channel 8-bit unsigned image NormDiff_L1.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormDiff Array that contains computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL1GetBufferHostSize_8u_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiNormDiff_L1_8u_C4R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7014
   pragma Import (C, nppiNormDiff_L1_8u_C4R, "nppiNormDiff_L1_8u_C4R");

  --*
  -- * Four-channel 16-bit unsigned image NormDiff_L1.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormDiff Array that contains computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL1GetBufferHostSize_16u_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiNormDiff_L1_16u_C4R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7031
   pragma Import (C, nppiNormDiff_L1_16u_C4R, "nppiNormDiff_L1_16u_C4R");

  --*
  -- * Four-channel 16-bit signed image NormDiff_L1.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormDiff Array that contains computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL1GetBufferHostSize_16s_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiNormDiff_L1_16s_C4R
     (pSrc1 : access nppdefs_h.Npp16s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7048
   pragma Import (C, nppiNormDiff_L1_16s_C4R, "nppiNormDiff_L1_16s_C4R");

  --*
  -- * Four-channel 32-bit floating point image NormDiff_L1.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormDiff Array that contains computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL1GetBufferHostSize_32f_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if 
  -- * an invalid floating-point image is specified.
  -- 

   function nppiNormDiff_L1_32f_C4R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7066
   pragma Import (C, nppiNormDiff_L1_32f_C4R, "nppiNormDiff_L1_32f_C4R");

  --* @}  
  --* @name Masked NormDiff_L1
  -- * See \ref masked_operation.
  -- * @{
  --  

  --*
  -- * Masked one-channel 8-bit unsigned image NormDiff_L1.
  -- * 
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormDiff Pointer to the computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL1GetBufferHostSize_8u_C1MR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiNormDiff_L1_8u_C1MR
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7090
   pragma Import (C, nppiNormDiff_L1_8u_C1MR, "nppiNormDiff_L1_8u_C1MR");

  --*
  -- * Masked one-channel 8-bit signed image NormDiff_L1.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormDiff Pointer to the computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL1GetBufferHostSize_8s_C1MR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiNormDiff_L1_8s_C1MR
     (pSrc1 : access nppdefs_h.Npp8s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8s;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7110
   pragma Import (C, nppiNormDiff_L1_8s_C1MR, "nppiNormDiff_L1_8s_C1MR");

  --*
  -- * Masked one-channel 16-bit unsigned image NormDiff_L1.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormDiff Pointer to the computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL1GetBufferHostSize_16u_C1MR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiNormDiff_L1_16u_C1MR
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7130
   pragma Import (C, nppiNormDiff_L1_16u_C1MR, "nppiNormDiff_L1_16u_C1MR");

  --*
  -- * Masked one-channel 32-bit floating point image NormDiff_L1.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormDiff Pointer to the computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL1GetBufferHostSize_32f_C1MR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if 
  -- * an invalid floating-point image is specified.
  -- 

   function nppiNormDiff_L1_32f_C1MR
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7151
   pragma Import (C, nppiNormDiff_L1_32f_C1MR, "nppiNormDiff_L1_32f_C1MR");

  --* @}  
  --* @name Masked Channel NormDiff_L1
  -- * See \ref masked_operation and \ref channel_of_interest.
  -- * @{
  --  

  --*
  -- * Masked three-channel 8-bit unsigned image NormDiff_L1 affecting only single channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pNormDiff Pointer to the computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL1GetBufferHostSize_8u_C3CMR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.
  -- 

   function nppiNormDiff_L1_8u_C3CMR
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7178
   pragma Import (C, nppiNormDiff_L1_8u_C3CMR, "nppiNormDiff_L1_8u_C3CMR");

  --*
  -- * Masked three-channel 8-bit signed image NormDiff_L1 affecting only single channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pNormDiff Pointer to the computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL1GetBufferHostSize_8s_C3CMR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.
  -- 

   function nppiNormDiff_L1_8s_C3CMR
     (pSrc1 : access nppdefs_h.Npp8s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8s;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7199
   pragma Import (C, nppiNormDiff_L1_8s_C3CMR, "nppiNormDiff_L1_8s_C3CMR");

  --*
  -- * Masked three-channel 16-bit unsigned image NormDiff_L1 affecting only single channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pNormDiff Pointer to the computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL1GetBufferHostSize_16u_C3CMR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.
  -- 

   function nppiNormDiff_L1_16u_C3CMR
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7220
   pragma Import (C, nppiNormDiff_L1_16u_C3CMR, "nppiNormDiff_L1_16u_C3CMR");

  --*
  -- * Masked three-channel 32-bit floating point image NormDiff_L1 affecting only single channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pNormDiff Pointer to the computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL1GetBufferHostSize_32f_C3CMR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_COI_ERROR if an invalid channel 
  -- * of interest is specified, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.
  -- 

   function nppiNormDiff_L1_32f_C3CMR
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7242
   pragma Import (C, nppiNormDiff_L1_32f_C3CMR, "nppiNormDiff_L1_32f_C3CMR");

  --* @}  
  --* @name NormDiffL1GetBufferHostSize
  -- * Companion primitives for computing the device buffer size (in bytes) required by the NormDiff_L1 primitives.
  -- * @{
  --  

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_8u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL1GetBufferHostSize_8u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7260
   pragma Import (C, nppiNormDiffL1GetBufferHostSize_8u_C1R, "nppiNormDiffL1GetBufferHostSize_8u_C1R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_16u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL1GetBufferHostSize_16u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7270
   pragma Import (C, nppiNormDiffL1GetBufferHostSize_16u_C1R, "nppiNormDiffL1GetBufferHostSize_16u_C1R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_16s_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL1GetBufferHostSize_16s_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7280
   pragma Import (C, nppiNormDiffL1GetBufferHostSize_16s_C1R, "nppiNormDiffL1GetBufferHostSize_16s_C1R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_32f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL1GetBufferHostSize_32f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7290
   pragma Import (C, nppiNormDiffL1GetBufferHostSize_32f_C1R, "nppiNormDiffL1GetBufferHostSize_32f_C1R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_8u_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL1GetBufferHostSize_8u_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7300
   pragma Import (C, nppiNormDiffL1GetBufferHostSize_8u_C1MR, "nppiNormDiffL1GetBufferHostSize_8u_C1MR");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_8s_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL1GetBufferHostSize_8s_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7310
   pragma Import (C, nppiNormDiffL1GetBufferHostSize_8s_C1MR, "nppiNormDiffL1GetBufferHostSize_8s_C1MR");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_16u_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL1GetBufferHostSize_16u_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7320
   pragma Import (C, nppiNormDiffL1GetBufferHostSize_16u_C1MR, "nppiNormDiffL1GetBufferHostSize_16u_C1MR");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_32f_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL1GetBufferHostSize_32f_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7330
   pragma Import (C, nppiNormDiffL1GetBufferHostSize_32f_C1MR, "nppiNormDiffL1GetBufferHostSize_32f_C1MR");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_8u_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL1GetBufferHostSize_8u_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7340
   pragma Import (C, nppiNormDiffL1GetBufferHostSize_8u_C3R, "nppiNormDiffL1GetBufferHostSize_8u_C3R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_16u_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL1GetBufferHostSize_16u_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7350
   pragma Import (C, nppiNormDiffL1GetBufferHostSize_16u_C3R, "nppiNormDiffL1GetBufferHostSize_16u_C3R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_16s_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL1GetBufferHostSize_16s_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7360
   pragma Import (C, nppiNormDiffL1GetBufferHostSize_16s_C3R, "nppiNormDiffL1GetBufferHostSize_16s_C3R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_32f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL1GetBufferHostSize_32f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7370
   pragma Import (C, nppiNormDiffL1GetBufferHostSize_32f_C3R, "nppiNormDiffL1GetBufferHostSize_32f_C3R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_8u_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL1GetBufferHostSize_8u_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7380
   pragma Import (C, nppiNormDiffL1GetBufferHostSize_8u_C4R, "nppiNormDiffL1GetBufferHostSize_8u_C4R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_16u_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL1GetBufferHostSize_16u_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7390
   pragma Import (C, nppiNormDiffL1GetBufferHostSize_16u_C4R, "nppiNormDiffL1GetBufferHostSize_16u_C4R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_16s_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL1GetBufferHostSize_16s_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7400
   pragma Import (C, nppiNormDiffL1GetBufferHostSize_16s_C4R, "nppiNormDiffL1GetBufferHostSize_16s_C4R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_32f_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL1GetBufferHostSize_32f_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7410
   pragma Import (C, nppiNormDiffL1GetBufferHostSize_32f_C4R, "nppiNormDiffL1GetBufferHostSize_32f_C4R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_8u_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL1GetBufferHostSize_8u_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7420
   pragma Import (C, nppiNormDiffL1GetBufferHostSize_8u_AC4R, "nppiNormDiffL1GetBufferHostSize_8u_AC4R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_16u_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL1GetBufferHostSize_16u_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7430
   pragma Import (C, nppiNormDiffL1GetBufferHostSize_16u_AC4R, "nppiNormDiffL1GetBufferHostSize_16u_AC4R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_16s_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL1GetBufferHostSize_16s_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7440
   pragma Import (C, nppiNormDiffL1GetBufferHostSize_16s_AC4R, "nppiNormDiffL1GetBufferHostSize_16s_AC4R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_32f_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL1GetBufferHostSize_32f_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7450
   pragma Import (C, nppiNormDiffL1GetBufferHostSize_32f_AC4R, "nppiNormDiffL1GetBufferHostSize_32f_AC4R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_8u_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL1GetBufferHostSize_8u_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7460
   pragma Import (C, nppiNormDiffL1GetBufferHostSize_8u_C3CMR, "nppiNormDiffL1GetBufferHostSize_8u_C3CMR");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_8s_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL1GetBufferHostSize_8s_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7470
   pragma Import (C, nppiNormDiffL1GetBufferHostSize_8s_C3CMR, "nppiNormDiffL1GetBufferHostSize_8s_C3CMR");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_16u_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL1GetBufferHostSize_16u_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7480
   pragma Import (C, nppiNormDiffL1GetBufferHostSize_16u_C3CMR, "nppiNormDiffL1GetBufferHostSize_16u_C3CMR");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_32f_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL1GetBufferHostSize_32f_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7490
   pragma Import (C, nppiNormDiffL1GetBufferHostSize_32f_C3CMR, "nppiNormDiffL1GetBufferHostSize_32f_C3CMR");

  --* @}  
  --* @} image_L1_normdiff  
  --* @defgroup image_L2_normdiff NormDiff_L2
  -- * Primitives for computing the L2 norm of difference of pixels between two images.
  -- * @{
  --  

  --* @name Basic NormDiff_L2
  -- * @{
  --  

  --*
  -- * One-channel 8-bit unsigned image NormDiff_L2.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormDiff Pointer to the computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL2GetBufferHostSize_8u_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiNormDiff_L2_8u_C1R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7514
   pragma Import (C, nppiNormDiff_L2_8u_C1R, "nppiNormDiff_L2_8u_C1R");

  --*
  -- * One-channel 16-bit unsigned image NormDiff_L2.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormDiff Pointer to the computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL2GetBufferHostSize_16u_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiNormDiff_L2_16u_C1R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7531
   pragma Import (C, nppiNormDiff_L2_16u_C1R, "nppiNormDiff_L2_16u_C1R");

  --*
  -- * One-channel 16-bit signed image NormDiff_L2.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormDiff Pointer to the computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL2GetBufferHostSize_16s_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiNormDiff_L2_16s_C1R
     (pSrc1 : access nppdefs_h.Npp16s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7548
   pragma Import (C, nppiNormDiff_L2_16s_C1R, "nppiNormDiff_L2_16s_C1R");

  --*
  -- * One-channel 32-bit floating point image NormDiff_L2.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormDiff Pointer to the computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL2GetBufferHostSize_32f_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiNormDiff_L2_32f_C1R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7566
   pragma Import (C, nppiNormDiff_L2_32f_C1R, "nppiNormDiff_L2_32f_C1R");

  --*
  -- * Three-channel 8-bit unsigned image NormDiff_L2.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormDiff Array that contains computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL2GetBufferHostSize_8u_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiNormDiff_L2_8u_C3R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7583
   pragma Import (C, nppiNormDiff_L2_8u_C3R, "nppiNormDiff_L2_8u_C3R");

  --*
  -- * Three-channel 16-bit unsigned image NormDiff_L2.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormDiff Array that contains computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL2GetBufferHostSize_16u_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiNormDiff_L2_16u_C3R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7600
   pragma Import (C, nppiNormDiff_L2_16u_C3R, "nppiNormDiff_L2_16u_C3R");

  --*
  -- * Three-channel 16-bit signed image NormDiff_L2.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormDiff Array that contains computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL2GetBufferHostSize_16s_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiNormDiff_L2_16s_C3R
     (pSrc1 : access nppdefs_h.Npp16s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7617
   pragma Import (C, nppiNormDiff_L2_16s_C3R, "nppiNormDiff_L2_16s_C3R");

  --*
  -- * Three-channel 32-bit floating point image NormDiff_L2.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormDiff Array that contains computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL2GetBufferHostSize_32f_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if 
  -- * an invalid floating-point image is specified.
  -- 

   function nppiNormDiff_L2_32f_C3R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7635
   pragma Import (C, nppiNormDiff_L2_32f_C3R, "nppiNormDiff_L2_32f_C3R");

  --*
  -- * Four-channel 8-bit unsigned image NormDiff_L2 ignoring alpha channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormDiff Array that contains computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL2GetBufferHostSize_8u_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiNormDiff_L2_8u_AC4R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7652
   pragma Import (C, nppiNormDiff_L2_8u_AC4R, "nppiNormDiff_L2_8u_AC4R");

  --*
  -- * Four-channel 16-bit unsigned image NormDiff_L2 ignoring alpha channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormDiff Array that contains computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL2GetBufferHostSize_16u_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiNormDiff_L2_16u_AC4R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7669
   pragma Import (C, nppiNormDiff_L2_16u_AC4R, "nppiNormDiff_L2_16u_AC4R");

  --*
  -- * Four-channel 16-bit signed image NormDiff_L2 ignoring alpha channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormDiff Array that contains computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL2GetBufferHostSize_16s_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiNormDiff_L2_16s_AC4R
     (pSrc1 : access nppdefs_h.Npp16s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7686
   pragma Import (C, nppiNormDiff_L2_16s_AC4R, "nppiNormDiff_L2_16s_AC4R");

  --*
  -- * Four-channel 32-bit floating point image NormDiff_L2 ignoring alpha channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormDiff Array that contains computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL2GetBufferHostSize_32f_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if 
  -- * an invalid floating-point image is specified.
  -- 

   function nppiNormDiff_L2_32f_AC4R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7704
   pragma Import (C, nppiNormDiff_L2_32f_AC4R, "nppiNormDiff_L2_32f_AC4R");

  --*
  -- * Four-channel 8-bit unsigned image NormDiff_L2.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormDiff Array that contains computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL2GetBufferHostSize_8u_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiNormDiff_L2_8u_C4R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7721
   pragma Import (C, nppiNormDiff_L2_8u_C4R, "nppiNormDiff_L2_8u_C4R");

  --*
  -- * Four-channel 16-bit unsigned image NormDiff_L2.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormDiff Array that contains computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL2GetBufferHostSize_16u_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiNormDiff_L2_16u_C4R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7738
   pragma Import (C, nppiNormDiff_L2_16u_C4R, "nppiNormDiff_L2_16u_C4R");

  --*
  -- * Four-channel 16-bit signed image NormDiff_L2.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormDiff Array that contains computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL2GetBufferHostSize_16s_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiNormDiff_L2_16s_C4R
     (pSrc1 : access nppdefs_h.Npp16s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7755
   pragma Import (C, nppiNormDiff_L2_16s_C4R, "nppiNormDiff_L2_16s_C4R");

  --*
  -- * Four-channel 32-bit floating point image NormDiff_L2.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormDiff Array that contains computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL2GetBufferHostSize_32f_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if 
  -- * an invalid floating-point image is specified.
  -- 

   function nppiNormDiff_L2_32f_C4R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7773
   pragma Import (C, nppiNormDiff_L2_32f_C4R, "nppiNormDiff_L2_32f_C4R");

  --* @}  
  --* @name Masked NormDiff_L2
  -- * See \ref masked_operation.
  -- * @{
  --  

  --*
  -- * Masked one-channel 8-bit unsigned image NormDiff_L2.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormDiff Pointer to the computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL2GetBufferHostSize_8u_C1MR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiNormDiff_L2_8u_C1MR
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7798
   pragma Import (C, nppiNormDiff_L2_8u_C1MR, "nppiNormDiff_L2_8u_C1MR");

  --*
  -- * Masked one-channel 8-bit signed image NormDiff_L2.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormDiff Pointer to the computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL2GetBufferHostSize_8s_C1MR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiNormDiff_L2_8s_C1MR
     (pSrc1 : access nppdefs_h.Npp8s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8s;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7818
   pragma Import (C, nppiNormDiff_L2_8s_C1MR, "nppiNormDiff_L2_8s_C1MR");

  --*
  -- * Masked one-channel 16-bit unsigned image NormDiff_L2.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormDiff Pointer to the computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL2GetBufferHostSize_16u_C1MR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiNormDiff_L2_16u_C1MR
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7838
   pragma Import (C, nppiNormDiff_L2_16u_C1MR, "nppiNormDiff_L2_16u_C1MR");

  --*
  -- * Masked one-channel 32-bit floating point image NormDiff_L2.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormDiff Pointer to the computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL2GetBufferHostSize_32f_C1MR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if 
  -- * an invalid floating-point image is specified.
  -- 

   function nppiNormDiff_L2_32f_C1MR
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7859
   pragma Import (C, nppiNormDiff_L2_32f_C1MR, "nppiNormDiff_L2_32f_C1MR");

  --* @}  
  --* @name Masked Channel NormDiff_L2
  -- * See \ref masked_operation and \ref channel_of_interest.
  -- * @{
  --  

  --*
  -- * Masked three-channel 8-bit unsigned image NormDiff_L2 affecting only single channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pNormDiff Pointer to the computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL2GetBufferHostSize_8u_C3CMR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.
  -- 

   function nppiNormDiff_L2_8u_C3CMR
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7885
   pragma Import (C, nppiNormDiff_L2_8u_C3CMR, "nppiNormDiff_L2_8u_C3CMR");

  --*
  -- * Masked three-channel 8-bit signed image NormDiff_L2 affecting only single channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pNormDiff Pointer to the computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL2GetBufferHostSize_8s_C3CMR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.
  -- 

   function nppiNormDiff_L2_8s_C3CMR
     (pSrc1 : access nppdefs_h.Npp8s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8s;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7906
   pragma Import (C, nppiNormDiff_L2_8s_C3CMR, "nppiNormDiff_L2_8s_C3CMR");

  --*
  -- * Masked three-channel 16-bit unsigned image NormDiff_L2 affecting only single channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pNormDiff Pointer to the computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL2GetBufferHostSize_16u_C3CMR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.
  -- 

   function nppiNormDiff_L2_16u_C3CMR
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7927
   pragma Import (C, nppiNormDiff_L2_16u_C3CMR, "nppiNormDiff_L2_16u_C3CMR");

  --*
  -- * Masked three-channel 32-bit floating point image NormDiff_L2 affecting only single channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pNormDiff Pointer to the computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormDiffL2GetBufferHostSize_32f_C3CMR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_COI_ERROR if an invalid channel 
  -- * of interest is specified, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.
  -- 

   function nppiNormDiff_L2_32f_C3CMR
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pNormDiff : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7949
   pragma Import (C, nppiNormDiff_L2_32f_C3CMR, "nppiNormDiff_L2_32f_C3CMR");

  --* @}  
  --* @name NormDiffL2GetBufferHostSize
  -- * Companion primitives for computing the device buffer size (in bytes) required by the NormDiff_L2 primitives.
  -- * @{
  --  

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_8u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL2GetBufferHostSize_8u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7967
   pragma Import (C, nppiNormDiffL2GetBufferHostSize_8u_C1R, "nppiNormDiffL2GetBufferHostSize_8u_C1R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_16u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL2GetBufferHostSize_16u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7977
   pragma Import (C, nppiNormDiffL2GetBufferHostSize_16u_C1R, "nppiNormDiffL2GetBufferHostSize_16u_C1R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_16s_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL2GetBufferHostSize_16s_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7987
   pragma Import (C, nppiNormDiffL2GetBufferHostSize_16s_C1R, "nppiNormDiffL2GetBufferHostSize_16s_C1R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_32f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL2GetBufferHostSize_32f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:7997
   pragma Import (C, nppiNormDiffL2GetBufferHostSize_32f_C1R, "nppiNormDiffL2GetBufferHostSize_32f_C1R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_8u_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL2GetBufferHostSize_8u_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8007
   pragma Import (C, nppiNormDiffL2GetBufferHostSize_8u_C1MR, "nppiNormDiffL2GetBufferHostSize_8u_C1MR");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_8s_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL2GetBufferHostSize_8s_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8017
   pragma Import (C, nppiNormDiffL2GetBufferHostSize_8s_C1MR, "nppiNormDiffL2GetBufferHostSize_8s_C1MR");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_16u_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL2GetBufferHostSize_16u_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8027
   pragma Import (C, nppiNormDiffL2GetBufferHostSize_16u_C1MR, "nppiNormDiffL2GetBufferHostSize_16u_C1MR");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_32f_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL2GetBufferHostSize_32f_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8037
   pragma Import (C, nppiNormDiffL2GetBufferHostSize_32f_C1MR, "nppiNormDiffL2GetBufferHostSize_32f_C1MR");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_8u_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL2GetBufferHostSize_8u_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8047
   pragma Import (C, nppiNormDiffL2GetBufferHostSize_8u_C3R, "nppiNormDiffL2GetBufferHostSize_8u_C3R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_16u_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL2GetBufferHostSize_16u_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8057
   pragma Import (C, nppiNormDiffL2GetBufferHostSize_16u_C3R, "nppiNormDiffL2GetBufferHostSize_16u_C3R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_16s_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL2GetBufferHostSize_16s_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8067
   pragma Import (C, nppiNormDiffL2GetBufferHostSize_16s_C3R, "nppiNormDiffL2GetBufferHostSize_16s_C3R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_32f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL2GetBufferHostSize_32f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8077
   pragma Import (C, nppiNormDiffL2GetBufferHostSize_32f_C3R, "nppiNormDiffL2GetBufferHostSize_32f_C3R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_8u_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL2GetBufferHostSize_8u_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8087
   pragma Import (C, nppiNormDiffL2GetBufferHostSize_8u_C4R, "nppiNormDiffL2GetBufferHostSize_8u_C4R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_16u_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL2GetBufferHostSize_16u_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8097
   pragma Import (C, nppiNormDiffL2GetBufferHostSize_16u_C4R, "nppiNormDiffL2GetBufferHostSize_16u_C4R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_16s_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL2GetBufferHostSize_16s_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8107
   pragma Import (C, nppiNormDiffL2GetBufferHostSize_16s_C4R, "nppiNormDiffL2GetBufferHostSize_16s_C4R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_32f_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL2GetBufferHostSize_32f_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8117
   pragma Import (C, nppiNormDiffL2GetBufferHostSize_32f_C4R, "nppiNormDiffL2GetBufferHostSize_32f_C4R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_8u_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL2GetBufferHostSize_8u_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8127
   pragma Import (C, nppiNormDiffL2GetBufferHostSize_8u_AC4R, "nppiNormDiffL2GetBufferHostSize_8u_AC4R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_16u_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL2GetBufferHostSize_16u_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8137
   pragma Import (C, nppiNormDiffL2GetBufferHostSize_16u_AC4R, "nppiNormDiffL2GetBufferHostSize_16u_AC4R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_16s_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL2GetBufferHostSize_16s_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8147
   pragma Import (C, nppiNormDiffL2GetBufferHostSize_16s_AC4R, "nppiNormDiffL2GetBufferHostSize_16s_AC4R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_32f_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL2GetBufferHostSize_32f_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8157
   pragma Import (C, nppiNormDiffL2GetBufferHostSize_32f_AC4R, "nppiNormDiffL2GetBufferHostSize_32f_AC4R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_8u_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL2GetBufferHostSize_8u_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8167
   pragma Import (C, nppiNormDiffL2GetBufferHostSize_8u_C3CMR, "nppiNormDiffL2GetBufferHostSize_8u_C3CMR");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_8s_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL2GetBufferHostSize_8s_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8177
   pragma Import (C, nppiNormDiffL2GetBufferHostSize_8s_C3CMR, "nppiNormDiffL2GetBufferHostSize_8s_C3CMR");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_16u_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL2GetBufferHostSize_16u_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8187
   pragma Import (C, nppiNormDiffL2GetBufferHostSize_16u_C3CMR, "nppiNormDiffL2GetBufferHostSize_16u_C3CMR");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_32f_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormDiffL2GetBufferHostSize_32f_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8197
   pragma Import (C, nppiNormDiffL2GetBufferHostSize_32f_C3CMR, "nppiNormDiffL2GetBufferHostSize_32f_C3CMR");

  --* @}  
  --* @} image_L2_normdiff  
  --* @defgroup image_inf_normrel NormRel_Inf
  -- * Primitives for computing the relative error of infinity norm between two images.
  -- * @{
  --  

  --* @name Basic NormRel_Inf
  -- * @{
  --  

  --*
  -- * One-channel 8-bit unsigned image NormRel_Inf.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormRel Pointer to the computed relative error for the infinity norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelInfGetBufferHostSize_8u_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_DIVISOR_ERROR if the infinity
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_Inf_8u_C1R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8222
   pragma Import (C, nppiNormRel_Inf_8u_C1R, "nppiNormRel_Inf_8u_C1R");

  --*
  -- * One-channel 16-bit unsigned image NormRel_Inf.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormRel Pointer to the computed relative error for the infinity norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelInfGetBufferHostSize_16u_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_DIVISOR_ERROR if the infinity
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_Inf_16u_C1R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8240
   pragma Import (C, nppiNormRel_Inf_16u_C1R, "nppiNormRel_Inf_16u_C1R");

  --*
  -- * One-channel 16-bit signed image NormRel_Inf.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormRel Pointer to the computed relative error for the infinity norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelInfGetBufferHostSize_16s_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_DIVISOR_ERROR if the infinity
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_Inf_16s_C1R
     (pSrc1 : access nppdefs_h.Npp16s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8258
   pragma Import (C, nppiNormRel_Inf_16s_C1R, "nppiNormRel_Inf_16s_C1R");

  --*
  -- * One-channel 32-bit floating point image NormRel_Inf.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormRel Pointer to the computed relative error for the infinity norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelInfGetBufferHostSize_32f_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified, or NPP_DIVISOR_ERROR if the infinity
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_Inf_32f_C1R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8277
   pragma Import (C, nppiNormRel_Inf_32f_C1R, "nppiNormRel_Inf_32f_C1R");

  --*
  -- * Three-channel 8-bit unsigned image NormRel_Inf.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormRel Array that contains the computed relative error for the infinity norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelInfGetBufferHostSize_8u_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_DIVISOR_ERROR if the infinity
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_Inf_8u_C3R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8295
   pragma Import (C, nppiNormRel_Inf_8u_C3R, "nppiNormRel_Inf_8u_C3R");

  --*
  -- * Three-channel 16-bit unsigned image NormRel_Inf.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormRel Array that contains the computed relative error for the infinity norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelInfGetBufferHostSize_16u_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_DIVISOR_ERROR if the infinity
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_Inf_16u_C3R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8313
   pragma Import (C, nppiNormRel_Inf_16u_C3R, "nppiNormRel_Inf_16u_C3R");

  --*
  -- * Three-channel 16-bit signed image NormRel_Inf.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormRel Array that contains the computed relative error for the infinity norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelInfGetBufferHostSize_16s_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_DIVISOR_ERROR if the infinity
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_Inf_16s_C3R
     (pSrc1 : access nppdefs_h.Npp16s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8331
   pragma Import (C, nppiNormRel_Inf_16s_C3R, "nppiNormRel_Inf_16s_C3R");

  --*
  -- * Three-channel 32-bit floating point image NormRel_Inf.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormRel Array that contains the computed relative error for the infinity norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelInfGetBufferHostSize_32f_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if 
  -- * an invalid floating-point image is specified, or NPP_DIVISOR_ERROR if the infinity
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_Inf_32f_C3R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8350
   pragma Import (C, nppiNormRel_Inf_32f_C3R, "nppiNormRel_Inf_32f_C3R");

  --*
  -- * Four-channel 8-bit unsigned image NormRel_Inf ignoring alpha channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormRel Array that contains the computed relative error for the infinity norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelInfGetBufferHostSize_8u_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_DIVISOR_ERROR if the infinity
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_Inf_8u_AC4R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8368
   pragma Import (C, nppiNormRel_Inf_8u_AC4R, "nppiNormRel_Inf_8u_AC4R");

  --*
  -- * Four-channel 16-bit unsigned image NormRel_Inf ignoring alpha channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormRel Array that contains the computed relative error for the infinity norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelInfGetBufferHostSize_16u_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_DIVISOR_ERROR if the infinity
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_Inf_16u_AC4R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8386
   pragma Import (C, nppiNormRel_Inf_16u_AC4R, "nppiNormRel_Inf_16u_AC4R");

  --*
  -- * Four-channel 16-bit signed image NormRel_Inf ignoring alpha channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormRel Array that contains the computed relative error for the infinity norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelInfGetBufferHostSize_16s_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_DIVISOR_ERROR if the infinity
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_Inf_16s_AC4R
     (pSrc1 : access nppdefs_h.Npp16s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8404
   pragma Import (C, nppiNormRel_Inf_16s_AC4R, "nppiNormRel_Inf_16s_AC4R");

  --*
  -- * Four-channel 32-bit floating point image NormRel_Inf ignoring alpha channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormRel Array that contains the computed relative error for the infinity norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelInfGetBufferHostSize_32f_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if 
  -- * an invalid floating-point image is specified, or NPP_DIVISOR_ERROR if the infinity
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_Inf_32f_AC4R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8423
   pragma Import (C, nppiNormRel_Inf_32f_AC4R, "nppiNormRel_Inf_32f_AC4R");

  --*
  -- * Four-channel 8-bit unsigned image NormRel_Inf.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormRel Array that contains the computed relative error for the infinity norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelInfGetBufferHostSize_8u_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_DIVISOR_ERROR if the infinity
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_Inf_8u_C4R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8441
   pragma Import (C, nppiNormRel_Inf_8u_C4R, "nppiNormRel_Inf_8u_C4R");

  --*
  -- * Four-channel 16-bit unsigned image NormRel_Inf.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormRel Array that contains the computed relative error for the infinity norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelInfGetBufferHostSize_16u_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_DIVISOR_ERROR if the infinity
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_Inf_16u_C4R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8459
   pragma Import (C, nppiNormRel_Inf_16u_C4R, "nppiNormRel_Inf_16u_C4R");

  --*
  -- * Four-channel 16-bit signed image NormRel_Inf.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormRel Array that contains the computed relative error for the infinity norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelInfGetBufferHostSize_16s_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_DIVISOR_ERROR if the infinity
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_Inf_16s_C4R
     (pSrc1 : access nppdefs_h.Npp16s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8477
   pragma Import (C, nppiNormRel_Inf_16s_C4R, "nppiNormRel_Inf_16s_C4R");

  --*
  -- * Four-channel 32-bit floating point image NormRel_Inf.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormRel Array that contains the computed relative error for the infinity norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelInfGetBufferHostSize_32f_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if 
  -- * an invalid floating-point image is specified, or NPP_DIVISOR_ERROR if the infinity
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_Inf_32f_C4R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8496
   pragma Import (C, nppiNormRel_Inf_32f_C4R, "nppiNormRel_Inf_32f_C4R");

  --* @}  
  --* @name Masked NormRel_Inf
  -- * See \ref masked_operation.
  -- * @{
  --  

  --*
  -- * Masked one-channel 8-bit unsigned image NormRel_Inf.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormRel Pointer to the computed relative error for the infinity norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelInfGetBufferHostSize_8u_C1MR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_DIVISOR_ERROR if the infinity
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_Inf_8u_C1MR
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8522
   pragma Import (C, nppiNormRel_Inf_8u_C1MR, "nppiNormRel_Inf_8u_C1MR");

  --*
  -- * Masked one-channel 8-bit signed image NormRel_Inf.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormRel Pointer to the computed relative error for the infinity norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelInfGetBufferHostSize_8s_C1MR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_DIVISOR_ERROR if the infinity
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_Inf_8s_C1MR
     (pSrc1 : access nppdefs_h.Npp8s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8s;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8543
   pragma Import (C, nppiNormRel_Inf_8s_C1MR, "nppiNormRel_Inf_8s_C1MR");

  --*
  -- * Masked one-channel 16-bit unsigned image NormRel_Inf.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormRel Pointer to the computed relative error for the infinity norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelInfGetBufferHostSize_16u_C1MR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_DIVISOR_ERROR if the infinity
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_Inf_16u_C1MR
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8564
   pragma Import (C, nppiNormRel_Inf_16u_C1MR, "nppiNormRel_Inf_16u_C1MR");

  --*
  -- * Masked one-channel 32-bit floating point image NormRel_Inf.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormRel Pointer to the computed relative error for the infinity norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelInfGetBufferHostSize_32f_C1MR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if 
  -- * an invalid floating-point image is specified, or NPP_DIVISOR_ERROR if the infinity
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_Inf_32f_C1MR
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8586
   pragma Import (C, nppiNormRel_Inf_32f_C1MR, "nppiNormRel_Inf_32f_C1MR");

  --* @}  
  --* @name Masked Channel NormRel_Inf
  -- * See \ref masked_operation and \ref channel_of_interest.
  -- * @{
  --  

  --*
  -- * Masked three-channel 8-bit unsigned image NormRel_Inf affecting only signle channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pNormRel Pointer to the computed relative error for the infinity norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelInfGetBufferHostSize_8u_C3CMR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, NPP_COI_ERROR if an 
  -- * invalid channel of interest is specified, or NPP_DIVISOR_ERROR if the infinity
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_Inf_8u_C3CMR
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8615
   pragma Import (C, nppiNormRel_Inf_8u_C3CMR, "nppiNormRel_Inf_8u_C3CMR");

  --*
  -- * Masked three-channel 8-bit signed image NormRel_Inf affecting only signle channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pNormRel Pointer to the computed relative error for the infinity norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelInfGetBufferHostSize_8s_C3CMR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, NPP_COI_ERROR if an invalid 
  -- * channel of interest is specified, or NPP_DIVISOR_ERROR if the infinity
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_Inf_8s_C3CMR
     (pSrc1 : access nppdefs_h.Npp8s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8s;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8638
   pragma Import (C, nppiNormRel_Inf_8s_C3CMR, "nppiNormRel_Inf_8s_C3CMR");

  --*
  -- * Masked three-channel 16-bit unsigned image NormRel_Inf affecting only signle channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pNormRel Pointer to the computed relative error for the infinity norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelInfGetBufferHostSize_16u_C3CMR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, NPP_COI_ERROR if an invalid 
  -- * channel of interest is specified, or NPP_DIVISOR_ERROR if the infinity
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_Inf_16u_C3CMR
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8661
   pragma Import (C, nppiNormRel_Inf_16u_C3CMR, "nppiNormRel_Inf_16u_C3CMR");

  --*
  -- * Masked three-channel 32-bit floating point image NormRel_Inf affecting only signle channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pNormRel Pointer to the computed relative error for the infinity norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelInfGetBufferHostSize_32f_C3CMR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, NPP_COI_ERROR if an invalid channel 
  -- * of interest is specified, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point 
  -- * image is specified, or NPP_DIVISOR_ERROR if the infinity norm of the second image is zero.
  -- 

   function nppiNormRel_Inf_32f_C3CMR
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8684
   pragma Import (C, nppiNormRel_Inf_32f_C3CMR, "nppiNormRel_Inf_32f_C3CMR");

  --* @}  
  --* @name NormRelInfGetBufferHostSize
  -- * Companion primitives for computing the device buffer size (in bytes) required by the NormRel_Inf primitives.
  -- * @{
  --  

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_8u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelInfGetBufferHostSize_8u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8702
   pragma Import (C, nppiNormRelInfGetBufferHostSize_8u_C1R, "nppiNormRelInfGetBufferHostSize_8u_C1R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_16u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelInfGetBufferHostSize_16u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8712
   pragma Import (C, nppiNormRelInfGetBufferHostSize_16u_C1R, "nppiNormRelInfGetBufferHostSize_16u_C1R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_16s_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelInfGetBufferHostSize_16s_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8722
   pragma Import (C, nppiNormRelInfGetBufferHostSize_16s_C1R, "nppiNormRelInfGetBufferHostSize_16s_C1R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_32s_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelInfGetBufferHostSize_32s_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8732
   pragma Import (C, nppiNormRelInfGetBufferHostSize_32s_C1R, "nppiNormRelInfGetBufferHostSize_32s_C1R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_32f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelInfGetBufferHostSize_32f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8742
   pragma Import (C, nppiNormRelInfGetBufferHostSize_32f_C1R, "nppiNormRelInfGetBufferHostSize_32f_C1R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_8u_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelInfGetBufferHostSize_8u_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8752
   pragma Import (C, nppiNormRelInfGetBufferHostSize_8u_C1MR, "nppiNormRelInfGetBufferHostSize_8u_C1MR");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_8s_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelInfGetBufferHostSize_8s_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8762
   pragma Import (C, nppiNormRelInfGetBufferHostSize_8s_C1MR, "nppiNormRelInfGetBufferHostSize_8s_C1MR");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_16u_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelInfGetBufferHostSize_16u_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8772
   pragma Import (C, nppiNormRelInfGetBufferHostSize_16u_C1MR, "nppiNormRelInfGetBufferHostSize_16u_C1MR");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_32f_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelInfGetBufferHostSize_32f_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8782
   pragma Import (C, nppiNormRelInfGetBufferHostSize_32f_C1MR, "nppiNormRelInfGetBufferHostSize_32f_C1MR");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_8u_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelInfGetBufferHostSize_8u_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8792
   pragma Import (C, nppiNormRelInfGetBufferHostSize_8u_C3R, "nppiNormRelInfGetBufferHostSize_8u_C3R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_16u_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelInfGetBufferHostSize_16u_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8802
   pragma Import (C, nppiNormRelInfGetBufferHostSize_16u_C3R, "nppiNormRelInfGetBufferHostSize_16u_C3R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_16s_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelInfGetBufferHostSize_16s_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8812
   pragma Import (C, nppiNormRelInfGetBufferHostSize_16s_C3R, "nppiNormRelInfGetBufferHostSize_16s_C3R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_32f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelInfGetBufferHostSize_32f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8822
   pragma Import (C, nppiNormRelInfGetBufferHostSize_32f_C3R, "nppiNormRelInfGetBufferHostSize_32f_C3R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_8u_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelInfGetBufferHostSize_8u_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8832
   pragma Import (C, nppiNormRelInfGetBufferHostSize_8u_C4R, "nppiNormRelInfGetBufferHostSize_8u_C4R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_16u_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelInfGetBufferHostSize_16u_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8842
   pragma Import (C, nppiNormRelInfGetBufferHostSize_16u_C4R, "nppiNormRelInfGetBufferHostSize_16u_C4R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_16s_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelInfGetBufferHostSize_16s_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8852
   pragma Import (C, nppiNormRelInfGetBufferHostSize_16s_C4R, "nppiNormRelInfGetBufferHostSize_16s_C4R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_32f_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelInfGetBufferHostSize_32f_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8862
   pragma Import (C, nppiNormRelInfGetBufferHostSize_32f_C4R, "nppiNormRelInfGetBufferHostSize_32f_C4R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_8u_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelInfGetBufferHostSize_8u_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8872
   pragma Import (C, nppiNormRelInfGetBufferHostSize_8u_AC4R, "nppiNormRelInfGetBufferHostSize_8u_AC4R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_16u_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelInfGetBufferHostSize_16u_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8882
   pragma Import (C, nppiNormRelInfGetBufferHostSize_16u_AC4R, "nppiNormRelInfGetBufferHostSize_16u_AC4R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_16s_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelInfGetBufferHostSize_16s_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8892
   pragma Import (C, nppiNormRelInfGetBufferHostSize_16s_AC4R, "nppiNormRelInfGetBufferHostSize_16s_AC4R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_32f_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelInfGetBufferHostSize_32f_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8902
   pragma Import (C, nppiNormRelInfGetBufferHostSize_32f_AC4R, "nppiNormRelInfGetBufferHostSize_32f_AC4R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_8u_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelInfGetBufferHostSize_8u_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8912
   pragma Import (C, nppiNormRelInfGetBufferHostSize_8u_C3CMR, "nppiNormRelInfGetBufferHostSize_8u_C3CMR");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_8s_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelInfGetBufferHostSize_8s_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8922
   pragma Import (C, nppiNormRelInfGetBufferHostSize_8s_C3CMR, "nppiNormRelInfGetBufferHostSize_8s_C3CMR");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_16u_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelInfGetBufferHostSize_16u_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8932
   pragma Import (C, nppiNormRelInfGetBufferHostSize_16u_C3CMR, "nppiNormRelInfGetBufferHostSize_16u_C3CMR");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_32f_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelInfGetBufferHostSize_32f_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8942
   pragma Import (C, nppiNormRelInfGetBufferHostSize_32f_C3CMR, "nppiNormRelInfGetBufferHostSize_32f_C3CMR");

  --* @}  
  --* @} image_inf_normrel  
  --* @defgroup image_L1_normrel NormRel_L1
  -- * Primitives for computing the relative error of L1 norm between two images.
  -- * @{
  --  

  --* @name Basic NormRel_L1
  -- * @{
  --  

  --*
  -- * One-channel 8-bit unsigned image NormRel_L1.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormRel Pointer to the computed relative error for the norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL1GetBufferHostSize_8u_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_DIVISOR_ERROR if the L1
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_L1_8u_C1R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8969
   pragma Import (C, nppiNormRel_L1_8u_C1R, "nppiNormRel_L1_8u_C1R");

  --*
  -- * One-channel 16-bit unsigned image NormRel_L1.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormRel Pointer to the computed relative error for the L1 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL1GetBufferHostSize_16u_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_DIVISOR_ERROR if the L1
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_L1_16u_C1R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:8987
   pragma Import (C, nppiNormRel_L1_16u_C1R, "nppiNormRel_L1_16u_C1R");

  --*
  -- * One-channel 16-bit signed image NormRel_L1.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormRel Pointer to the computed relative error for the L1 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL1GetBufferHostSize_16s_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_DIVISOR_ERROR if the L1
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_L1_16s_C1R
     (pSrc1 : access nppdefs_h.Npp16s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9005
   pragma Import (C, nppiNormRel_L1_16s_C1R, "nppiNormRel_L1_16s_C1R");

  --*
  -- * One-channel 32-bit floating point image NormRel_L1.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormRel Pointer to the computed relative error for the L1 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL1GetBufferHostSize_32f_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified, or NPP_DIVISOR_ERROR if the L1
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_L1_32f_C1R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9024
   pragma Import (C, nppiNormRel_L1_32f_C1R, "nppiNormRel_L1_32f_C1R");

  --*
  -- * Three-channel 8-bit unsigned image NormRel_L1.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormRel Array that contains the computed relative error for the L1 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL1GetBufferHostSize_8u_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_DIVISOR_ERROR if the L1
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_L1_8u_C3R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9042
   pragma Import (C, nppiNormRel_L1_8u_C3R, "nppiNormRel_L1_8u_C3R");

  --*
  -- * Three-channel 16-bit unsigned image NormRel_L1.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormRel Array that contains the computed relative error for the L1 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL1GetBufferHostSize_16u_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_DIVISOR_ERROR if the L1
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_L1_16u_C3R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9060
   pragma Import (C, nppiNormRel_L1_16u_C3R, "nppiNormRel_L1_16u_C3R");

  --*
  -- * Three-channel 16-bit signed image NormRel_L1.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormRel Array that contains the computed relative error for the L1 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL1GetBufferHostSize_16s_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_DIVISOR_ERROR if the L1
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_L1_16s_C3R
     (pSrc1 : access nppdefs_h.Npp16s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9078
   pragma Import (C, nppiNormRel_L1_16s_C3R, "nppiNormRel_L1_16s_C3R");

  --*
  -- * Three-channel 32-bit floating point image NormRel_L1.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormRel Array that contains the computed relative error for the L1 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL1GetBufferHostSize_32f_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if 
  -- * an invalid floating-point image is specified, or NPP_DIVISOR_ERROR if the L1
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_L1_32f_C3R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9097
   pragma Import (C, nppiNormRel_L1_32f_C3R, "nppiNormRel_L1_32f_C3R");

  --*
  -- * Four-channel 8-bit signed image NormRel_L1 ignoring alpha channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormRel Array that contains the computed relative error for the L1 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL1GetBufferHostSize_8u_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_DIVISOR_ERROR if the L1
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_L1_8u_AC4R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9115
   pragma Import (C, nppiNormRel_L1_8u_AC4R, "nppiNormRel_L1_8u_AC4R");

  --*
  -- * Four-channel 16-bit unsigned image NormRel_L1 ignoring alpha channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormRel Array that contains the computed relative error for the L1 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL1GetBufferHostSize_16u_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_DIVISOR_ERROR if the L1
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_L1_16u_AC4R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9133
   pragma Import (C, nppiNormRel_L1_16u_AC4R, "nppiNormRel_L1_16u_AC4R");

  --*
  -- * Four-channel 16-bit signed image NormRel_L1 ignoring alpha channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormRel Array that contains the computed relative error for the L1 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL1GetBufferHostSize_16s_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_DIVISOR_ERROR if the L1
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_L1_16s_AC4R
     (pSrc1 : access nppdefs_h.Npp16s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9151
   pragma Import (C, nppiNormRel_L1_16s_AC4R, "nppiNormRel_L1_16s_AC4R");

  --*
  -- * Four-channel 32-bit floating point image NormRel_L1 ignoring alpha channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormRel Array that contains the computed relative error for the L1 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL1GetBufferHostSize_32f_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if 
  -- * an invalid floating-point image is specified, or NPP_DIVISOR_ERROR if the L1
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_L1_32f_AC4R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9170
   pragma Import (C, nppiNormRel_L1_32f_AC4R, "nppiNormRel_L1_32f_AC4R");

  --*
  -- * Four-channel 8-bit unsigned image NormRel_L1.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormRel Array that contains the computed relative error for the L1 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL1GetBufferHostSize_8u_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_DIVISOR_ERROR if the L1
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_L1_8u_C4R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9188
   pragma Import (C, nppiNormRel_L1_8u_C4R, "nppiNormRel_L1_8u_C4R");

  --*
  -- * Four-channel 16-bit unsigned image NormRel_L1.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormRel Array that contains the computed relative error for the L1 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL1GetBufferHostSize_16u_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_DIVISOR_ERROR if the L1
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_L1_16u_C4R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9206
   pragma Import (C, nppiNormRel_L1_16u_C4R, "nppiNormRel_L1_16u_C4R");

  --*
  -- * Four-channel 16-bit signed image NormRel_L1.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormRel Array that contains the computed relative error for the L1 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL1GetBufferHostSize_16s_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_DIVISOR_ERROR if the L1
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_L1_16s_C4R
     (pSrc1 : access nppdefs_h.Npp16s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9224
   pragma Import (C, nppiNormRel_L1_16s_C4R, "nppiNormRel_L1_16s_C4R");

  --*
  -- * Four-channel 32-bit floating point image NormRel_L1.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormRel Array that contains the computed relative error for the L1 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL1GetBufferHostSize_32f_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if 
  -- * an invalid floating-point image is specified, or NPP_DIVISOR_ERROR if the L1
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_L1_32f_C4R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9243
   pragma Import (C, nppiNormRel_L1_32f_C4R, "nppiNormRel_L1_32f_C4R");

  --* @}  
  --* @name Masked NormRel_L1
  -- * See \ref masked_operation.
  -- * @{
  --  

  --*
  -- * One-channel 8-bit unsigned image NormRel_L1.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormRel Pointer to the computed relative error for the L1 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL1GetBufferHostSize_8u_C1MR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_DIVISOR_ERROR if the L1
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_L1_8u_C1MR
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9269
   pragma Import (C, nppiNormRel_L1_8u_C1MR, "nppiNormRel_L1_8u_C1MR");

  --*
  -- * One-channel 8-bit signed image NormRel_L1.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormRel Pointer to the computed relative error for the L1 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL1GetBufferHostSize_8s_C1MR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_DIVISOR_ERROR if the L1
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_L1_8s_C1MR
     (pSrc1 : access nppdefs_h.Npp8s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8s;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9290
   pragma Import (C, nppiNormRel_L1_8s_C1MR, "nppiNormRel_L1_8s_C1MR");

  --*
  -- * One-channel 16-bit unsigned image NormRel_L1.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormRel Pointer to the computed relative error for the L1 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL1GetBufferHostSize_16u_C1MR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_DIVISOR_ERROR if the L1
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_L1_16u_C1MR
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9311
   pragma Import (C, nppiNormRel_L1_16u_C1MR, "nppiNormRel_L1_16u_C1MR");

  --*
  -- * One-channel 32-bit floating point image NormRel_L1.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormRel Pointer to the computed relative error for the L1 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL1GetBufferHostSize_32f_C1MR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if 
  -- * an invalid floating-point image is specified, or NPP_DIVISOR_ERROR if the L1
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_L1_32f_C1MR
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9333
   pragma Import (C, nppiNormRel_L1_32f_C1MR, "nppiNormRel_L1_32f_C1MR");

  --* @}  
  --* @name Masked Channel NormRel_L1
  -- * See \ref masked_operation and \ref channel_of_interest.
  -- * @{
  --  

  --*
  -- * Masked three-channel 8-bit unsigned image NormRel_L1 affecting only single channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pNormRel Pointer to the computed relative error for the L1 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL1GetBufferHostSize_8u_C3CMR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_COI_ERROR if an invalid 
  -- * channel of interest is specified, or NPP_DIVISOR_ERROR if the L1 norm of the second image is zero.
  -- 

   function nppiNormRel_L1_8u_C3CMR
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9360
   pragma Import (C, nppiNormRel_L1_8u_C3CMR, "nppiNormRel_L1_8u_C3CMR");

  --*
  -- * Masked three-channel 8-bit signed image NormRel_L1 affecting only single channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pNormRel Pointer to the computed relative error for the L1 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL1GetBufferHostSize_8s_C3CMR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_COI_ERROR if an invalid 
  -- * channel of interest is specified, or NPP_DIVISOR_ERROR if the L1 norm of the second image is zero.
  -- 

   function nppiNormRel_L1_8s_C3CMR
     (pSrc1 : access nppdefs_h.Npp8s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8s;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9382
   pragma Import (C, nppiNormRel_L1_8s_C3CMR, "nppiNormRel_L1_8s_C3CMR");

  --*
  -- * Masked three-channel 16-bit unsigned image NormRel_L1 affecting only single channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pNormRel Pointer to the computed relative error for the L1 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL1GetBufferHostSize_16u_C3CMR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_COI_ERROR if an invalid 
  -- * channel of interest is specified, or NPP_DIVISOR_ERROR if the L1 norm of the second image is zero.
  -- 

   function nppiNormRel_L1_16u_C3CMR
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9404
   pragma Import (C, nppiNormRel_L1_16u_C3CMR, "nppiNormRel_L1_16u_C3CMR");

  --*
  -- * Masked three-channel 32-bit floating point image NormRel_L1 affecting only single channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pNormRel Pointer to the computed relative error for the L1 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL1GetBufferHostSize_32f_C3CMR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_COI_ERROR if an invalid channel 
  -- * of interest is specified, NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified, 
  -- * or NPP_DIVISOR_ERROR if the L1 norm of the second image is zero.
  -- 

   function nppiNormRel_L1_32f_C3CMR
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9427
   pragma Import (C, nppiNormRel_L1_32f_C3CMR, "nppiNormRel_L1_32f_C3CMR");

  --* @}  
  --* @name NormRelL1GetBufferHostSize
  -- * Companion primitives for computing the device buffer size (in bytes) required by the NormRel_L1 primitives.
  -- * @{
  --  

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_8u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL1GetBufferHostSize_8u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9445
   pragma Import (C, nppiNormRelL1GetBufferHostSize_8u_C1R, "nppiNormRelL1GetBufferHostSize_8u_C1R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_16u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL1GetBufferHostSize_16u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9455
   pragma Import (C, nppiNormRelL1GetBufferHostSize_16u_C1R, "nppiNormRelL1GetBufferHostSize_16u_C1R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_16s_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL1GetBufferHostSize_16s_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9465
   pragma Import (C, nppiNormRelL1GetBufferHostSize_16s_C1R, "nppiNormRelL1GetBufferHostSize_16s_C1R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_32f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL1GetBufferHostSize_32f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9475
   pragma Import (C, nppiNormRelL1GetBufferHostSize_32f_C1R, "nppiNormRelL1GetBufferHostSize_32f_C1R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_8u_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL1GetBufferHostSize_8u_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9485
   pragma Import (C, nppiNormRelL1GetBufferHostSize_8u_C1MR, "nppiNormRelL1GetBufferHostSize_8u_C1MR");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_8s_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL1GetBufferHostSize_8s_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9495
   pragma Import (C, nppiNormRelL1GetBufferHostSize_8s_C1MR, "nppiNormRelL1GetBufferHostSize_8s_C1MR");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_16u_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL1GetBufferHostSize_16u_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9505
   pragma Import (C, nppiNormRelL1GetBufferHostSize_16u_C1MR, "nppiNormRelL1GetBufferHostSize_16u_C1MR");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_32f_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL1GetBufferHostSize_32f_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9515
   pragma Import (C, nppiNormRelL1GetBufferHostSize_32f_C1MR, "nppiNormRelL1GetBufferHostSize_32f_C1MR");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_8u_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL1GetBufferHostSize_8u_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9525
   pragma Import (C, nppiNormRelL1GetBufferHostSize_8u_C3R, "nppiNormRelL1GetBufferHostSize_8u_C3R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_16u_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL1GetBufferHostSize_16u_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9535
   pragma Import (C, nppiNormRelL1GetBufferHostSize_16u_C3R, "nppiNormRelL1GetBufferHostSize_16u_C3R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_16s_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL1GetBufferHostSize_16s_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9545
   pragma Import (C, nppiNormRelL1GetBufferHostSize_16s_C3R, "nppiNormRelL1GetBufferHostSize_16s_C3R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_32f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL1GetBufferHostSize_32f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9555
   pragma Import (C, nppiNormRelL1GetBufferHostSize_32f_C3R, "nppiNormRelL1GetBufferHostSize_32f_C3R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_8u_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL1GetBufferHostSize_8u_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9565
   pragma Import (C, nppiNormRelL1GetBufferHostSize_8u_C4R, "nppiNormRelL1GetBufferHostSize_8u_C4R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_16u_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL1GetBufferHostSize_16u_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9575
   pragma Import (C, nppiNormRelL1GetBufferHostSize_16u_C4R, "nppiNormRelL1GetBufferHostSize_16u_C4R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_16s_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL1GetBufferHostSize_16s_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9585
   pragma Import (C, nppiNormRelL1GetBufferHostSize_16s_C4R, "nppiNormRelL1GetBufferHostSize_16s_C4R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_32f_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL1GetBufferHostSize_32f_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9595
   pragma Import (C, nppiNormRelL1GetBufferHostSize_32f_C4R, "nppiNormRelL1GetBufferHostSize_32f_C4R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_8u_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL1GetBufferHostSize_8u_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9605
   pragma Import (C, nppiNormRelL1GetBufferHostSize_8u_AC4R, "nppiNormRelL1GetBufferHostSize_8u_AC4R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_16u_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL1GetBufferHostSize_16u_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9615
   pragma Import (C, nppiNormRelL1GetBufferHostSize_16u_AC4R, "nppiNormRelL1GetBufferHostSize_16u_AC4R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_16s_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL1GetBufferHostSize_16s_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9625
   pragma Import (C, nppiNormRelL1GetBufferHostSize_16s_AC4R, "nppiNormRelL1GetBufferHostSize_16s_AC4R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_32f_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL1GetBufferHostSize_32f_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9635
   pragma Import (C, nppiNormRelL1GetBufferHostSize_32f_AC4R, "nppiNormRelL1GetBufferHostSize_32f_AC4R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_8u_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL1GetBufferHostSize_8u_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9645
   pragma Import (C, nppiNormRelL1GetBufferHostSize_8u_C3CMR, "nppiNormRelL1GetBufferHostSize_8u_C3CMR");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_8s_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL1GetBufferHostSize_8s_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9655
   pragma Import (C, nppiNormRelL1GetBufferHostSize_8s_C3CMR, "nppiNormRelL1GetBufferHostSize_8s_C3CMR");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_16u_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL1GetBufferHostSize_16u_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9665
   pragma Import (C, nppiNormRelL1GetBufferHostSize_16u_C3CMR, "nppiNormRelL1GetBufferHostSize_16u_C3CMR");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_32f_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL1GetBufferHostSize_32f_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9675
   pragma Import (C, nppiNormRelL1GetBufferHostSize_32f_C3CMR, "nppiNormRelL1GetBufferHostSize_32f_C3CMR");

  --* @}  
  --* @} image_L1_normrel  
  --* @defgroup image_L2_normrel NormRel_L2
  -- * Primitives for computing the relative error of L2 norm between two images.
  -- * @{
  --  

  --* @name Basic NormRel_L2
  -- * @{
  --  

  --*
  -- * One-channel 8-bit unsigned image NormRel_L2.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormRel Pointer to the computed relative error for the L2 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL2GetBufferHostSize_8u_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_DIVISOR_ERROR if the L2
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_L2_8u_C1R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9702
   pragma Import (C, nppiNormRel_L2_8u_C1R, "nppiNormRel_L2_8u_C1R");

  --*
  -- * One-channel 16-bit unsigned image NormRel_L2.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormRel Pointer to the computed relative error for the L2 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL2GetBufferHostSize_16u_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_DIVISOR_ERROR if the L2
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_L2_16u_C1R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9720
   pragma Import (C, nppiNormRel_L2_16u_C1R, "nppiNormRel_L2_16u_C1R");

  --*
  -- * One-channel 16-bit signed image NormRel_L2.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormRel Pointer to the computed relative error for the L2 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL2GetBufferHostSize_16s_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_DIVISOR_ERROR if the L2
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_L2_16s_C1R
     (pSrc1 : access nppdefs_h.Npp16s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9738
   pragma Import (C, nppiNormRel_L2_16s_C1R, "nppiNormRel_L2_16s_C1R");

  --*
  -- * One-channel 32-bit floating point image NormRel_L2.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormRel Pointer to the computed relative error for the L2 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL2GetBufferHostSize_32f_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified, or NPP_DIVISOR_ERROR if the L2
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_L2_32f_C1R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9757
   pragma Import (C, nppiNormRel_L2_32f_C1R, "nppiNormRel_L2_32f_C1R");

  --*
  -- * Three-channel 8-bit unsigned image NormRel_L2.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormRel Array that contains the computed relative error for the L2 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL2GetBufferHostSize_8u_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_DIVISOR_ERROR if the L2
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_L2_8u_C3R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9775
   pragma Import (C, nppiNormRel_L2_8u_C3R, "nppiNormRel_L2_8u_C3R");

  --*
  -- * Three-channel 16-bit unsigned image NormRel_L2.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormRel Array that contains the computed relative error for the L2 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL2GetBufferHostSize_16u_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_DIVISOR_ERROR if the L2
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_L2_16u_C3R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9793
   pragma Import (C, nppiNormRel_L2_16u_C3R, "nppiNormRel_L2_16u_C3R");

  --*
  -- * Three-channel 16-bit signed image NormRel_L2.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormRel Array that contains the computed relative error for the L2 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL2GetBufferHostSize_16s_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_DIVISOR_ERROR if the L2
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_L2_16s_C3R
     (pSrc1 : access nppdefs_h.Npp16s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9811
   pragma Import (C, nppiNormRel_L2_16s_C3R, "nppiNormRel_L2_16s_C3R");

  --*
  -- * Three-channel 32-bit floating point image NormRel_L2.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormRel Array that contains the computed relative error for the L2 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL2GetBufferHostSize_32f_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if 
  -- * an invalid floating-point image is specified, or NPP_DIVISOR_ERROR if the L2
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_L2_32f_C3R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9830
   pragma Import (C, nppiNormRel_L2_32f_C3R, "nppiNormRel_L2_32f_C3R");

  --*
  -- * Four-channel 8-bit unsigned image NormRel_L2 ignoring alpha channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormRel Array that contains the computed relative error for the L2 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL2GetBufferHostSize_8u_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_DIVISOR_ERROR if the L2
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_L2_8u_AC4R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9848
   pragma Import (C, nppiNormRel_L2_8u_AC4R, "nppiNormRel_L2_8u_AC4R");

  --*
  -- * Four-channel 16-bit unsigned image NormRel_L2 ignoring alpha channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormRel Array that contains the computed relative error for the L2 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL2GetBufferHostSize_16u_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_DIVISOR_ERROR if the L2
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_L2_16u_AC4R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9866
   pragma Import (C, nppiNormRel_L2_16u_AC4R, "nppiNormRel_L2_16u_AC4R");

  --*
  -- * Four-channel 16-bit signed image NormRel_L2 ignoring alpha channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormRel Array that contains the computed relative error for the L2 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL2GetBufferHostSize_16s_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_DIVISOR_ERROR if the L2
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_L2_16s_AC4R
     (pSrc1 : access nppdefs_h.Npp16s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9884
   pragma Import (C, nppiNormRel_L2_16s_AC4R, "nppiNormRel_L2_16s_AC4R");

  --*
  -- * Four-channel 32-bit floating point image NormRel_L2 ignoring alpha channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormRel Array that contains the computed relative error for the L2 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL2GetBufferHostSize_32f_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if 
  -- * an invalid floating-point image is specified, or NPP_DIVISOR_ERROR if the L2
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_L2_32f_AC4R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9903
   pragma Import (C, nppiNormRel_L2_32f_AC4R, "nppiNormRel_L2_32f_AC4R");

  --*
  -- * Four-channel 8-bit unsigned image NormRel_L2.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormRel Array that contains the computed relative error for the L2 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL2GetBufferHostSize_8u_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_DIVISOR_ERROR if the L2
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_L2_8u_C4R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9921
   pragma Import (C, nppiNormRel_L2_8u_C4R, "nppiNormRel_L2_8u_C4R");

  --*
  -- * Four-channel 16-bit unsigned image NormRel_L2.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormRel Array that contains the computed relative error for the L2 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL2GetBufferHostSize_16u_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_DIVISOR_ERROR if the L2
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_L2_16u_C4R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9939
   pragma Import (C, nppiNormRel_L2_16u_C4R, "nppiNormRel_L2_16u_C4R");

  --*
  -- * Four-channel 16-bit signed image NormRel_L2.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormRel Array that contains the computed relative error for the L2 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL2GetBufferHostSize_16s_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_DIVISOR_ERROR if the L2
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_L2_16s_C4R
     (pSrc1 : access nppdefs_h.Npp16s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9957
   pragma Import (C, nppiNormRel_L2_16s_C4R, "nppiNormRel_L2_16s_C4R");

  --*
  -- * Four-channel 32-bit floating point image NormRel_L2.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aNormRel Array that contains the computed relative error for the L2 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL2GetBufferHostSize_32f_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if 
  -- * an invalid floating-point image is specified, or NPP_DIVISOR_ERROR if the L2
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_L2_32f_C4R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:9976
   pragma Import (C, nppiNormRel_L2_32f_C4R, "nppiNormRel_L2_32f_C4R");

  --* @}  
  --* @name Masked NormRel_L2
  -- * See \ref masked_operation.
  -- * @{
  --  

  --*
  -- * Masked one-channel 8-bit unsigned image NormRel_L2.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormRel Pointer to the computed relative error for the L2 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL2GetBufferHostSize_8u_C1MR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_DIVISOR_ERROR if the L2
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_L2_8u_C1MR
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10002
   pragma Import (C, nppiNormRel_L2_8u_C1MR, "nppiNormRel_L2_8u_C1MR");

  --*
  -- * Masked one-channel 8-bit signed image NormRel_L2.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormRel Pointer to the computed relative error for the L2 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL2GetBufferHostSize_8s_C1MR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_DIVISOR_ERROR if the L2
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_L2_8s_C1MR
     (pSrc1 : access nppdefs_h.Npp8s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8s;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10023
   pragma Import (C, nppiNormRel_L2_8s_C1MR, "nppiNormRel_L2_8s_C1MR");

  --*
  -- * Masked one-channel 16-bit unsigned image NormRel_L2.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormRel Pointer to the computed relative error for the L2 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL2GetBufferHostSize_16u_C1MR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_DIVISOR_ERROR if the L2
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_L2_16u_C1MR
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10044
   pragma Import (C, nppiNormRel_L2_16u_C1MR, "nppiNormRel_L2_16u_C1MR");

  --*
  -- * Masked one-channel 32-bit floating point image NormRel_L2.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pNormRel Pointer to the computed relative error for the L2 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL2GetBufferHostSize_32f_C1MR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if 
  -- * an invalid floating-point image is specified, or NPP_DIVISOR_ERROR if the L2
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_L2_32f_C1MR
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10066
   pragma Import (C, nppiNormRel_L2_32f_C1MR, "nppiNormRel_L2_32f_C1MR");

  --* @}  
  --* @name Masked Channel NormRel_L2
  -- * See \ref masked_operation and \ref channel_of_interest.
  -- * @{
  --  

  --*
  -- * Masked three-channel 8-bit unsigned image NormRel_L2 affecting only single channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pNormRel Pointer to the computed relative error for the L2 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL2GetBufferHostSize_8u_C3CMR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_COI_ERROR if an invalid 
  -- * channel of interest is specified, or NPP_DIVISOR_ERROR if the L2 norm of the second image is zero.
  -- 

   function nppiNormRel_L2_8u_C3CMR
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10094
   pragma Import (C, nppiNormRel_L2_8u_C3CMR, "nppiNormRel_L2_8u_C3CMR");

  --*
  -- * Masked three-channel 8-bit signed image NormRel_L2 affecting only single channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pNormRel Pointer to the computed relative error for the L2 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL2GetBufferHostSize_8s_C3CMR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_COI_ERROR if an invalid 
  -- * channel of interest is specified, or NPP_DIVISOR_ERROR if the L2 norm of the second image is zero.
  -- 

   function nppiNormRel_L2_8s_C3CMR
     (pSrc1 : access nppdefs_h.Npp8s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8s;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10116
   pragma Import (C, nppiNormRel_L2_8s_C3CMR, "nppiNormRel_L2_8s_C3CMR");

  --*
  -- * Masked three-channel 16-bit unsigned image NormRel_L2 affecting only single channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pNormRel Pointer to the computed relative error for the L2 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL2GetBufferHostSize_16u_C3CMR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, NPP_COI_ERROR if an 
  -- * invalid channel of interest is specified, or NPP_DIVISOR_ERROR if the L2
  -- * norm of the second image is zero.
  -- 

   function nppiNormRel_L2_16u_C3CMR
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10139
   pragma Import (C, nppiNormRel_L2_16u_C3CMR, "nppiNormRel_L2_16u_C3CMR");

  --*
  -- * Masked three-channel 32-bit floating point image NormRel_L2 affecting only single channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param pMask \ref mask_image_pointer.
  -- * \param nMaskStep \ref mask_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nCOI \ref channel_of_interest_number.
  -- * \param pNormRel Pointer to the computed relative error for the L2 norm of two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiNormRelL2GetBufferHostSize_32f_C3CMR to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, NPP_COI_ERROR if an invalid channel 
  -- * of interest is specified, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified, 
  -- * or NPP_DIVISOR_ERROR if the L2 norm of the second image is zero.
  -- 

   function nppiNormRel_L2_32f_C3CMR
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      pMask : access nppdefs_h.Npp8u;
      nMaskStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      nCOI : int;
      pNormRel : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10162
   pragma Import (C, nppiNormRel_L2_32f_C3CMR, "nppiNormRel_L2_32f_C3CMR");

  --* @}  
  --* @name NormRelL2GetBufferHostSize
  -- * Companion primitives for computing the device buffer size (in bytes) required by the NormRel_L2 primitives.
  -- * @{
  --  

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_8u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL2GetBufferHostSize_8u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10181
   pragma Import (C, nppiNormRelL2GetBufferHostSize_8u_C1R, "nppiNormRelL2GetBufferHostSize_8u_C1R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_16u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL2GetBufferHostSize_16u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10191
   pragma Import (C, nppiNormRelL2GetBufferHostSize_16u_C1R, "nppiNormRelL2GetBufferHostSize_16u_C1R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_16s_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL2GetBufferHostSize_16s_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10201
   pragma Import (C, nppiNormRelL2GetBufferHostSize_16s_C1R, "nppiNormRelL2GetBufferHostSize_16s_C1R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_32f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL2GetBufferHostSize_32f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10211
   pragma Import (C, nppiNormRelL2GetBufferHostSize_32f_C1R, "nppiNormRelL2GetBufferHostSize_32f_C1R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_8u_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL2GetBufferHostSize_8u_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10221
   pragma Import (C, nppiNormRelL2GetBufferHostSize_8u_C1MR, "nppiNormRelL2GetBufferHostSize_8u_C1MR");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_8s_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL2GetBufferHostSize_8s_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10231
   pragma Import (C, nppiNormRelL2GetBufferHostSize_8s_C1MR, "nppiNormRelL2GetBufferHostSize_8s_C1MR");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_16u_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL2GetBufferHostSize_16u_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10241
   pragma Import (C, nppiNormRelL2GetBufferHostSize_16u_C1MR, "nppiNormRelL2GetBufferHostSize_16u_C1MR");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_32f_C1MR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL2GetBufferHostSize_32f_C1MR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10251
   pragma Import (C, nppiNormRelL2GetBufferHostSize_32f_C1MR, "nppiNormRelL2GetBufferHostSize_32f_C1MR");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_8u_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL2GetBufferHostSize_8u_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10261
   pragma Import (C, nppiNormRelL2GetBufferHostSize_8u_C3R, "nppiNormRelL2GetBufferHostSize_8u_C3R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_16u_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL2GetBufferHostSize_16u_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10271
   pragma Import (C, nppiNormRelL2GetBufferHostSize_16u_C3R, "nppiNormRelL2GetBufferHostSize_16u_C3R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_16s_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL2GetBufferHostSize_16s_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10281
   pragma Import (C, nppiNormRelL2GetBufferHostSize_16s_C3R, "nppiNormRelL2GetBufferHostSize_16s_C3R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_32f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL2GetBufferHostSize_32f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10291
   pragma Import (C, nppiNormRelL2GetBufferHostSize_32f_C3R, "nppiNormRelL2GetBufferHostSize_32f_C3R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_8u_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL2GetBufferHostSize_8u_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10301
   pragma Import (C, nppiNormRelL2GetBufferHostSize_8u_C4R, "nppiNormRelL2GetBufferHostSize_8u_C4R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_16u_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL2GetBufferHostSize_16u_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10311
   pragma Import (C, nppiNormRelL2GetBufferHostSize_16u_C4R, "nppiNormRelL2GetBufferHostSize_16u_C4R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_16s_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL2GetBufferHostSize_16s_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10321
   pragma Import (C, nppiNormRelL2GetBufferHostSize_16s_C4R, "nppiNormRelL2GetBufferHostSize_16s_C4R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_32f_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL2GetBufferHostSize_32f_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10331
   pragma Import (C, nppiNormRelL2GetBufferHostSize_32f_C4R, "nppiNormRelL2GetBufferHostSize_32f_C4R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_8u_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL2GetBufferHostSize_8u_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10341
   pragma Import (C, nppiNormRelL2GetBufferHostSize_8u_AC4R, "nppiNormRelL2GetBufferHostSize_8u_AC4R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_16u_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL2GetBufferHostSize_16u_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10351
   pragma Import (C, nppiNormRelL2GetBufferHostSize_16u_AC4R, "nppiNormRelL2GetBufferHostSize_16u_AC4R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_16s_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL2GetBufferHostSize_16s_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10361
   pragma Import (C, nppiNormRelL2GetBufferHostSize_16s_AC4R, "nppiNormRelL2GetBufferHostSize_16s_AC4R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_32f_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL2GetBufferHostSize_32f_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10371
   pragma Import (C, nppiNormRelL2GetBufferHostSize_32f_AC4R, "nppiNormRelL2GetBufferHostSize_32f_AC4R");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_8u_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL2GetBufferHostSize_8u_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10381
   pragma Import (C, nppiNormRelL2GetBufferHostSize_8u_C3CMR, "nppiNormRelL2GetBufferHostSize_8u_C3CMR");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_8s_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL2GetBufferHostSize_8s_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10391
   pragma Import (C, nppiNormRelL2GetBufferHostSize_8s_C3CMR, "nppiNormRelL2GetBufferHostSize_8s_C3CMR");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_16u_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL2GetBufferHostSize_16u_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10401
   pragma Import (C, nppiNormRelL2GetBufferHostSize_16u_C3CMR, "nppiNormRelL2GetBufferHostSize_16u_C3CMR");

  --* 
  -- * Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_32f_C3CMR.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiNormRelL2GetBufferHostSize_32f_C3CMR (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10411
   pragma Import (C, nppiNormRelL2GetBufferHostSize_32f_C3CMR, "nppiNormRelL2GetBufferHostSize_32f_C3CMR");

  --* @}  
  --* @} image_L2_normrel  
  --* @} image_norm  
  --* @defgroup image_dot_prod DotProd
  -- * Primitives for computing the dot product of two images.
  -- * @{
  -- *
  --  

  --* @name DotProd
  -- * Given two images \f$pSrc1\f$ and \f$pSrc2\f$ both with width \f$W\f$ and height \f$H\f$, 
  -- * the dot product will be computed as
  -- * \f[DotProd = \sum_{j=0}^{H-1}\sum_{i=0}^{W-1}[pSrc1(j,i)\cdot pSrc2(j,i)]\f]
  -- * The functions require additional scratch buffer for computations.
  -- * @{
  --  

  --*
  -- * One-channel 8-bit unsigned image DotProd.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDp Pointer to the computed dot product of the two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiDotProdGetBufferHostSize_8u64f_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiDotProd_8u64f_C1R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDp : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10442
   pragma Import (C, nppiDotProd_8u64f_C1R, "nppiDotProd_8u64f_C1R");

  --*
  -- * One-channel 8-bit signed image DotProd.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDp Pointer to the computed dot product of the two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiDotProdGetBufferHostSize_8s64f_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiDotProd_8s64f_C1R
     (pSrc1 : access nppdefs_h.Npp8s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDp : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10459
   pragma Import (C, nppiDotProd_8s64f_C1R, "nppiDotProd_8s64f_C1R");

  --*
  -- * One-channel 16-bit unsigned image DotProd.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDp Pointer to the computed dot product of the two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiDotProdGetBufferHostSize_16u64f_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiDotProd_16u64f_C1R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDp : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10476
   pragma Import (C, nppiDotProd_16u64f_C1R, "nppiDotProd_16u64f_C1R");

  --*
  -- * One-channel 16-bit signed image DotProd.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDp Pointer to the computed dot product of the two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiDotProdGetBufferHostSize_16s64f_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiDotProd_16s64f_C1R
     (pSrc1 : access nppdefs_h.Npp16s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDp : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10493
   pragma Import (C, nppiDotProd_16s64f_C1R, "nppiDotProd_16s64f_C1R");

  --*
  -- * One-channel 32-bit unsigned image DotProd.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDp Pointer to the computed dot product of the two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiDotProdGetBufferHostSize_32u64f_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiDotProd_32u64f_C1R
     (pSrc1 : access nppdefs_h.Npp32u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDp : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10510
   pragma Import (C, nppiDotProd_32u64f_C1R, "nppiDotProd_32u64f_C1R");

  --*
  -- * One-channel 32-bit signed image DotProd.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDp Pointer to the computed dot product of the two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiDotProdGetBufferHostSize_32s64f_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiDotProd_32s64f_C1R
     (pSrc1 : access nppdefs_h.Npp32s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDp : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10527
   pragma Import (C, nppiDotProd_32s64f_C1R, "nppiDotProd_32s64f_C1R");

  --*
  -- * One-channel 32-bit floating point image DotProd.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pDp Pointer to the computed dot product of the two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiDotProdGetBufferHostSize_32f64f_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiDotProd_32f64f_C1R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pDp : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10544
   pragma Import (C, nppiDotProd_32f64f_C1R, "nppiDotProd_32f64f_C1R");

  --*
  -- * Three-channel 8-bit unsigned image DotProd.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aDp Array that contains the computed dot product of the two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiDotProdGetBufferHostSize_8u64f_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiDotProd_8u64f_C3R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aDp : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10561
   pragma Import (C, nppiDotProd_8u64f_C3R, "nppiDotProd_8u64f_C3R");

  --*
  -- * Three-channel 8-bit signed image DotProd.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aDp Array that contains the computed dot product of the two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiDotProdGetBufferHostSize_8s64f_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiDotProd_8s64f_C3R
     (pSrc1 : access nppdefs_h.Npp8s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aDp : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10578
   pragma Import (C, nppiDotProd_8s64f_C3R, "nppiDotProd_8s64f_C3R");

  --*
  -- * Three-channel 16-bit unsigned image DotProd.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aDp Array that contains the computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiDotProdGetBufferHostSize_16u64f_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiDotProd_16u64f_C3R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aDp : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10595
   pragma Import (C, nppiDotProd_16u64f_C3R, "nppiDotProd_16u64f_C3R");

  --*
  -- * Three-channel 16-bit signed image DotProd.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aDp Array that contains the computed dot product of the two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiDotProdGetBufferHostSize_16s64f_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiDotProd_16s64f_C3R
     (pSrc1 : access nppdefs_h.Npp16s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aDp : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10612
   pragma Import (C, nppiDotProd_16s64f_C3R, "nppiDotProd_16s64f_C3R");

  --*
  -- * Three-channel 32-bit unsigned image DotProd.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aDp Array that contains the computed dot product of the two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiDotProdGetBufferHostSize_32u64f_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiDotProd_32u64f_C3R
     (pSrc1 : access nppdefs_h.Npp32u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aDp : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10629
   pragma Import (C, nppiDotProd_32u64f_C3R, "nppiDotProd_32u64f_C3R");

  --*
  -- * Three-channel 32-bit signed image DotProd.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aDp Array that contains the computed dot product of the two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiDotProdGetBufferHostSize_32s64f_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiDotProd_32s64f_C3R
     (pSrc1 : access nppdefs_h.Npp32s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aDp : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10646
   pragma Import (C, nppiDotProd_32s64f_C3R, "nppiDotProd_32s64f_C3R");

  --*
  -- * Three-channel 32-bit floating point image DotProd.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aDp Array that contains the computed dot product of the two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiDotProdGetBufferHostSize_32f64f_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiDotProd_32f64f_C3R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aDp : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10663
   pragma Import (C, nppiDotProd_32f64f_C3R, "nppiDotProd_32f64f_C3R");

  --*
  -- * Four-channel 8-bit unsigned image DotProd.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aDp Array that contains the computed dot product of the two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiDotProdGetBufferHostSize_8u64f_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiDotProd_8u64f_C4R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aDp : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10680
   pragma Import (C, nppiDotProd_8u64f_C4R, "nppiDotProd_8u64f_C4R");

  --*
  -- * Four-channel 8-bit signed image DotProd.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aDp Array that contains the computed dot product of the two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiDotProdGetBufferHostSize_8s64f_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiDotProd_8s64f_C4R
     (pSrc1 : access nppdefs_h.Npp8s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aDp : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10697
   pragma Import (C, nppiDotProd_8s64f_C4R, "nppiDotProd_8s64f_C4R");

  --*
  -- * Four-channel 16-bit unsigned image DotProd.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aDp Array that contains the computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiDotProdGetBufferHostSize_16u64f_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiDotProd_16u64f_C4R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aDp : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10714
   pragma Import (C, nppiDotProd_16u64f_C4R, "nppiDotProd_16u64f_C4R");

  --*
  -- * Four-channel 16-bit signed image DotProd.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aDp Array that contains the computed dot product of the two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiDotProdGetBufferHostSize_16s64f_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiDotProd_16s64f_C4R
     (pSrc1 : access nppdefs_h.Npp16s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aDp : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10731
   pragma Import (C, nppiDotProd_16s64f_C4R, "nppiDotProd_16s64f_C4R");

  --*
  -- * Four-channel 32-bit unsigned image DotProd.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aDp Array that contains the computed dot product of the two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiDotProdGetBufferHostSize_32u64f_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiDotProd_32u64f_C4R
     (pSrc1 : access nppdefs_h.Npp32u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aDp : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10748
   pragma Import (C, nppiDotProd_32u64f_C4R, "nppiDotProd_32u64f_C4R");

  --*
  -- * Four-channel 32-bit signed image DotProd.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aDp Array that contains the computed dot product of the two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiDotProdGetBufferHostSize_32s64f_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiDotProd_32s64f_C4R
     (pSrc1 : access nppdefs_h.Npp32s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aDp : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10765
   pragma Import (C, nppiDotProd_32s64f_C4R, "nppiDotProd_32s64f_C4R");

  --*
  -- * Four-channel 32-bit floating point image DotProd.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aDp Array that contains the computed dot product of the two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiDotProdGetBufferHostSize_32f64f_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiDotProd_32f64f_C4R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aDp : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10782
   pragma Import (C, nppiDotProd_32f64f_C4R, "nppiDotProd_32f64f_C4R");

  --*
  -- * Four-channel 8-bit unsigned image DotProd ignoring alpha channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aDp Array that contains the computed dot product of the two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiDotProdGetBufferHostSize_8u64f_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiDotProd_8u64f_AC4R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aDp : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10799
   pragma Import (C, nppiDotProd_8u64f_AC4R, "nppiDotProd_8u64f_AC4R");

  --*
  -- * Four-channel 8-bit signed image DotProd ignoring alpha channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aDp Array that contains the computed dot product of the two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiDotProdGetBufferHostSize_8s64f_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiDotProd_8s64f_AC4R
     (pSrc1 : access nppdefs_h.Npp8s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aDp : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10816
   pragma Import (C, nppiDotProd_8s64f_AC4R, "nppiDotProd_8s64f_AC4R");

  --*
  -- * Four-channel 16-bit unsigned image DotProd ignoring alpha channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aDp Array that contains the computed Inf-norm of differences. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiDotProdGetBufferHostSize_16u64f_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiDotProd_16u64f_AC4R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aDp : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10833
   pragma Import (C, nppiDotProd_16u64f_AC4R, "nppiDotProd_16u64f_AC4R");

  --*
  -- * Four-channel 16-bit signed image DotProd ignoring alpha channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aDp Array that contains the computed dot product of the two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiDotProdGetBufferHostSize_16s64f_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiDotProd_16s64f_AC4R
     (pSrc1 : access nppdefs_h.Npp16s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aDp : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10850
   pragma Import (C, nppiDotProd_16s64f_AC4R, "nppiDotProd_16s64f_AC4R");

  --*
  -- * Four-channel 32-bit unsigned image DotProd ignoring alpha channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aDp Array that contains the computed dot product of the two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiDotProdGetBufferHostSize_32u64f_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiDotProd_32u64f_AC4R
     (pSrc1 : access nppdefs_h.Npp32u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aDp : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10867
   pragma Import (C, nppiDotProd_32u64f_AC4R, "nppiDotProd_32u64f_AC4R");

  --*
  -- * Four-channel 32-bit signed image DotProd ignoring alpha channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aDp Array that contains the computed dot product of the two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiDotProdGetBufferHostSize_32s64f_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiDotProd_32s64f_AC4R
     (pSrc1 : access nppdefs_h.Npp32s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aDp : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10884
   pragma Import (C, nppiDotProd_32s64f_AC4R, "nppiDotProd_32s64f_AC4R");

  --*
  -- * Four-channel 32-bit floating point image DotProd ignoring alpha channel.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aDp Array that contains the computed dot product of the two images. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiDotProdGetBufferHostSize_32f64f_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiDotProd_32f64f_AC4R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      aDp : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10901
   pragma Import (C, nppiDotProd_32f64f_AC4R, "nppiDotProd_32f64f_AC4R");

  --* @}  
  --* @name DotProdGetBufferHostSize
  -- * Companion primitives for computing the device buffer size (in bytes) required by the Mean_StdDev primitives.
  -- * @{
  --  

  --* 
  -- * Device scratch buffer size (in bytes) for nppiDotProd_8u64f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiDotProdGetBufferHostSize_8u64f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10918
   pragma Import (C, nppiDotProdGetBufferHostSize_8u64f_C1R, "nppiDotProdGetBufferHostSize_8u64f_C1R");

  --* 
  -- * Device scratch buffer size (in bytes) for nppiDotProd_8s64f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiDotProdGetBufferHostSize_8s64f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10928
   pragma Import (C, nppiDotProdGetBufferHostSize_8s64f_C1R, "nppiDotProdGetBufferHostSize_8s64f_C1R");

  --* 
  -- * Device scratch buffer size (in bytes) for nppiDotProd_16u64f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiDotProdGetBufferHostSize_16u64f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10938
   pragma Import (C, nppiDotProdGetBufferHostSize_16u64f_C1R, "nppiDotProdGetBufferHostSize_16u64f_C1R");

  --* 
  -- * Device scratch buffer size (in bytes) for nppiDotProd_16s64f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiDotProdGetBufferHostSize_16s64f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10948
   pragma Import (C, nppiDotProdGetBufferHostSize_16s64f_C1R, "nppiDotProdGetBufferHostSize_16s64f_C1R");

  --* 
  -- * Device scratch buffer size (in bytes) for nppiDotProd_32u64f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiDotProdGetBufferHostSize_32u64f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10958
   pragma Import (C, nppiDotProdGetBufferHostSize_32u64f_C1R, "nppiDotProdGetBufferHostSize_32u64f_C1R");

  --* 
  -- * Device scratch buffer size (in bytes) for nppiDotProd_32s64f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiDotProdGetBufferHostSize_32s64f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10968
   pragma Import (C, nppiDotProdGetBufferHostSize_32s64f_C1R, "nppiDotProdGetBufferHostSize_32s64f_C1R");

  --* 
  -- * Device scratch buffer size (in bytes) for nppiDotProd_32f64f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiDotProdGetBufferHostSize_32f64f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10978
   pragma Import (C, nppiDotProdGetBufferHostSize_32f64f_C1R, "nppiDotProdGetBufferHostSize_32f64f_C1R");

  --* 
  -- * Device scratch buffer size (in bytes) for nppiDotProd_8u64f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiDotProdGetBufferHostSize_8u64f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10988
   pragma Import (C, nppiDotProdGetBufferHostSize_8u64f_C3R, "nppiDotProdGetBufferHostSize_8u64f_C3R");

  --* 
  -- * Device scratch buffer size (in bytes) for nppiDotProd_8s64f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiDotProdGetBufferHostSize_8s64f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:10998
   pragma Import (C, nppiDotProdGetBufferHostSize_8s64f_C3R, "nppiDotProdGetBufferHostSize_8s64f_C3R");

  --* 
  -- * Device scratch buffer size (in bytes) for nppiDotProd_16u64f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiDotProdGetBufferHostSize_16u64f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11008
   pragma Import (C, nppiDotProdGetBufferHostSize_16u64f_C3R, "nppiDotProdGetBufferHostSize_16u64f_C3R");

  --* 
  -- * Device scratch buffer size (in bytes) for nppiDotProd_16s64f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiDotProdGetBufferHostSize_16s64f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11018
   pragma Import (C, nppiDotProdGetBufferHostSize_16s64f_C3R, "nppiDotProdGetBufferHostSize_16s64f_C3R");

  --* 
  -- * Device scratch buffer size (in bytes) for nppiDotProd_32u64f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiDotProdGetBufferHostSize_32u64f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11028
   pragma Import (C, nppiDotProdGetBufferHostSize_32u64f_C3R, "nppiDotProdGetBufferHostSize_32u64f_C3R");

  --* 
  -- * Device scratch buffer size (in bytes) for nppiDotProd_32s64f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiDotProdGetBufferHostSize_32s64f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11038
   pragma Import (C, nppiDotProdGetBufferHostSize_32s64f_C3R, "nppiDotProdGetBufferHostSize_32s64f_C3R");

  --* 
  -- * Device scratch buffer size (in bytes) for nppiDotProd_32f64f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiDotProdGetBufferHostSize_32f64f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11048
   pragma Import (C, nppiDotProdGetBufferHostSize_32f64f_C3R, "nppiDotProdGetBufferHostSize_32f64f_C3R");

  --* 
  -- * Device scratch buffer size (in bytes) for nppiDotProd_8u64f_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiDotProdGetBufferHostSize_8u64f_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11058
   pragma Import (C, nppiDotProdGetBufferHostSize_8u64f_C4R, "nppiDotProdGetBufferHostSize_8u64f_C4R");

  --* 
  -- * Device scratch buffer size (in bytes) for nppiDotProd_8s64f_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiDotProdGetBufferHostSize_8s64f_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11068
   pragma Import (C, nppiDotProdGetBufferHostSize_8s64f_C4R, "nppiDotProdGetBufferHostSize_8s64f_C4R");

  --* 
  -- * Device scratch buffer size (in bytes) for nppiDotProd_16u64f_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiDotProdGetBufferHostSize_16u64f_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11078
   pragma Import (C, nppiDotProdGetBufferHostSize_16u64f_C4R, "nppiDotProdGetBufferHostSize_16u64f_C4R");

  --* 
  -- * Device scratch buffer size (in bytes) for nppiDotProd_16s64f_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiDotProdGetBufferHostSize_16s64f_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11088
   pragma Import (C, nppiDotProdGetBufferHostSize_16s64f_C4R, "nppiDotProdGetBufferHostSize_16s64f_C4R");

  --* 
  -- * Device scratch buffer size (in bytes) for nppiDotProd_32u64f_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiDotProdGetBufferHostSize_32u64f_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11098
   pragma Import (C, nppiDotProdGetBufferHostSize_32u64f_C4R, "nppiDotProdGetBufferHostSize_32u64f_C4R");

  --* 
  -- * Device scratch buffer size (in bytes) for nppiDotProd_32s64f_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiDotProdGetBufferHostSize_32s64f_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11108
   pragma Import (C, nppiDotProdGetBufferHostSize_32s64f_C4R, "nppiDotProdGetBufferHostSize_32s64f_C4R");

  --* 
  -- * Device scratch buffer size (in bytes) for nppiDotProd_32f64f_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiDotProdGetBufferHostSize_32f64f_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11118
   pragma Import (C, nppiDotProdGetBufferHostSize_32f64f_C4R, "nppiDotProdGetBufferHostSize_32f64f_C4R");

  --* 
  -- * Device scratch buffer size (in bytes) for nppiDotProd_8u64f_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiDotProdGetBufferHostSize_8u64f_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11128
   pragma Import (C, nppiDotProdGetBufferHostSize_8u64f_AC4R, "nppiDotProdGetBufferHostSize_8u64f_AC4R");

  --* 
  -- * Device scratch buffer size (in bytes) for nppiDotProd_8s64f_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiDotProdGetBufferHostSize_8s64f_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11138
   pragma Import (C, nppiDotProdGetBufferHostSize_8s64f_AC4R, "nppiDotProdGetBufferHostSize_8s64f_AC4R");

  --* 
  -- * Device scratch buffer size (in bytes) for nppiDotProd_16u64f_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiDotProdGetBufferHostSize_16u64f_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11148
   pragma Import (C, nppiDotProdGetBufferHostSize_16u64f_AC4R, "nppiDotProdGetBufferHostSize_16u64f_AC4R");

  --* 
  -- * Device scratch buffer size (in bytes) for nppiDotProd_16s64f_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiDotProdGetBufferHostSize_16s64f_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11158
   pragma Import (C, nppiDotProdGetBufferHostSize_16s64f_AC4R, "nppiDotProdGetBufferHostSize_16s64f_AC4R");

  --* 
  -- * Device scratch buffer size (in bytes) for nppiDotProd_32u64f_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiDotProdGetBufferHostSize_32u64f_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11168
   pragma Import (C, nppiDotProdGetBufferHostSize_32u64f_AC4R, "nppiDotProdGetBufferHostSize_32u64f_AC4R");

  --* 
  -- * Device scratch buffer size (in bytes) for nppiDotProd_32s64f_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiDotProdGetBufferHostSize_32s64f_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11178
   pragma Import (C, nppiDotProdGetBufferHostSize_32s64f_AC4R, "nppiDotProdGetBufferHostSize_32s64f_AC4R");

  --* 
  -- * Device scratch buffer size (in bytes) for nppiDotProd_32f64f_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiDotProdGetBufferHostSize_32f64f_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11188
   pragma Import (C, nppiDotProdGetBufferHostSize_32f64f_AC4R, "nppiDotProdGetBufferHostSize_32f64f_AC4R");

  --* @}  
  --* @} image_dot_prod  
  --* @defgroup image_count_in_range CountInRange.
  -- * Primitives for computing the amount of pixels that fall into the specified intensity range.
  -- * @{
  -- *
  --  

  --* @name CountInRange
  -- * The lower bound and the upper bound are inclusive. The functions require additional
  -- * scratch buffer for computations. 
  -- * @{
  -- *
  --  

  --*
  -- * One-channel 8-bit unsigned image CountInRange.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pCounts Pointer to the number of pixels that fall into the specified range.
  -- * \param nLowerBound Lower bound of the specified range.
  -- * \param nUpperBound Upper bound of the specified range.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiCountInRangeGetBufferHostSize_8u_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_RANGE_ERROR if the lower bound
  -- * is larger than the upper bound.
  -- 

   function nppiCountInRange_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pCounts : access int;
      nLowerBound : nppdefs_h.Npp8u;
      nUpperBound : nppdefs_h.Npp8u;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11219
   pragma Import (C, nppiCountInRange_8u_C1R, "nppiCountInRange_8u_C1R");

  --*
  -- * One-channel 32-bit floating point image CountInRange.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pCounts Pointer to the number of pixels that fall into the specified range.
  -- * \param nLowerBound Lower bound of the specified range.
  -- * \param nUpperBound Upper bound of the specified range.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiCountInRangeGetBufferHostSize_32f_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_RANGE_ERROR if the lower bound
  -- * is larger than the upper bound.
  -- 

   function nppiCountInRange_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pCounts : access int;
      nLowerBound : nppdefs_h.Npp32f;
      nUpperBound : nppdefs_h.Npp32f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11236
   pragma Import (C, nppiCountInRange_32f_C1R, "nppiCountInRange_32f_C1R");

  --*
  -- * Three-channel 8-bit unsigned image CountInRange.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aCounts Array that contains the number of pixels that fall into the specified range for Three-channels.
  -- * \param aLowerBound Fixed size array of the lower bound of the specified range, one per channel.
  -- * \param aUpperBound Fixed size array of the upper bound of the specified range, one per channel.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiCountInRangeGetBufferHostSize_8u_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_RANGE_ERROR if the lower bound
  -- * is larger than the upper bound.
  -- 

   function nppiCountInRange_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aCounts : access int;
      aLowerBound : access nppdefs_h.Npp8u;
      aUpperBound : access nppdefs_h.Npp8u;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11253
   pragma Import (C, nppiCountInRange_8u_C3R, "nppiCountInRange_8u_C3R");

  --*
  -- * Three-channel 32-bit floating point image CountInRange.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aCounts Array that contains the number of pixels that fall into the specified range for Three-channels.
  -- * \param aLowerBound Fixed size array of the lower bound of the specified range, one per channel.
  -- * \param aUpperBound Fixed size array of the upper bound of the specified range, one per channel.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiCountInRangeGetBufferHostSize_32f_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_RANGE_ERROR if the lower bound
  -- * is larger than the upper bound.
  -- 

   function nppiCountInRange_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aCounts : access int;
      aLowerBound : access nppdefs_h.Npp32f;
      aUpperBound : access nppdefs_h.Npp32f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11270
   pragma Import (C, nppiCountInRange_32f_C3R, "nppiCountInRange_32f_C3R");

  --*
  -- * Four-channel 8-bit unsigned image CountInRange ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aCounts Array that contains the number of pixels that fall into the specified range for Three-channels.
  -- * \param aLowerBound Fixed size array of the lower bound of the specified range, one per channel.
  -- * \param aUpperBound Fixed size array of the upper bound of the specified range, one per channel.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiCountInRangeGetBufferHostSize_8u_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_RANGE_ERROR if the lower bound
  -- * is larger than the upper bound.
  -- 

   function nppiCountInRange_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aCounts : access int;
      aLowerBound : access nppdefs_h.Npp8u;
      aUpperBound : access nppdefs_h.Npp8u;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11287
   pragma Import (C, nppiCountInRange_8u_AC4R, "nppiCountInRange_8u_AC4R");

  --*
  -- * Four-channel 32-bit floating point image CountInRange ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param aCounts Array that contains the number of pixels that fall into the specified range for Three-channels.
  -- * \param aLowerBound Fixed size array of the lower bound of the specified range, one per channel.
  -- * \param aUpperBound Fixed size array of the upper bound of the specified range, one per channel.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiCountInRangeGetBufferHostSize_32f_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_RANGE_ERROR if the lower bound
  -- * is larger than the upper bound.
  -- 

   function nppiCountInRange_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      aCounts : access int;
      aLowerBound : access nppdefs_h.Npp32f;
      aUpperBound : access nppdefs_h.Npp32f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11304
   pragma Import (C, nppiCountInRange_32f_AC4R, "nppiCountInRange_32f_AC4R");

  --* @}  
  --* @name CountInRangeGetBufferHostSize
  -- * Companion primitives for computing the device buffer size (in bytes) required by the CountInRange primitives.
  -- * @{
  --  

  --* 
  -- * Device scratch buffer size (in bytes) for nppiCountInRange_8u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiCountInRangeGetBufferHostSize_8u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11321
   pragma Import (C, nppiCountInRangeGetBufferHostSize_8u_C1R, "nppiCountInRangeGetBufferHostSize_8u_C1R");

  --* 
  -- * Device scratch buffer size (in bytes) for nppiCountInRange_32f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiCountInRangeGetBufferHostSize_32f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11331
   pragma Import (C, nppiCountInRangeGetBufferHostSize_32f_C1R, "nppiCountInRangeGetBufferHostSize_32f_C1R");

  --* 
  -- * Device scratch buffer size (in bytes) for nppiCountInRange_8u_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiCountInRangeGetBufferHostSize_8u_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11341
   pragma Import (C, nppiCountInRangeGetBufferHostSize_8u_C3R, "nppiCountInRangeGetBufferHostSize_8u_C3R");

  --* 
  -- * Device scratch buffer size (in bytes) for nppiCountInRange_32f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiCountInRangeGetBufferHostSize_32f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11351
   pragma Import (C, nppiCountInRangeGetBufferHostSize_32f_C3R, "nppiCountInRangeGetBufferHostSize_32f_C3R");

  --* 
  -- * Device scratch buffer size (in bytes) for nppiCountInRange_8u_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiCountInRangeGetBufferHostSize_8u_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11361
   pragma Import (C, nppiCountInRangeGetBufferHostSize_8u_AC4R, "nppiCountInRangeGetBufferHostSize_8u_AC4R");

  --* 
  -- * Device scratch buffer size (in bytes) for nppiCountInRange_32f_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiCountInRangeGetBufferHostSize_32f_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11371
   pragma Import (C, nppiCountInRangeGetBufferHostSize_32f_AC4R, "nppiCountInRangeGetBufferHostSize_32f_AC4R");

  --* @}  
  --* @} image_count_in_range  
  --* @defgroup image_maxevery MaxEvery
  -- * Primitives for computing the maximal value of the pixel pair from two images.
  -- * @{
  -- *
  --  

  --* @name MaxEvery
  -- * The maximum is stored into the second image.
  -- * @{
  -- *
  --  

  --*
  -- * One-channel 8-bit unsigned image MaxEvery.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pSrcDst \ref in_place_image_pointer.
  -- * \param nSrcDstStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaxEvery_8u_C1IR
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      pSrcDst : access nppdefs_h.Npp8u;
      nSrcDstStep : int;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11396
   pragma Import (C, nppiMaxEvery_8u_C1IR, "nppiMaxEvery_8u_C1IR");

  --*
  -- * One-channel 16-bit unsigned image MaxEvery.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pSrcDst \ref in_place_image_pointer.
  -- * \param nSrcDstStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaxEvery_16u_C1IR
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      pSrcDst : access nppdefs_h.Npp16u;
      nSrcDstStep : int;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11408
   pragma Import (C, nppiMaxEvery_16u_C1IR, "nppiMaxEvery_16u_C1IR");

  --*
  -- * One-channel 16-bit signed image MaxEvery.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pSrcDst \ref in_place_image_pointer.
  -- * \param nSrcDstStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaxEvery_16s_C1IR
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      pSrcDst : access nppdefs_h.Npp16s;
      nSrcDstStep : int;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11420
   pragma Import (C, nppiMaxEvery_16s_C1IR, "nppiMaxEvery_16s_C1IR");

  --*
  -- * One-channel 32-bit floating point image MaxEvery.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pSrcDst \ref in_place_image_pointer.
  -- * \param nSrcDstStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaxEvery_32f_C1IR
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      pSrcDst : access nppdefs_h.Npp32f;
      nSrcDstStep : int;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11432
   pragma Import (C, nppiMaxEvery_32f_C1IR, "nppiMaxEvery_32f_C1IR");

  --*
  -- * Three-channel 8-bit unsigned image MaxEvery.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pSrcDst \ref in_place_image_pointer.
  -- * \param nSrcDstStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaxEvery_8u_C3IR
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      pSrcDst : access nppdefs_h.Npp8u;
      nSrcDstStep : int;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11444
   pragma Import (C, nppiMaxEvery_8u_C3IR, "nppiMaxEvery_8u_C3IR");

  --*
  -- * Three-channel 16-bit unsigned image MaxEvery.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pSrcDst \ref in_place_image_pointer.
  -- * \param nSrcDstStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaxEvery_16u_C3IR
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      pSrcDst : access nppdefs_h.Npp16u;
      nSrcDstStep : int;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11456
   pragma Import (C, nppiMaxEvery_16u_C3IR, "nppiMaxEvery_16u_C3IR");

  --*
  -- * Three-channel 16-bit signed image MaxEvery.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pSrcDst \ref in_place_image_pointer.
  -- * \param nSrcDstStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaxEvery_16s_C3IR
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      pSrcDst : access nppdefs_h.Npp16s;
      nSrcDstStep : int;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11468
   pragma Import (C, nppiMaxEvery_16s_C3IR, "nppiMaxEvery_16s_C3IR");

  --*
  -- * Three-channel 32-bit floating point image MaxEvery.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pSrcDst \ref in_place_image_pointer.
  -- * \param nSrcDstStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaxEvery_32f_C3IR
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      pSrcDst : access nppdefs_h.Npp32f;
      nSrcDstStep : int;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11480
   pragma Import (C, nppiMaxEvery_32f_C3IR, "nppiMaxEvery_32f_C3IR");

  --*
  -- * Four-channel 8-bit unsigned image MaxEvery.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pSrcDst \ref in_place_image_pointer.
  -- * \param nSrcDstStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaxEvery_8u_C4IR
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      pSrcDst : access nppdefs_h.Npp8u;
      nSrcDstStep : int;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11492
   pragma Import (C, nppiMaxEvery_8u_C4IR, "nppiMaxEvery_8u_C4IR");

  --*
  -- * Four-channel 16-bit unsigned image MaxEvery.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pSrcDst \ref in_place_image_pointer.
  -- * \param nSrcDstStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaxEvery_16u_C4IR
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      pSrcDst : access nppdefs_h.Npp16u;
      nSrcDstStep : int;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11504
   pragma Import (C, nppiMaxEvery_16u_C4IR, "nppiMaxEvery_16u_C4IR");

  --*
  -- * Four-channel 16-bit signed image MaxEvery.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pSrcDst \ref in_place_image_pointer.
  -- * \param nSrcDstStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaxEvery_16s_C4IR
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      pSrcDst : access nppdefs_h.Npp16s;
      nSrcDstStep : int;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11516
   pragma Import (C, nppiMaxEvery_16s_C4IR, "nppiMaxEvery_16s_C4IR");

  --*
  -- * Four-channel 32-bit floating point image MaxEvery.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pSrcDst \ref in_place_image_pointer.
  -- * \param nSrcDstStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaxEvery_32f_C4IR
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      pSrcDst : access nppdefs_h.Npp32f;
      nSrcDstStep : int;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11528
   pragma Import (C, nppiMaxEvery_32f_C4IR, "nppiMaxEvery_32f_C4IR");

  --*
  -- * Four-channel 8-bit unsigned image MaxEvery ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pSrcDst \ref in_place_image_pointer.
  -- * \param nSrcDstStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaxEvery_8u_AC4IR
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      pSrcDst : access nppdefs_h.Npp8u;
      nSrcDstStep : int;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11540
   pragma Import (C, nppiMaxEvery_8u_AC4IR, "nppiMaxEvery_8u_AC4IR");

  --*
  -- * Four-channel 16-bit unsigned image MaxEvery ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pSrcDst \ref in_place_image_pointer.
  -- * \param nSrcDstStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaxEvery_16u_AC4IR
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      pSrcDst : access nppdefs_h.Npp16u;
      nSrcDstStep : int;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11552
   pragma Import (C, nppiMaxEvery_16u_AC4IR, "nppiMaxEvery_16u_AC4IR");

  --*
  -- * Four-channel 16-bit signed image MaxEvery ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pSrcDst \ref in_place_image_pointer.
  -- * \param nSrcDstStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaxEvery_16s_AC4IR
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      pSrcDst : access nppdefs_h.Npp16s;
      nSrcDstStep : int;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11564
   pragma Import (C, nppiMaxEvery_16s_AC4IR, "nppiMaxEvery_16s_AC4IR");

  --*
  -- * Four-channel 32-bit floating point image MaxEvery ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pSrcDst \ref in_place_image_pointer.
  -- * \param nSrcDstStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaxEvery_32f_AC4IR
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      pSrcDst : access nppdefs_h.Npp32f;
      nSrcDstStep : int;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11576
   pragma Import (C, nppiMaxEvery_32f_AC4IR, "nppiMaxEvery_32f_AC4IR");

  --* @}  
  --* @} image_maxevery 
  --* @defgroup image_minevery MinEvery
  -- * Primitives for computing the minimal value of the pixel pair from two images.
  -- * @{
  -- *
  --  

  --* @name MinEvery
  -- * The minimum is stored into the second image.
  -- * @{
  -- *
  --  

  --*
  -- * One-channel 8-bit unsigned image MinEvery.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pSrcDst \ref in_place_image_pointer.
  -- * \param nSrcDstStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMinEvery_8u_C1IR
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      pSrcDst : access nppdefs_h.Npp8u;
      nSrcDstStep : int;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11601
   pragma Import (C, nppiMinEvery_8u_C1IR, "nppiMinEvery_8u_C1IR");

  --*
  -- * One-channel 16-bit unsigned image MinEvery.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pSrcDst \ref in_place_image_pointer.
  -- * \param nSrcDstStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMinEvery_16u_C1IR
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      pSrcDst : access nppdefs_h.Npp16u;
      nSrcDstStep : int;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11613
   pragma Import (C, nppiMinEvery_16u_C1IR, "nppiMinEvery_16u_C1IR");

  --*
  -- * One-channel 16-bit signed image MinEvery.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pSrcDst \ref in_place_image_pointer.
  -- * \param nSrcDstStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMinEvery_16s_C1IR
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      pSrcDst : access nppdefs_h.Npp16s;
      nSrcDstStep : int;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11625
   pragma Import (C, nppiMinEvery_16s_C1IR, "nppiMinEvery_16s_C1IR");

  --*
  -- * One-channel 32-bit floating point image MinEvery.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pSrcDst \ref in_place_image_pointer.
  -- * \param nSrcDstStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMinEvery_32f_C1IR
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      pSrcDst : access nppdefs_h.Npp32f;
      nSrcDstStep : int;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11637
   pragma Import (C, nppiMinEvery_32f_C1IR, "nppiMinEvery_32f_C1IR");

  --*
  -- * Three-channel 8-bit unsigned image MinEvery.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pSrcDst \ref in_place_image_pointer.
  -- * \param nSrcDstStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMinEvery_8u_C3IR
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      pSrcDst : access nppdefs_h.Npp8u;
      nSrcDstStep : int;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11649
   pragma Import (C, nppiMinEvery_8u_C3IR, "nppiMinEvery_8u_C3IR");

  --*
  -- * Three-channel 16-bit unsigned image MinEvery.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pSrcDst \ref in_place_image_pointer.
  -- * \param nSrcDstStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMinEvery_16u_C3IR
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      pSrcDst : access nppdefs_h.Npp16u;
      nSrcDstStep : int;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11661
   pragma Import (C, nppiMinEvery_16u_C3IR, "nppiMinEvery_16u_C3IR");

  --*
  -- * Three-channel 16-bit signed image MinEvery.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pSrcDst \ref in_place_image_pointer.
  -- * \param nSrcDstStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMinEvery_16s_C3IR
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      pSrcDst : access nppdefs_h.Npp16s;
      nSrcDstStep : int;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11673
   pragma Import (C, nppiMinEvery_16s_C3IR, "nppiMinEvery_16s_C3IR");

  --*
  -- * Three-channel 32-bit floating point image MinEvery.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pSrcDst \ref in_place_image_pointer.
  -- * \param nSrcDstStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMinEvery_32f_C3IR
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      pSrcDst : access nppdefs_h.Npp32f;
      nSrcDstStep : int;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11685
   pragma Import (C, nppiMinEvery_32f_C3IR, "nppiMinEvery_32f_C3IR");

  --*
  -- * Four-channel 8-bit unsigned image MinEvery.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pSrcDst \ref in_place_image_pointer.
  -- * \param nSrcDstStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMinEvery_8u_C4IR
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      pSrcDst : access nppdefs_h.Npp8u;
      nSrcDstStep : int;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11697
   pragma Import (C, nppiMinEvery_8u_C4IR, "nppiMinEvery_8u_C4IR");

  --*
  -- * Four-channel 16-bit unsigned image MinEvery.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pSrcDst \ref in_place_image_pointer.
  -- * \param nSrcDstStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMinEvery_16u_C4IR
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      pSrcDst : access nppdefs_h.Npp16u;
      nSrcDstStep : int;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11709
   pragma Import (C, nppiMinEvery_16u_C4IR, "nppiMinEvery_16u_C4IR");

  --*
  -- * Four-channel 16-bit signed image MinEvery.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pSrcDst \ref in_place_image_pointer.
  -- * \param nSrcDstStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMinEvery_16s_C4IR
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      pSrcDst : access nppdefs_h.Npp16s;
      nSrcDstStep : int;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11721
   pragma Import (C, nppiMinEvery_16s_C4IR, "nppiMinEvery_16s_C4IR");

  --*
  -- * Four-channel 32-bit floating point image MinEvery.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pSrcDst \ref in_place_image_pointer.
  -- * \param nSrcDstStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMinEvery_32f_C4IR
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      pSrcDst : access nppdefs_h.Npp32f;
      nSrcDstStep : int;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11733
   pragma Import (C, nppiMinEvery_32f_C4IR, "nppiMinEvery_32f_C4IR");

  --*
  -- * Four-channel 8-bit unsigned image MinEvery ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pSrcDst \ref in_place_image_pointer.
  -- * \param nSrcDstStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMinEvery_8u_AC4IR
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      pSrcDst : access nppdefs_h.Npp8u;
      nSrcDstStep : int;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11745
   pragma Import (C, nppiMinEvery_8u_AC4IR, "nppiMinEvery_8u_AC4IR");

  --*
  -- * Four-channel 16-bit unsigned image MinEvery ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pSrcDst \ref in_place_image_pointer.
  -- * \param nSrcDstStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMinEvery_16u_AC4IR
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      pSrcDst : access nppdefs_h.Npp16u;
      nSrcDstStep : int;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11757
   pragma Import (C, nppiMinEvery_16u_AC4IR, "nppiMinEvery_16u_AC4IR");

  --*
  -- * Four-channel 16-bit signed image MinEvery ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pSrcDst \ref in_place_image_pointer.
  -- * \param nSrcDstStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMinEvery_16s_AC4IR
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      pSrcDst : access nppdefs_h.Npp16s;
      nSrcDstStep : int;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11769
   pragma Import (C, nppiMinEvery_16s_AC4IR, "nppiMinEvery_16s_AC4IR");

  --*
  -- * Four-channel 32-bit floating point image MinEvery ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pSrcDst \ref in_place_image_pointer.
  -- * \param nSrcDstStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMinEvery_32f_AC4IR
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      pSrcDst : access nppdefs_h.Npp32f;
      nSrcDstStep : int;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11781
   pragma Import (C, nppiMinEvery_32f_AC4IR, "nppiMinEvery_32f_AC4IR");

  --* @}  
  --* @} image_minevery  
  --* @defgroup image_integral Integral
  -- * Primitives for computing the integral image of a given image.
  -- * @{
  -- *
  --  

  --* @name Integral
  -- * Given an input image \f$pSrc\f$ and the specified value \f$nVal\f$, 
  -- * the pixel value of the integral image \f$pDst\f$ at coordinate 
  -- * (i, j) will be computed as
  -- * \f[pDst(j,i) = nVal + \sum_{l=0}^{j-1}\sum_{k=0}^{i-1}pSrc(l,k)\f]
  -- * If the size of the input image is \f$W \times H\f$, the size of 
  -- * the integral image will be \f$(W+1) \times (H+1)\f$.
  --  

  --*
  -- * One-channel 8-bit unsigned image Integral with 32-bit signed output.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param nVal The value to add to pDst image pixels
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiIntegral_8u32s_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      pDst : access nppdefs_h.Npp32s;
      nDstStep : int;
      oROI : nppdefs_h.NppiSize;
      nVal : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11812
   pragma Import (C, nppiIntegral_8u32s_C1R, "nppiIntegral_8u32s_C1R");

  --*
  -- * One-channel 8-bit unsigned image Integral with 32-bit floating point output.
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param nVal The value to add to pDst image pixels
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiIntegral_8u32f_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      oROI : nppdefs_h.NppiSize;
      nVal : nppdefs_h.Npp32f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11827
   pragma Import (C, nppiIntegral_8u32f_C1R, "nppiIntegral_8u32f_C1R");

  --* @}  
  --* @} Integral  
  --* @defgroup image_sqrintegral SqrIntegral
  -- * Primitives for computing both the integral and the squared integral images of a given image.
  -- * @{
  -- *
  --  

  --* @name SqrIntegral
  -- *
  -- * Given an input image \f$pSrc\f$ and the specified value \f$nVal\f$, 
  -- * the pixel value of the integral image \f$pDst\f$ at coordinate 
  -- * (i, j) will be computed as
  -- * \f[pDst(j,i) = nVal + \sum_{l=0}^{j-1}\sum_{k=0}^{i-1}pSrc(l,k)\f]
  -- * Given an input image \f$pSrc\f$ and the specified value \f$nValSqr\f$, 
  -- * the pixel value of the squared integral image \f$pSqr\f$ at coordinate 
  -- * (i, j) will be computed as
  -- * \f[pSqr(j,i) = nValSqr + \sum_{l=0}^{j-1}\sum_{k=0}^{i-1}{pSrc(l,k)}^2\f]
  -- * If the size of the input image is \f$W \times H\f$, the size of 
  -- * the squared integral image will be \f$(W+1) \times (H+1)\f$.
  --  

  --*
  -- * One-channel 8-bit unsigned image SqrIntegral. 
  -- * Destination integral image and square integral image are 32-bit signed int.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pSqr \ref destination_image_pointer.
  -- * \param nSqrStep \ref destination_image_line_step.
  -- * \param oSrcROI \ref roi_specification.
  -- * \param nVal The value to add to pDst image pixels
  -- * \param nValSqr The value to add to pSqr image pixels
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrIntegral_8u32s_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      pDst : access nppdefs_h.Npp32s;
      nDstStep : int;
      pSqr : access nppdefs_h.Npp32s;
      nSqrStep : int;
      oSrcROI : nppdefs_h.NppiSize;
      nVal : nppdefs_h.Npp32s;
      nValSqr : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11870
   pragma Import (C, nppiSqrIntegral_8u32s_C1R, "nppiSqrIntegral_8u32s_C1R");

  --*
  -- * One-channel 8-bit unsigned image SqrIntegral. 
  -- * Destination integral image is 32-bit signed int. 
  -- * Destination square integral image is 64-bit double floating point.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pSqr \ref destination_image_pointer.
  -- * \param nSqrStep \ref destination_image_line_step.
  -- * \param oSrcROI \ref roi_specification.
  -- * \param nVal The value to add to pDst image pixels
  -- * \param nValSqr The value to add to pSqr image pixels
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrIntegral_8u32s64f_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      pDst : access nppdefs_h.Npp32s;
      nDstStep : int;
      pSqr : access nppdefs_h.Npp64f;
      nSqrStep : int;
      oSrcROI : nppdefs_h.NppiSize;
      nVal : nppdefs_h.Npp32s;
      nValSqr : nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11892
   pragma Import (C, nppiSqrIntegral_8u32s64f_C1R, "nppiSqrIntegral_8u32s64f_C1R");

  --*
  -- * One-channel 8-bit unsigned image SqrIntegral. 
  -- * Destination integral image is 32-bit floating point.
  -- * Destination square integral image is 64-bit double floating point.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pSqr \ref destination_image_pointer.
  -- * \param nSqrStep \ref destination_image_line_step.
  -- * \param oSrcROI \ref roi_specification.
  -- * \param nVal The value to add to pDst image pixels
  -- * \param nValSqr The value to add to pSqr image pixels
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrIntegral_8u32f64f_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pSqr : access nppdefs_h.Npp64f;
      nSqrStep : int;
      oSrcROI : nppdefs_h.NppiSize;
      nVal : nppdefs_h.Npp32f;
      nValSqr : nppdefs_h.Npp64f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11914
   pragma Import (C, nppiSqrIntegral_8u32f64f_C1R, "nppiSqrIntegral_8u32f64f_C1R");

  --* @}   
  --* @} image_sqrintegral  
  --* @defgroup image_rectstddev RectStdDev
  -- * Primitives for computing the standard deviation of the integral images.
  -- * The function computes the standard deviation of the pixel in the rectangular window with the 
  -- * integral image \f$pSrc\f$ and the squared integral image \f$pSqr\f$, which can be obtained by calling
  -- * \ref image_integral and \ref image_sqrintegral.
  -- * 
  -- * The standard deviation of the pixel \f$(j, i)\f$ can be computed using the formula:
  -- * \f[pDst(j, i) = \sqrt{max(0, \frac{\sum(SqrIntegral)\cdot N - (\sum(Integral))^2}{N^2})}\f]
  -- * where \f$\sum(SqrIntegral) = pSqr[j+oRect.y+oRect.height, i+oRect.x+oRect.width] - pSqr[j+oRect.y,i+oRect.x+oRect.width]
  -- * - pSqr[j+oRect.y+oRect.height, i+oRect.x] + pSqr[j+oRect.y, i+oRect.x]\f$,
  -- * \f$\sum(Integral) = pSrc[j+oRect.y+oRect.height, i+oRect.x+oRect.width] - pSrc[j+oRect.y,i+oRect.x+oRect.width]
  -- * - pSrc[j+oRect.y+oRect.height, i+oRect.x] + pSrc[j+oRect.y, i+oRect.x]\f$,
  -- * \f$N = oRect.width \cdot oRect.height\f$.
  -- *
  -- * The size of the \f$pSrc\f$ and \f$pSqr\f$ should be \f$(oSizeROI.width + oRect.x + oRect.width, 
  -- * oSizeROI.height + oRect.y + oRect.height).\f$
  -- * @{
  -- *
  --  

  --* @name RectStdDev
  -- * @{
  --  

  --*
  -- * One-channel 32-bit floating point image RectStdDev.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pSqr \ref destination_image_pointer.
  -- * \param nSqrStep \ref destination_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oRect rectangular window
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiRectStdDev_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      pSqr : access nppdefs_h.Npp64f;
      nSqrStep : int;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      oRect : nppdefs_h.NppiRect) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11958
   pragma Import (C, nppiRectStdDev_32f_C1R, "nppiRectStdDev_32f_C1R");

  --*
  -- * One-channel 32-bit signed image RectStdDev, scaled by \f$2^(-nScaleFactor)\f$. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pSqr \ref destination_image_pointer.
  -- * \param nSqrStep \ref destination_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oRect rectangular window
  -- * \param nScaleFactor \ref integer_result_scaling.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiRectStdDev_32s_C1RSfs
     (pSrc : access nppdefs_h.Npp32s;
      nSrcStep : int;
      pSqr : access nppdefs_h.Npp32s;
      nSqrStep : int;
      pDst : access nppdefs_h.Npp32s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      oRect : nppdefs_h.NppiRect;
      nScaleFactor : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11976
   pragma Import (C, nppiRectStdDev_32s_C1RSfs, "nppiRectStdDev_32s_C1RSfs");

  --*
  -- * One-channel 32-bit signed image RectStdDev. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pSqr \ref destination_image_pointer.
  -- * \param nSqrStep \ref destination_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oRect rectangular window
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiRectStdDev_32s32f_C1R
     (pSrc : access nppdefs_h.Npp32s;
      nSrcStep : int;
      pSqr : access nppdefs_h.Npp64f;
      nSqrStep : int;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      oRect : nppdefs_h.NppiRect) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:11993
   pragma Import (C, nppiRectStdDev_32s32f_C1R, "nppiRectStdDev_32s32f_C1R");

  --* @}   
  --* @} image_rectstddev  
  --* @defgroup image_histogrameven HistogramEven
  -- * Primitives for computing the histogram of an image with evenly distributed bins.
  -- * @{
  -- *
  --  

  --* @name HistogramEven
  -- * The \f$nLowerLevel\f$ (inclusive) and \f$nUpperLevel\f$ (exclusive) define the boundaries of the range, 
  -- * which are evenly segmented into \f$nLevel - 1\f$ bins. The computed histogram is stored in \f$pHist\f$. 
  -- * The levels are calculated by another primitive \ref nppiEvenLevelsHost_32s and are stored 
  -- * in a host pointer \f$hpLevels\f$. The number of levels is also \f$nLevel - 1\f$.
  -- * The histogram \f$pHist[k]\f$ is defined as the total number of pixels that fall into the range:
  -- * \f$hpLevels[k] <= pSrc(j, i) < hpLevels[k+1]\f$.
  -- * The functions require additional scratch buffer for computations.
  -- * @{
  --  

  --*
  -- * Compute levels with even distribution.
  -- *
  -- * \param hpLevels A host pointer to array which receives the levels being
  -- *        computed. The array needs to be of size nLevels. 
  -- * \param nLevels The number of levels being computed. nLevels must be at least 2.
  -- * \param nLowerLevel Lower boundary value of the lowest level.
  -- * \param nUpperLevel Upper boundary value of the greatest level.
  -- * \return image_data_error_codes, or NPP_HISTO_NUMBER_OF_LEVELS_ERROR if an invalid nLevels is specified.
  -- 

   function nppiEvenLevelsHost_32s
     (hpLevels : access nppdefs_h.Npp32s;
      nLevels : int;
      nLowerLevel : nppdefs_h.Npp32s;
      nUpperLevel : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12027
   pragma Import (C, nppiEvenLevelsHost_32s, "nppiEvenLevelsHost_32s");

  --*
  -- * One-channel 8-bit unsigned HistogramEven.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pHist Pointer to array that receives the computed histogram. 
  -- *      The array must be of size nLevels-1. 
  -- * \param nLevels Number of levels.
  -- * \param nLowerLevel Lower boundary of lowest level bin.
  -- * \param nUpperLevel Upper boundary of highest level bin.
  -- * \param pBuffer Pointer to appropriately sized (\ref nppiHistogramEvenGetBufferSize_8u_C1R) 
  -- *      scratch buffer.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiHistogramEven_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pHist : access nppdefs_h.Npp32s;
      nLevels : int;
      nLowerLevel : nppdefs_h.Npp32s;
      nUpperLevel : nppdefs_h.Npp32s;
      pBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12045
   pragma Import (C, nppiHistogramEven_8u_C1R, "nppiHistogramEven_8u_C1R");

  --*
  -- * Three-channel 8-bit unsigned HistogramEven.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pHist Array of pointers which are receiving computed histograms per color channel. 
  -- *      Array pointed by pHist[i] be of size nLevels[i]-1.
  -- * \param nLevels Array containing number of levels per color channel. 
  -- * \param nLowerLevel Array containing lower-level of lowest bin per color channel.
  -- * \param nUpperLevel Array containing upper-level of highest bin per color channel.
  -- * \param pBuffer Pointer to appropriately sized (\ref nppiHistogramEvenGetBufferSize_8u_C3R) 
  -- *      scratch buffer.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiHistogramEven_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pHist : System.Address;
      nLevels : access int;
      nLowerLevel : access nppdefs_h.Npp32s;
      nUpperLevel : access nppdefs_h.Npp32s;
      pBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12064
   pragma Import (C, nppiHistogramEven_8u_C3R, "nppiHistogramEven_8u_C3R");

  --*
  -- * Four-channel 8-bit unsigned HistogramEven.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pHist Array of pointers which are receiving computed histograms per color channel. 
  -- *      Array pointed by pHist[i] be of size nLevels[i]-1.
  -- * \param nLevels Array containing number of levels per color channel. 
  -- * \param nLowerLevel Array containing lower-level of lowest bin per color channel.
  -- * \param nUpperLevel Array containing upper-level of highest bin per color channel.
  -- * \param pBuffer Pointer to appropriately sized (\ref nppiHistogramEvenGetBufferSize_8u_C4R) 
  -- *      scratch buffer.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  --  

   function nppiHistogramEven_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pHist : System.Address;
      nLevels : access int;
      nLowerLevel : access nppdefs_h.Npp32s;
      nUpperLevel : access nppdefs_h.Npp32s;
      pBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12083
   pragma Import (C, nppiHistogramEven_8u_C4R, "nppiHistogramEven_8u_C4R");

  --*
  -- * Four-channel 8-bit unsigned HistogramEven ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pHist Array of pointers which are receiving computed histograms per color channel. 
  -- *      Array pointed by pHist[i] be of size nLevels[i]-1.
  -- * \param nLevels Array containing number of levels per color channel. 
  -- * \param nLowerLevel Array containing lower-level of lowest bin per color channel.
  -- * \param nUpperLevel Array containing upper-level of highest bin per color channel.
  -- * \param pBuffer Pointer to appropriately sized (\ref nppiHistogramEvenGetBufferSize_8u_AC4R) 
  -- *      scratch buffer.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiHistogramEven_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pHist : System.Address;
      nLevels : access int;
      nLowerLevel : access nppdefs_h.Npp32s;
      nUpperLevel : access nppdefs_h.Npp32s;
      pBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12103
   pragma Import (C, nppiHistogramEven_8u_AC4R, "nppiHistogramEven_8u_AC4R");

  --*
  -- * One-channel 16-bit unsigned HistogramEven.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pHist Pointer to array that receives the computed histogram. 
  -- *      The array must be of size nLevels-1. 
  -- * \param nLevels Number of levels.
  -- * \param nLowerLevel Lower boundary of lowest level bin.
  -- * \param nUpperLevel Upper boundary of highest level bin.
  -- * \param pBuffer Pointer to appropriately sized (\ref nppiHistogramEvenGetBufferSize_16u_C1R) 
  -- *      scratch buffer.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiHistogramEven_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pHist : access nppdefs_h.Npp32s;
      nLevels : int;
      nLowerLevel : nppdefs_h.Npp32s;
      nUpperLevel : nppdefs_h.Npp32s;
      pBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12123
   pragma Import (C, nppiHistogramEven_16u_C1R, "nppiHistogramEven_16u_C1R");

  --*
  -- * Three-channel 16-bit unsigned HistogramEven.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pHist Array of pointers which are receiving computed histograms per color channel. 
  -- *      Array pointed by pHist[i] be of size nLevels[i]-1.
  -- * \param nLevels Array containing number of levels per color channel. 
  -- * \param nLowerLevel Array containing lower-level of lowest bin per color channel.
  -- * \param nUpperLevel Array containing upper-level of highest bin per color channel.
  -- * \param pBuffer Pointer to appropriately sized (\ref nppiHistogramEvenGetBufferSize_16u_C3R) 
  -- *      scratch buffer.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiHistogramEven_16u_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pHist : System.Address;
      nLevels : access int;
      nLowerLevel : access nppdefs_h.Npp32s;
      nUpperLevel : access nppdefs_h.Npp32s;
      pBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12142
   pragma Import (C, nppiHistogramEven_16u_C3R, "nppiHistogramEven_16u_C3R");

  --*
  -- * Four-channel 16-bit unsigned HistogramEven.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pHist Array of pointers which are receiving computed histograms per color channel. 
  -- *      Array pointed by pHist[i] be of size nLevels[i]-1.
  -- * \param nLevels Array containing number of levels per color channel. 
  -- * \param nLowerLevel Array containing lower-level of lowest bin per color channel.
  -- * \param nUpperLevel Array containing upper-level of highest bin per color channel.
  -- * \param pBuffer Pointer to appropriately sized (\ref nppiHistogramEvenGetBufferSize_16u_C4R) 
  -- *      scratch buffer.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiHistogramEven_16u_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pHist : System.Address;
      nLevels : access int;
      nLowerLevel : access nppdefs_h.Npp32s;
      nUpperLevel : access nppdefs_h.Npp32s;
      pBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12162
   pragma Import (C, nppiHistogramEven_16u_C4R, "nppiHistogramEven_16u_C4R");

  --*
  -- * Four-channel 16-bit unsigned HistogramEven ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pHist Array of pointers which are receiving computed histograms per color channel. 
  -- *      Array pointed by pHist[i] be of size nLevels[i]-1.
  -- * \param nLevels Array containing number of levels per color channel. 
  -- * \param nLowerLevel Array containing lower-level of lowest bin per color channel.
  -- * \param nUpperLevel Array containing upper-level of highest bin per color channel.
  -- * \param pBuffer Pointer to appropriately sized (\ref nppiHistogramEvenGetBufferSize_16u_AC4R) 
  -- *      scratch buffer.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiHistogramEven_16u_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pHist : System.Address;
      nLevels : access int;
      nLowerLevel : access nppdefs_h.Npp32s;
      nUpperLevel : access nppdefs_h.Npp32s;
      pBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12182
   pragma Import (C, nppiHistogramEven_16u_AC4R, "nppiHistogramEven_16u_AC4R");

  --*
  -- * One-channel 16-bit signed HistogramEven.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pHist Pointer to array that receives the computed histogram. 
  -- *      The array must be of size nLevels-1. 
  -- * \param nLevels Number of levels.
  -- * \param nLowerLevel Lower boundary of lowest level bin.
  -- * \param nUpperLevel Upper boundary of highest level bin.
  -- * \param pBuffer Pointer to appropriately sized (\ref nppiHistogramEvenGetBufferSize_16s_C1R) 
  -- *      scratch buffer.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiHistogramEven_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pHist : access nppdefs_h.Npp32s;
      nLevels : int;
      nLowerLevel : nppdefs_h.Npp32s;
      nUpperLevel : nppdefs_h.Npp32s;
      pBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12202
   pragma Import (C, nppiHistogramEven_16s_C1R, "nppiHistogramEven_16s_C1R");

  --*
  -- * Three-channel 16-bit signed HistogramEven.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pHist Array of pointers which are receiving computed histograms per color channel. 
  -- *      Array pointed by pHist[i] be of size nLevels[i]-1.
  -- * \param nLevels Array containing number of levels per color channel. 
  -- * \param nLowerLevel Array containing lower-level of lowest bin per color channel.
  -- * \param nUpperLevel Array containing upper-level of highest bin per color channel.
  -- * \param pBuffer Pointer to appropriately sized (\ref nppiHistogramEvenGetBufferSize_16s_C3R) 
  -- *      scratch buffer.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiHistogramEven_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pHist : System.Address;
      nLevels : access int;
      nLowerLevel : access nppdefs_h.Npp32s;
      nUpperLevel : access nppdefs_h.Npp32s;
      pBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12221
   pragma Import (C, nppiHistogramEven_16s_C3R, "nppiHistogramEven_16s_C3R");

  --*
  -- * Four-channel 16-bit signed HistogramEven.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pHist Array of pointers which are receiving computed histograms per color channel. 
  -- *      Array pointed by pHist[i] be of size nLevels[i]-1.
  -- * \param nLevels Array containing number of levels per color channel. 
  -- * \param nLowerLevel Array containing lower-level of lowest bin per color channel.
  -- * \param nUpperLevel Array containing upper-level of highest bin per color channel.
  -- * \param pBuffer Pointer to appropriately sized (\ref nppiHistogramEvenGetBufferSize_16s_C4R) 
  -- *      scratch buffer.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiHistogramEven_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pHist : System.Address;
      nLevels : access int;
      nLowerLevel : access nppdefs_h.Npp32s;
      nUpperLevel : access nppdefs_h.Npp32s;
      pBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12241
   pragma Import (C, nppiHistogramEven_16s_C4R, "nppiHistogramEven_16s_C4R");

  --*
  -- * Four-channel 16-bit signed HistogramEven ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pHist Array of pointers which are receiving computed histograms per color channel. 
  -- *      Array pointed by pHist[i] be of size nLevels[i]-1.
  -- * \param nLevels Array containing number of levels per color channel. 
  -- * \param nLowerLevel Array containing lower-level of lowest bin per color channel.
  -- * \param nUpperLevel Array containing upper-level of highest bin per color channel.
  -- * \param pBuffer Pointer to appropriately sized (\ref nppiHistogramEvenGetBufferSize_16s_AC4R) 
  -- *      scratch buffer.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiHistogramEven_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pHist : System.Address;
      nLevels : access int;
      nLowerLevel : access nppdefs_h.Npp32s;
      nUpperLevel : access nppdefs_h.Npp32s;
      pBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12261
   pragma Import (C, nppiHistogramEven_16s_AC4R, "nppiHistogramEven_16s_AC4R");

  --* @}  
  --* @name HistogramEvenGetBufferSize
  -- * Companion primitives for computing the device buffer size (in bytes) required by the HistogramEven primitives.
  -- * @{
  --  

  --*
  -- * Buffer size for \ref nppiHistogramEven_8u_C1R.
  -- * 
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nLevels Number of levels in the histogram.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes..
  --  

   function nppiHistogramEvenGetBufferSize_8u_C1R
     (oSizeROI : nppdefs_h.NppiSize;
      nLevels : int;
      hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12281
   pragma Import (C, nppiHistogramEvenGetBufferSize_8u_C1R, "nppiHistogramEvenGetBufferSize_8u_C1R");

  --*
  -- * Buffer size for \ref nppiHistogramEven_8u_C3R.
  -- * 
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nLevels Number of levels in the histogram.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes..
  --  

   function nppiHistogramEvenGetBufferSize_8u_C3R
     (oSizeROI : nppdefs_h.NppiSize;
      nLevels : access int;
      hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12293
   pragma Import (C, nppiHistogramEvenGetBufferSize_8u_C3R, "nppiHistogramEvenGetBufferSize_8u_C3R");

  --*
  -- * Buffer size for \ref nppiHistogramEven_8u_C4R.
  -- * 
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nLevels Array containing number of levels per color channel.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes..
  --  

   function nppiHistogramEvenGetBufferSize_8u_C4R
     (oSizeROI : nppdefs_h.NppiSize;
      nLevels : access int;
      hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12305
   pragma Import (C, nppiHistogramEvenGetBufferSize_8u_C4R, "nppiHistogramEvenGetBufferSize_8u_C4R");

  --*
  -- * Buffer size for \ref nppiHistogramEven_8u_AC4R.
  -- * 
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nLevels Array containing number of levels per color channel.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes..
  --  

   function nppiHistogramEvenGetBufferSize_8u_AC4R
     (oSizeROI : nppdefs_h.NppiSize;
      nLevels : access int;
      hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12317
   pragma Import (C, nppiHistogramEvenGetBufferSize_8u_AC4R, "nppiHistogramEvenGetBufferSize_8u_AC4R");

  --*
  -- * Buffer size for \ref nppiHistogramEven_16u_C1R.
  -- * 
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nLevels Number of levels in the histogram.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes..
  --  

   function nppiHistogramEvenGetBufferSize_16u_C1R
     (oSizeROI : nppdefs_h.NppiSize;
      nLevels : int;
      hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12329
   pragma Import (C, nppiHistogramEvenGetBufferSize_16u_C1R, "nppiHistogramEvenGetBufferSize_16u_C1R");

  --*
  -- * Buffer size for \ref nppiHistogramEven_16u_C3R.
  -- * 
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nLevels Array containing number of levels per color channel.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes..
  --  

   function nppiHistogramEvenGetBufferSize_16u_C3R
     (oSizeROI : nppdefs_h.NppiSize;
      nLevels : access int;
      hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12341
   pragma Import (C, nppiHistogramEvenGetBufferSize_16u_C3R, "nppiHistogramEvenGetBufferSize_16u_C3R");

  --*
  -- * Buffer size for \ref nppiHistogramEven_16u_C4R.
  -- * 
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nLevels Array containing number of levels per color channel.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes..
  --  

   function nppiHistogramEvenGetBufferSize_16u_C4R
     (oSizeROI : nppdefs_h.NppiSize;
      nLevels : access int;
      hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12353
   pragma Import (C, nppiHistogramEvenGetBufferSize_16u_C4R, "nppiHistogramEvenGetBufferSize_16u_C4R");

  --*
  -- * Buffer size for \ref nppiHistogramEven_16u_AC4R.
  -- * 
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nLevels Array containing number of levels per color channel.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes..
  --  

   function nppiHistogramEvenGetBufferSize_16u_AC4R
     (oSizeROI : nppdefs_h.NppiSize;
      nLevels : access int;
      hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12365
   pragma Import (C, nppiHistogramEvenGetBufferSize_16u_AC4R, "nppiHistogramEvenGetBufferSize_16u_AC4R");

  --*
  -- * Buffer size for \ref nppiHistogramEven_16s_C1R.
  -- * 
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nLevels Number of levels in the histogram.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes..
  --  

   function nppiHistogramEvenGetBufferSize_16s_C1R
     (oSizeROI : nppdefs_h.NppiSize;
      nLevels : int;
      hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12377
   pragma Import (C, nppiHistogramEvenGetBufferSize_16s_C1R, "nppiHistogramEvenGetBufferSize_16s_C1R");

  --*
  -- * Buffer size for \ref nppiHistogramEven_16s_C3R.
  -- * 
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nLevels Array containing number of levels per color channel.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes..
  --  

   function nppiHistogramEvenGetBufferSize_16s_C3R
     (oSizeROI : nppdefs_h.NppiSize;
      nLevels : access int;
      hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12389
   pragma Import (C, nppiHistogramEvenGetBufferSize_16s_C3R, "nppiHistogramEvenGetBufferSize_16s_C3R");

  --*
  -- * Buffer size for \ref nppiHistogramEven_16s_C4R.
  -- * 
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nLevels Array containing number of levels per color channel.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes..
  --  

   function nppiHistogramEvenGetBufferSize_16s_C4R
     (oSizeROI : nppdefs_h.NppiSize;
      nLevels : access int;
      hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12401
   pragma Import (C, nppiHistogramEvenGetBufferSize_16s_C4R, "nppiHistogramEvenGetBufferSize_16s_C4R");

  --*
  -- * Buffer size for \ref nppiHistogramEven_16s_AC4R.
  -- * 
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nLevels Array containing number of levels per color channel.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes..
  --  

   function nppiHistogramEvenGetBufferSize_16s_AC4R
     (oSizeROI : nppdefs_h.NppiSize;
      nLevels : access int;
      hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12413
   pragma Import (C, nppiHistogramEvenGetBufferSize_16s_AC4R, "nppiHistogramEvenGetBufferSize_16s_AC4R");

  --* @}  
  --* @} image_histogrameven  
  --* @defgroup image_histogramrange HistogramRange
  -- * Primitives for computing the histogram of an image within specified ranges.
  -- * @{
  -- *
  --  

  --* @name HistogramEven
  -- * The histogram is computed according to the ranges provided in \f$pLevels\f$. 
  -- * The histogram \f$pHist[k]\f$ is defined as the total number of pixels that fall into the range:
  -- * \f$pLevels[k] <= pSrc(j, i) < pLevels[k+1]\f$. The number of the histogram bins is \f$nLevel - 1\f$.
  -- * The functions require additional scratch buffer for computations.
  -- * @{
  --  

  --*
  -- * One-channel 8-bit unsigned HistogramRange.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pHist Pointer to array that receives the computed histogram. 
  -- *      The array must be of size nLevels-1. 
  -- * \param pLevels Pointer to array containing the level sizes of the bins.
  --        The array must be of size nLevels.
  -- * \param nLevels Number of levels in histogram.
  -- * \param pBuffer Pointer to appropriately sized (\ref nppiHistogramRangeGetBufferSize_8u_C1R) 
  -- *      scratch buffer.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiHistogramRange_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pHist : access nppdefs_h.Npp32s;
      pLevels : access nppdefs_h.Npp32s;
      nLevels : int;
      pBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12448
   pragma Import (C, nppiHistogramRange_8u_C1R, "nppiHistogramRange_8u_C1R");

  --*
  -- * Three-channel 8-bit unsigned HistogramRange.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pHist Array of pointers which are receiving the computed histograms per color channel. 
  -- *      Array pointed by pHist[i] must be of size nLevels[i]-1.
  -- * \param nLevels Array containing number of levels per color channel. 
  -- * \param pLevels Array containing pointers to level-arrays per color channel.
  --        Array pointed by pLevel[i] must be of size nLevels[i].
  -- * \param pBuffer Pointer to appropriately sized (\ref nppiHistogramRangeGetBufferSize_8u_C3R) 
  -- *      scratch buffer.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiHistogramRange_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pHist : System.Address;
      pLevels : System.Address;
      nLevels : access int;
      pBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12467
   pragma Import (C, nppiHistogramRange_8u_C3R, "nppiHistogramRange_8u_C3R");

  --*
  -- * Four-channel 8-bit unsigned HistogramRange.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pHist Array of pointers which are receiving the computed histograms per color channel. 
  -- *      Array pointed by pHist[i] must be of size nLevels[i]-1.
  -- * \param nLevels Array containing number of levels per color channel. 
  -- * \param pLevels Array containing pointers to level-arrays per color channel.
  --        Array pointed by pLevel[i] must be of size nLevels[i].
  -- * \param pBuffer Pointer to appropriately sized (\ref nppiHistogramRangeGetBufferSize_8u_C4R) 
  -- *      scratch buffer.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiHistogramRange_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pHist : System.Address;
      pLevels : System.Address;
      nLevels : access int;
      pBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12486
   pragma Import (C, nppiHistogramRange_8u_C4R, "nppiHistogramRange_8u_C4R");

  --*
  -- * Four-channel 8-bit unsigned HistogramRange ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pHist Array of pointers which are receiving the computed histograms per color channel. 
  -- *      Array pointed by pHist[i] must be of size nLevels[i]-1.
  -- * \param nLevels Array containing number of levels per color channel. 
  -- * \param pLevels Array containing pointers to level-arrays per color channel.
  --        Array pointed by pLevel[i] must be of size nLevels[i].
  -- * \param pBuffer Pointer to appropriately sized (\ref nppiHistogramRangeGetBufferSize_8u_AC4R) 
  -- *      scratch buffer.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiHistogramRange_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pHist : System.Address;
      pLevels : System.Address;
      nLevels : access int;
      pBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12505
   pragma Import (C, nppiHistogramRange_8u_AC4R, "nppiHistogramRange_8u_AC4R");

  --*
  -- * One-channel 16-bit unsigned HistogramRange.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pHist Pointer to array that receives the computed histogram. 
  -- *      The array must be of size nLevels-1. 
  -- * \param pLevels Pointer to array containing the level sizes of the bins.
  --        The array must be of size nLevels.
  -- * \param nLevels Number of levels in histogram.
  -- * \param pBuffer Pointer to appropriately sized (\ref nppiHistogramRangeGetBufferSize_16u_C1R) 
  -- *      scratch buffer.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiHistogramRange_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pHist : access nppdefs_h.Npp32s;
      pLevels : access nppdefs_h.Npp32s;
      nLevels : int;
      pBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12524
   pragma Import (C, nppiHistogramRange_16u_C1R, "nppiHistogramRange_16u_C1R");

  --*
  -- * Three-channel 16-bit unsigned HistogramRange.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pHist Array of pointers which are receiving the computed histograms per color channel. 
  -- *      Array pointed by pHist[i] must be of size nLevels[i]-1.
  -- * \param nLevels Array containing number of levels per color channel. 
  -- * \param pLevels Array containing pointers to level-arrays per color channel.
  --        Array pointed by pLevel[i] must be of size nLevels[i].
  -- * \param pBuffer Pointer to appropriately sized (\ref nppiHistogramRangeGetBufferSize_16u_C3R) 
  -- *      scratch buffer.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiHistogramRange_16u_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pHist : System.Address;
      pLevels : System.Address;
      nLevels : access int;
      pBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12543
   pragma Import (C, nppiHistogramRange_16u_C3R, "nppiHistogramRange_16u_C3R");

  --*
  -- * Four-channel 16-bit unsigned HistogramRange.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pHist Array of pointers which are receiving the computed histograms per color channel. 
  -- *      Array pointed by pHist[i] must be of size nLevels[i]-1.
  -- * \param nLevels Array containing number of levels per color channel. 
  -- * \param pLevels Array containing pointers to level-arrays per color channel.
  --        Array pointed by pLevel[i] must be of size nLevels[i].
  -- * \param pBuffer Pointer to appropriately sized (\ref nppiHistogramRangeGetBufferSize_16u_C4R) 
  -- *      scratch buffer.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiHistogramRange_16u_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pHist : System.Address;
      pLevels : System.Address;
      nLevels : access int;
      pBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12562
   pragma Import (C, nppiHistogramRange_16u_C4R, "nppiHistogramRange_16u_C4R");

  --*
  -- * Four-channel 16-bit unsigned HistogramRange ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pHist Array of pointers which are receiving the computed histograms per color channel. 
  -- *      Array pointed by pHist[i] must be of size nLevels[i]-1.
  -- * \param nLevels Array containing number of levels per color channel. 
  -- * \param pLevels Array containing pointers to level-arrays per color channel.
  --        Array pointed by pLevel[i] must be of size nLevels[i].
  -- * \param pBuffer Pointer to appropriately sized (\ref nppiHistogramRangeGetBufferSize_16u_AC4R) 
  -- *      scratch buffer.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiHistogramRange_16u_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pHist : System.Address;
      pLevels : System.Address;
      nLevels : access int;
      pBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12581
   pragma Import (C, nppiHistogramRange_16u_AC4R, "nppiHistogramRange_16u_AC4R");

  --*
  -- * One-channel 16-bit signed HistogramRange.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pHist Pointer to array that receives the computed histogram. 
  -- *      The array must be of size nLevels-1. 
  -- * \param pLevels Pointer to array containing the level sizes of the bins.
  --        The array must be of size nLevels.
  -- * \param nLevels Number of levels in histogram.
  -- * \param pBuffer Pointer to appropriately sized (\ref nppiHistogramRangeGetBufferSize_16s_C1R) 
  -- *      scratch buffer.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiHistogramRange_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pHist : access nppdefs_h.Npp32s;
      pLevels : access nppdefs_h.Npp32s;
      nLevels : int;
      pBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12600
   pragma Import (C, nppiHistogramRange_16s_C1R, "nppiHistogramRange_16s_C1R");

  --*
  -- * Three-channel 16-bit signed HistogramRange.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pHist Array of pointers which are receiving the computed histograms per color channel. 
  -- *      Array pointed by pHist[i] must be of size nLevels[i]-1.
  -- * \param nLevels Array containing number of levels per color channel. 
  -- * \param pLevels Array containing pointers to level-arrays per color channel.
  --        Array pointed by pLevel[i] must be of size nLevels[i].
  -- * \param pBuffer Pointer to appropriately sized (\ref nppiHistogramRangeGetBufferSize_16s_C3R) 
  -- *      scratch buffer.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiHistogramRange_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pHist : System.Address;
      pLevels : System.Address;
      nLevels : access int;
      pBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12619
   pragma Import (C, nppiHistogramRange_16s_C3R, "nppiHistogramRange_16s_C3R");

  --*
  -- * Four-channel 16-bit signed HistogramRange.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pHist Array of pointers which are receiving the computed histograms per color channel. 
  -- *      Array pointed by pHist[i] must be of size nLevels[i]-1.
  -- * \param nLevels Array containing number of levels per color channel. 
  -- * \param pLevels Array containing pointers to level-arrays per color channel.
  --        Array pointed by pLevel[i] must be of size nLevels[i].
  -- * \param pBuffer Pointer to appropriately sized (\ref nppiHistogramRangeGetBufferSize_16s_C4R) 
  -- *      scratch buffer.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiHistogramRange_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pHist : System.Address;
      pLevels : System.Address;
      nLevels : access int;
      pBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12638
   pragma Import (C, nppiHistogramRange_16s_C4R, "nppiHistogramRange_16s_C4R");

  --*
  -- * Four-channel 16-bit signed HistogramRange.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pHist Array of pointers which are receiving the computed histograms per color channel. 
  -- *      Array pointed by pHist[i] must be of size nLevels[i]-1.
  -- * \param nLevels Array containing number of levels per color channel. 
  -- * \param pLevels Array containing pointers to level-arrays per color channel.
  --        Array pointed by pLevel[i] must be of size nLevels[i].
  -- * \param pBuffer Pointer to appropriately sized (\ref nppiHistogramRangeGetBufferSize_16s_AC4R) 
  -- *      scratch buffer.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiHistogramRange_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pHist : System.Address;
      pLevels : System.Address;
      nLevels : access int;
      pBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12657
   pragma Import (C, nppiHistogramRange_16s_AC4R, "nppiHistogramRange_16s_AC4R");

  --*
  -- * One-channel 32-bit floating point HistogramRange.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pHist Pointer to array that receives the computed histogram. 
  -- *      The array must be of size nLevels-1. 
  -- * \param pLevels Pointer to array containing the level sizes of the bins.
  --        The array must be of size nLevels.
  -- * \param nLevels Number of levels in histogram.
  -- * \param pBuffer Pointer to appropriately sized (\ref nppiHistogramRangeGetBufferSize_32f_C1R) 
  -- *      scratch buffer.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiHistogramRange_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pHist : access nppdefs_h.Npp32s;
      pLevels : access nppdefs_h.Npp32f;
      nLevels : int;
      pBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12676
   pragma Import (C, nppiHistogramRange_32f_C1R, "nppiHistogramRange_32f_C1R");

  --*
  -- * Three-channel 32-bit floating point HistogramRange.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pHist Array of pointers which are receiving the computed histograms per color channel. 
  -- *      Array pointed by pHist[i] must be of size nLevels[i]-1.
  -- * \param nLevels Array containing number of levels per color channel. 
  -- * \param pLevels Array containing pointers to level-arrays per color channel.
  --        Array pointed by pLevel[i] must be of size nLevels[i].
  -- * \param pBuffer Pointer to appropriately sized (nppiHistogramRangeGetBufferSize_32f_C3R) 
  -- *      scratch buffer.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiHistogramRange_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pHist : System.Address;
      pLevels : System.Address;
      nLevels : access int;
      pBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12695
   pragma Import (C, nppiHistogramRange_32f_C3R, "nppiHistogramRange_32f_C3R");

  --*
  -- * Four-channel 32-bit floating point HistogramRange.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pHist Array of pointers which are receiving the computed histograms per color channel. 
  -- *      Array pointed by pHist[i] must be of size nLevels[i]-1.
  -- * \param nLevels Array containing number of levels per color channel. 
  -- * \param pLevels Array containing pointers to level-arrays per color channel.
  --        Array pointed by pLevel[i] must be of size nLevels[i].
  -- * \param pBuffer Pointer to appropriately sized (nppiHistogramRangeGetBufferSize_32f_C4R) 
  -- *      scratch buffer.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiHistogramRange_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pHist : System.Address;
      pLevels : System.Address;
      nLevels : access int;
      pBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12715
   pragma Import (C, nppiHistogramRange_32f_C4R, "nppiHistogramRange_32f_C4R");

  --*
  -- * Four-channel 32-bit floating point HistogramRange ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pHist Array of pointers which are receiving the computed histograms per color channel. 
  -- *      Array pointed by pHist[i] must be of size nLevels[i]-1.
  -- * \param nLevels Array containing number of levels per color channel. 
  -- * \param pLevels Array containing pointers to level-arrays per color channel.
  --        Array pointed by pLevel[i] must be of size nLevels[i].
  -- * \param pBuffer Pointer to appropriately sized (nppiHistogramRangeGetBufferSize_32f_AC4R) 
  -- *      scratch buffer.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiHistogramRange_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pHist : System.Address;
      pLevels : System.Address;
      nLevels : access int;
      pBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12734
   pragma Import (C, nppiHistogramRange_32f_AC4R, "nppiHistogramRange_32f_AC4R");

  --* @}  
  --* @name HistogramRangeGetBufferSize
  -- * Companion primitives for computing the device buffer size (in bytes) required by the HistogramRange primitives.
  -- * @{
  --  

  --*
  -- * Scratch-buffer size for nppiHistogramRange_8u_C1R.
  -- * 
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nLevels Number of levels in the histogram.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes..
  --  

   function nppiHistogramRangeGetBufferSize_8u_C1R
     (oSizeROI : nppdefs_h.NppiSize;
      nLevels : int;
      hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12753
   pragma Import (C, nppiHistogramRangeGetBufferSize_8u_C1R, "nppiHistogramRangeGetBufferSize_8u_C1R");

  --*
  -- * Scratch-buffer size for nppiHistogramRange_8u_C3R.
  -- * 
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nLevels Array containing number of levels per color channel.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes..
  --  

   function nppiHistogramRangeGetBufferSize_8u_C3R
     (oSizeROI : nppdefs_h.NppiSize;
      nLevels : access int;
      hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12765
   pragma Import (C, nppiHistogramRangeGetBufferSize_8u_C3R, "nppiHistogramRangeGetBufferSize_8u_C3R");

  --*
  -- * Scratch-buffer size for nppiHistogramRange_8u_C4R.
  -- * 
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nLevels Array containing number of levels per color channel.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes..
  --  

   function nppiHistogramRangeGetBufferSize_8u_C4R
     (oSizeROI : nppdefs_h.NppiSize;
      nLevels : access int;
      hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12777
   pragma Import (C, nppiHistogramRangeGetBufferSize_8u_C4R, "nppiHistogramRangeGetBufferSize_8u_C4R");

  --*
  -- * Scratch-buffer size for nppiHistogramRange_8u_AC4R.
  -- * 
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nLevels Array containing number of levels per color channel.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes..
  --  

   function nppiHistogramRangeGetBufferSize_8u_AC4R
     (oSizeROI : nppdefs_h.NppiSize;
      nLevels : access int;
      hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12789
   pragma Import (C, nppiHistogramRangeGetBufferSize_8u_AC4R, "nppiHistogramRangeGetBufferSize_8u_AC4R");

  --*
  -- * Scratch-buffer size for nppiHistogramRange_16u_C1R.
  -- * 
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nLevels Number of levels in the histogram.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes..
  --  

   function nppiHistogramRangeGetBufferSize_16u_C1R
     (oSizeROI : nppdefs_h.NppiSize;
      nLevels : int;
      hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12801
   pragma Import (C, nppiHistogramRangeGetBufferSize_16u_C1R, "nppiHistogramRangeGetBufferSize_16u_C1R");

  --*
  -- * Scratch-buffer size for nppiHistogramRange_16u_C3R.
  -- * 
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nLevels Array containing number of levels per color channel.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes..
  --  

   function nppiHistogramRangeGetBufferSize_16u_C3R
     (oSizeROI : nppdefs_h.NppiSize;
      nLevels : access int;
      hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12813
   pragma Import (C, nppiHistogramRangeGetBufferSize_16u_C3R, "nppiHistogramRangeGetBufferSize_16u_C3R");

  --*
  -- * Scratch-buffer size for nppiHistogramRange_16u_C4R.
  -- * 
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nLevels Array containing number of levels per color channel.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes..
  --  

   function nppiHistogramRangeGetBufferSize_16u_C4R
     (oSizeROI : nppdefs_h.NppiSize;
      nLevels : access int;
      hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12825
   pragma Import (C, nppiHistogramRangeGetBufferSize_16u_C4R, "nppiHistogramRangeGetBufferSize_16u_C4R");

  --*
  -- * Scratch-buffer size for nppiHistogramRange_16u_AC4R.
  -- * 
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nLevels Array containing number of levels per color channel.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes..
  --  

   function nppiHistogramRangeGetBufferSize_16u_AC4R
     (oSizeROI : nppdefs_h.NppiSize;
      nLevels : access int;
      hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12837
   pragma Import (C, nppiHistogramRangeGetBufferSize_16u_AC4R, "nppiHistogramRangeGetBufferSize_16u_AC4R");

  --*
  -- * Scratch-buffer size for nppiHistogramRange_16s_C1R.
  -- * 
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nLevels Number of levels in the histogram.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes..
  --  

   function nppiHistogramRangeGetBufferSize_16s_C1R
     (oSizeROI : nppdefs_h.NppiSize;
      nLevels : int;
      hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12849
   pragma Import (C, nppiHistogramRangeGetBufferSize_16s_C1R, "nppiHistogramRangeGetBufferSize_16s_C1R");

  --*
  -- * Scratch-buffer size for nppiHistogramRange_16s_C3R.
  -- * 
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nLevels Array containing number of levels per color channel.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes..
  --  

   function nppiHistogramRangeGetBufferSize_16s_C3R
     (oSizeROI : nppdefs_h.NppiSize;
      nLevels : access int;
      hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12861
   pragma Import (C, nppiHistogramRangeGetBufferSize_16s_C3R, "nppiHistogramRangeGetBufferSize_16s_C3R");

  --*
  -- * Scratch-buffer size for nppiHistogramRange_16s_C4R.
  -- * 
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nLevels Array containing number of levels per color channel.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes..
  --  

   function nppiHistogramRangeGetBufferSize_16s_C4R
     (oSizeROI : nppdefs_h.NppiSize;
      nLevels : access int;
      hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12873
   pragma Import (C, nppiHistogramRangeGetBufferSize_16s_C4R, "nppiHistogramRangeGetBufferSize_16s_C4R");

  --*
  -- * Scratch-buffer size for nppiHistogramRange_16s_AC4R.
  -- * 
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nLevels Array containing number of levels per color channel.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes..
  --  

   function nppiHistogramRangeGetBufferSize_16s_AC4R
     (oSizeROI : nppdefs_h.NppiSize;
      nLevels : access int;
      hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12885
   pragma Import (C, nppiHistogramRangeGetBufferSize_16s_AC4R, "nppiHistogramRangeGetBufferSize_16s_AC4R");

  --*
  -- * Scratch-buffer size for nppiHistogramRange_32f_C1R.
  -- * 
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nLevels Number of levels in the histogram.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes..
  --  

   function nppiHistogramRangeGetBufferSize_32f_C1R
     (oSizeROI : nppdefs_h.NppiSize;
      nLevels : int;
      hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12897
   pragma Import (C, nppiHistogramRangeGetBufferSize_32f_C1R, "nppiHistogramRangeGetBufferSize_32f_C1R");

  --*
  -- * Scratch-buffer size for nppiHistogramRange_32f_C3R.
  -- * 
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nLevels Array containing number of levels per color channel.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes..
  --  

   function nppiHistogramRangeGetBufferSize_32f_C3R
     (oSizeROI : nppdefs_h.NppiSize;
      nLevels : access int;
      hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12909
   pragma Import (C, nppiHistogramRangeGetBufferSize_32f_C3R, "nppiHistogramRangeGetBufferSize_32f_C3R");

  --*
  -- * Scratch-buffer size for nppiHistogramRange_32f_C4R.
  -- * 
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nLevels Array containing number of levels per color channel.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes..
  --  

   function nppiHistogramRangeGetBufferSize_32f_C4R
     (oSizeROI : nppdefs_h.NppiSize;
      nLevels : access int;
      hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12921
   pragma Import (C, nppiHistogramRangeGetBufferSize_32f_C4R, "nppiHistogramRangeGetBufferSize_32f_C4R");

  --*
  -- * Scratch-buffer size for nppiHistogramRange_32f_AC4R.
  -- * 
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nLevels Array containing number of levels per color channel.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes..
  --  

   function nppiHistogramRangeGetBufferSize_32f_AC4R
     (oSizeROI : nppdefs_h.NppiSize;
      nLevels : access int;
      hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:12933
   pragma Import (C, nppiHistogramRangeGetBufferSize_32f_AC4R, "nppiHistogramRangeGetBufferSize_32f_AC4R");

  --* @}  
  --* @} image_histogramrange  
  --* @defgroup image_proximity Image Proximity
  -- * Primitives for computing the proximity measure between a source image and a template image.
  -- *
  -- * \section general_introduction General Introduction
  -- * There are basically two approaches to compute the proximity measure for template matching, 
  -- * Euclidean distance and the cross correlation.
  -- * -# Euclidean distance computes the sum of the squared distance (SSD) between the corresponding 
  -- * pixels of the source image and the template image. The smaller the distance is, the more 
  -- * similar the source image and the template image is around the pixel. The anchor of the template  
  -- * image is used during the computations, which always lies in the gemotric center of the image. 
  -- * Given a source image \f$pSrc\f$ (\f$W_s \times H_s\f$) and a template image \f$pTpl\f$ (\f$W_t \times H_t\f$), 
  -- * the Euclidean distance \f$D_{st}(c,r)\f$ between two images at pixel in row \f$r\f$ and column 
  -- * \f$c\f$ is computed as (\f$s\f$ stands for source image and \f$t\f$ for template image for short):
  -- * \f[D_{st}(c,r)=\sum_{j=0}^{H_t-1}\sum_{i=0}^{W_t-1}[pTpl(j,i)-pSrc(j+c-\frac{H_t}{2}, i+r-\frac{W_t}{2})]^2 \f]
  -- * -# Cross correlation computes the sum of the product between the corresponding pixels of the source 
  -- * image and the template image. The cross correlation \f$R_{st}(c,r)\f$ is calculated as:
  -- * \f[R_{st}(c,r)=\sum_{j=0}^{H_t-1}\sum_{i=0}^{W_t-1}[pTpl(j,i)\cdot pSrc(j+c-\frac{H_t}{2}, i+r-\frac{W_t}{2})] \f]
  -- * The larger the cross correlation value is, the more similar the source image and the template image is around the pixel. 
  -- * -# The cross correlation \f$R_{st}(c,r)\f$ is affected by the brightness of the images which may vary due to the lighting 
  -- * and exposure conditions. Therefore, NPP computes the cross correlation coefficient to circumvent this dependence. 
  -- * This is typically done at every step by subtracting the mean from every pixel value, i.e.,
  -- * \f[\tilde{R}_{st}(c,r)=\sum_{j=0}^{H_t-1}\sum_{i=0}^{W_t-1}[pTpl(j,i)-Mean_t]\cdot [pSrc(j+c-\frac{H_t}{2}, i+r-\frac{W_t}{2})-Mean_s] \f]
  -- * 
  -- * NPP computes the normalized values of Euclidean distance, cross correlation and the cross correlation coefficient.
  -- * -# The normalized Euclidean distance \f$\sigma_{st}(c,r)\f$ is defined as:
  -- * \f[\sigma_{st}(c,r) = \frac{D_{st}(c,r)}{\sqrt{R_{ss}(c,r)\cdot R_{tt}(\frac{H_t}{2},\frac{W_t}{2})}} \f]
  -- * -# The normalized cross correlation \f$\rho_{st}(c,r)\f$ is defined as:
  -- * \f[\rho_{st}(c,r) = \frac{R_{st}(c,r)}{\sqrt{R_{ss}(c,r)\cdot R_{tt}(\frac{H_t}{2},\frac{W_t}{2})}} \f]
  -- * The \f$R_{ss}(c,r)\f$ and \f$R_{tt}(\frac{H_t}{2}, \frac{W_t}{2}\f$ denote the auto correlation of the source
  -- * image and the template image individually. They are defined as:
  -- * \f[R_{ss}(c,r)=\sum_{j=c-\frac{H_t}{2}}^{c+\frac{H_t}{2}}\sum_{i=r-\frac{W_t}{2}}^{r+\frac{W_t}{2}}pSrc(j, i) \f]
  -- * \f[R_{tt}(\frac{H_t}{2},\frac{W_t}{2})=\sum_{j=0}^{H_t-1}\sum_{i=0}^{W_t-1}pTpl(j,i) \f]
  -- * -# Similarly, the normalized cross correlation coefficient \f$\gamma_{st}(c,r)\f$ is calculated as:
  -- * \f[\gamma_{st}(c,r) = \frac{\tilde{R}_{st}(c,r)}{\sqrt{\tilde{R}_{ss}(c,r)\cdot \tilde{R}_{tt}(\frac{H_t}{2},\frac{W_t}{2})}} \f]
  -- * The \f$\tilde{R}_{ss}(c,r)\f$ and \f$\tilde{R}_{tt}(\frac{H_t}{2}, \frac{W_t}{2}\f$ are defined as:
  -- * \f[\tilde{R}_{ss}(c,r)=\sum_{j=c-\frac{H_t}{2}}^{c+\frac{H_t}{2}}\sum_{i=r-\frac{W_t}{2}}^{r+\frac{W_t}{2}}[pSrc(j, i)-Mean_s] \f]
  -- * \f[\tilde{R}_{tt}(\frac{H_t}{2},\frac{W_t}{2})=\sum_{j=0}^{H_t-1}\sum_{i=0}^{W_t-1}[pTpl(j,i)-Mean_t] \f]
  -- *
  -- * \section category Categorizations
  -- * The Euclidean distance and the cross correlation are categorized into three types, full, same, and valid. 
  -- * -# Full mode indicates that the anchor of the template image starts from the outside of the source image, 
  -- * assuming the out-of-boundary pixels are zeor-padded. The size of the destination
  -- * image is \f$(W_s + W_t - 1) \times (H_s + H_t - 1)\f$.
  -- * -# Same mode means that the anchor of the template image starts from the top left pixel
  -- * of the source image. All the out-of-boundary pixels are also zero-padded.
  -- * The size of the destination image is the same as the source one, i.e., \f$W_s \times H_s\f$.
  -- * -# Valid mode indicates that there are no out-of-boudnary readings from the source image.
  -- * The anchor of the template image starts from the inside of the source image. The 
  -- * size of the destination image is \f$(W_s - W_t + 1) \times (H_s - H_t + 1)\f$.
  -- * 
  -- * @{
  --  

  --* @defgroup sqrdistancefullnorm SqrDistanceFull_Norm 
  -- * Primitives for computing the normalized Euclidean distance between two images with full mode.
  -- * @{
  --  

  --*
  -- * @name SqrDistanceFull_Norm
  -- * The functions compute the \f$\sigma_{st}(c,r)\f$ in \ref general_introduction
  -- * with full mode (see \ref category).
  -- * @{
  --  

  --*
  -- * One-channel 8-bit unsigned image SqrDistanceFull_Norm, scaled by \f$2^(-nScaleFactor)\f$. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param nScaleFactor \ref integer_result_scaling.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceFull_Norm_8u_C1RSfs
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      nScaleFactor : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13015
   pragma Import (C, nppiSqrDistanceFull_Norm_8u_C1RSfs, "nppiSqrDistanceFull_Norm_8u_C1RSfs");

  --*
  -- * Three-channel 8-bit unsigned image SqrDistanceFull_Norm, scaled by \f$2^(-nScaleFactor)\f$. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param nScaleFactor \ref integer_result_scaling.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceFull_Norm_8u_C3RSfs
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      nScaleFactor : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13034
   pragma Import (C, nppiSqrDistanceFull_Norm_8u_C3RSfs, "nppiSqrDistanceFull_Norm_8u_C3RSfs");

  --*
  -- * Four-channel 8-bit unsigned image SqrDistanceFull_Norm, scaled by \f$2^(-nScaleFactor)\f$. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param nScaleFactor \ref integer_result_scaling.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceFull_Norm_8u_C4RSfs
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      nScaleFactor : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13053
   pragma Import (C, nppiSqrDistanceFull_Norm_8u_C4RSfs, "nppiSqrDistanceFull_Norm_8u_C4RSfs");

  --*
  -- * Four-channel 8-bit unsigned image SqrDistanceFull_Norm ignoring alpha channel, scaled by \f$2^(-nScaleFactor)\f$. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param nScaleFactor \ref integer_result_scaling.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceFull_Norm_8u_AC4RSfs
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      nScaleFactor : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13072
   pragma Import (C, nppiSqrDistanceFull_Norm_8u_AC4RSfs, "nppiSqrDistanceFull_Norm_8u_AC4RSfs");

  --*
  -- * One-channel 32-bit floating point image SqrDistanceFull_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceFull_Norm_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp32f;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13090
   pragma Import (C, nppiSqrDistanceFull_Norm_32f_C1R, "nppiSqrDistanceFull_Norm_32f_C1R");

  --*
  -- * Three-channel 32-bit floating point image SqrDistanceFull_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceFull_Norm_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp32f;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13108
   pragma Import (C, nppiSqrDistanceFull_Norm_32f_C3R, "nppiSqrDistanceFull_Norm_32f_C3R");

  --*
  -- * Four-channel 32-bit floating point image SqrDistanceFull_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceFull_Norm_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp32f;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13126
   pragma Import (C, nppiSqrDistanceFull_Norm_32f_C4R, "nppiSqrDistanceFull_Norm_32f_C4R");

  --*
  -- * Four-channel 32-bit floating point image SqrDistanceFull_Norm ignoring alpha channel. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceFull_Norm_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp32f;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13144
   pragma Import (C, nppiSqrDistanceFull_Norm_32f_AC4R, "nppiSqrDistanceFull_Norm_32f_AC4R");

  --*
  -- * One-channel 8-bit unsigned image SqrDistanceFull_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceFull_Norm_8u32f_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13162
   pragma Import (C, nppiSqrDistanceFull_Norm_8u32f_C1R, "nppiSqrDistanceFull_Norm_8u32f_C1R");

  --*
  -- * Three-channel 8-bit unsigned image SqrDistanceFull_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceFull_Norm_8u32f_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13180
   pragma Import (C, nppiSqrDistanceFull_Norm_8u32f_C3R, "nppiSqrDistanceFull_Norm_8u32f_C3R");

  --*
  -- * Four-channel 8-bit unsigned image SqrDistanceFull_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceFull_Norm_8u32f_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13198
   pragma Import (C, nppiSqrDistanceFull_Norm_8u32f_C4R, "nppiSqrDistanceFull_Norm_8u32f_C4R");

  --*
  -- * Four-channel 8-bit unsigned image SqrDistanceFull_Norm ignoring alpha channel. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceFull_Norm_8u32f_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13216
   pragma Import (C, nppiSqrDistanceFull_Norm_8u32f_AC4R, "nppiSqrDistanceFull_Norm_8u32f_AC4R");

  --*
  -- * One-channel 8-bit signed image SqrDistanceFull_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceFull_Norm_8s32f_C1R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8s;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13234
   pragma Import (C, nppiSqrDistanceFull_Norm_8s32f_C1R, "nppiSqrDistanceFull_Norm_8s32f_C1R");

  --*
  -- * Three-channel 8-bit signed image SqrDistanceFull_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceFull_Norm_8s32f_C3R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8s;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13252
   pragma Import (C, nppiSqrDistanceFull_Norm_8s32f_C3R, "nppiSqrDistanceFull_Norm_8s32f_C3R");

  --*
  -- * Four-channel 8-bit signed image SqrDistanceFull_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceFull_Norm_8s32f_C4R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8s;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13270
   pragma Import (C, nppiSqrDistanceFull_Norm_8s32f_C4R, "nppiSqrDistanceFull_Norm_8s32f_C4R");

  --*
  -- * Four-channel 8-bit signed image SqrDistanceFull_Norm ignoring alpha channel. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceFull_Norm_8s32f_AC4R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8s;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13288
   pragma Import (C, nppiSqrDistanceFull_Norm_8s32f_AC4R, "nppiSqrDistanceFull_Norm_8s32f_AC4R");

  --*
  -- * One-channel 16-bit unsigned image SqrDistanceFull_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceFull_Norm_16u32f_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp16u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13306
   pragma Import (C, nppiSqrDistanceFull_Norm_16u32f_C1R, "nppiSqrDistanceFull_Norm_16u32f_C1R");

  --*
  -- * Three-channel 16-bit unsigned image SqrDistanceFull_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceFull_Norm_16u32f_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp16u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13324
   pragma Import (C, nppiSqrDistanceFull_Norm_16u32f_C3R, "nppiSqrDistanceFull_Norm_16u32f_C3R");

  --*
  -- * Four-channel 16-bit unsigned image SqrDistanceFull_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceFull_Norm_16u32f_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp16u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13342
   pragma Import (C, nppiSqrDistanceFull_Norm_16u32f_C4R, "nppiSqrDistanceFull_Norm_16u32f_C4R");

  --*
  -- * Four-channel 16-bit unsigned image SqrDistanceFull_Norm ignoring alpha channel. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceFull_Norm_16u32f_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp16u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13360
   pragma Import (C, nppiSqrDistanceFull_Norm_16u32f_AC4R, "nppiSqrDistanceFull_Norm_16u32f_AC4R");

  --* @}  
  --* @} SqrDistanceFull_Norm  
  --*
  -- * @defgroup sqrdistancesamenorm SqrDistanceSame_Norm
  -- * Primitives for computing the normalized Euclidean distance between two images with same mode.
  -- * @{
  --  

  --*
  -- * @name SqrDistanceSame_Norm
  -- * The functions compute the \f$\sigma_{st}(c,r)\f$ in \ref general_introduction 
  -- * with same mode (see \ref category).
  -- * @{
  --  

  --*
  -- * One-channel 8-bit unsigned image SqrDistanceSame_Norm, scaled by \f$2^(-nScaleFactor)\f$. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param nScaleFactor \ref integer_result_scaling.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceSame_Norm_8u_C1RSfs
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      nScaleFactor : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13392
   pragma Import (C, nppiSqrDistanceSame_Norm_8u_C1RSfs, "nppiSqrDistanceSame_Norm_8u_C1RSfs");

  --*
  -- * Three-channel 8-bit unsigned image SqrDistanceSame_Norm, scaled by \f$2^(-nScaleFactor)\f$. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param nScaleFactor \ref integer_result_scaling.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceSame_Norm_8u_C3RSfs
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      nScaleFactor : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13411
   pragma Import (C, nppiSqrDistanceSame_Norm_8u_C3RSfs, "nppiSqrDistanceSame_Norm_8u_C3RSfs");

  --*
  -- * Four-channel 8-bit unsigned image SqrDistanceSame_Norm, scaled by \f$2^(-nScaleFactor)\f$. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param nScaleFactor \ref integer_result_scaling.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceSame_Norm_8u_C4RSfs
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      nScaleFactor : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13430
   pragma Import (C, nppiSqrDistanceSame_Norm_8u_C4RSfs, "nppiSqrDistanceSame_Norm_8u_C4RSfs");

  --*
  -- * Four-channel 8-bit unsigned image SqrDistanceSame_Norm ignoring alpha channel, scaled by \f$2^(-nScaleFactor)\f$. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param nScaleFactor \ref integer_result_scaling.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceSame_Norm_8u_AC4RSfs
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      nScaleFactor : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13449
   pragma Import (C, nppiSqrDistanceSame_Norm_8u_AC4RSfs, "nppiSqrDistanceSame_Norm_8u_AC4RSfs");

  --*
  -- * One-channel 32-bit floating point image SqrDistanceSame_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceSame_Norm_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp32f;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13467
   pragma Import (C, nppiSqrDistanceSame_Norm_32f_C1R, "nppiSqrDistanceSame_Norm_32f_C1R");

  --*
  -- * Three-channel 32-bit floating point image SqrDistanceSame_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceSame_Norm_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp32f;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13485
   pragma Import (C, nppiSqrDistanceSame_Norm_32f_C3R, "nppiSqrDistanceSame_Norm_32f_C3R");

  --*
  -- * Four-channel 32-bit floating point image SqrDistanceSame_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceSame_Norm_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp32f;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13503
   pragma Import (C, nppiSqrDistanceSame_Norm_32f_C4R, "nppiSqrDistanceSame_Norm_32f_C4R");

  --*
  -- * Four-channel 32-bit floating point image SqrDistanceSame_Norm ignoring alpha channel. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceSame_Norm_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp32f;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13521
   pragma Import (C, nppiSqrDistanceSame_Norm_32f_AC4R, "nppiSqrDistanceSame_Norm_32f_AC4R");

  --*
  -- * One-channel 8-bit unsigned image SqrDistanceSame_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceSame_Norm_8u32f_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13539
   pragma Import (C, nppiSqrDistanceSame_Norm_8u32f_C1R, "nppiSqrDistanceSame_Norm_8u32f_C1R");

  --*
  -- * Three-channel 8-bit unsigned image SqrDistanceSame_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceSame_Norm_8u32f_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13557
   pragma Import (C, nppiSqrDistanceSame_Norm_8u32f_C3R, "nppiSqrDistanceSame_Norm_8u32f_C3R");

  --*
  -- * Four-channel 8-bit unsigned image SqrDistanceSame_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceSame_Norm_8u32f_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13575
   pragma Import (C, nppiSqrDistanceSame_Norm_8u32f_C4R, "nppiSqrDistanceSame_Norm_8u32f_C4R");

  --*
  -- * Four-channel 8-bit unsigned image SqrDistanceSame_Norm ignoring alpha channel. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceSame_Norm_8u32f_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13593
   pragma Import (C, nppiSqrDistanceSame_Norm_8u32f_AC4R, "nppiSqrDistanceSame_Norm_8u32f_AC4R");

  --*
  -- * One-channel 8-bit signed image SqrDistanceSame_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceSame_Norm_8s32f_C1R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8s;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13611
   pragma Import (C, nppiSqrDistanceSame_Norm_8s32f_C1R, "nppiSqrDistanceSame_Norm_8s32f_C1R");

  --*
  -- * Three-channel 8-bit signed image SqrDistanceSame_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceSame_Norm_8s32f_C3R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8s;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13629
   pragma Import (C, nppiSqrDistanceSame_Norm_8s32f_C3R, "nppiSqrDistanceSame_Norm_8s32f_C3R");

  --*
  -- * Four-channel 8-bit signed image SqrDistanceSame_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceSame_Norm_8s32f_C4R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8s;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13647
   pragma Import (C, nppiSqrDistanceSame_Norm_8s32f_C4R, "nppiSqrDistanceSame_Norm_8s32f_C4R");

  --*
  -- * Four-channel 8-bit signed image SqrDistanceSame_Norm ignoring alpha channel. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceSame_Norm_8s32f_AC4R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8s;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13665
   pragma Import (C, nppiSqrDistanceSame_Norm_8s32f_AC4R, "nppiSqrDistanceSame_Norm_8s32f_AC4R");

  --*
  -- * One-channel 16-bit unsigned image SqrDistanceSame_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceSame_Norm_16u32f_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp16u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13683
   pragma Import (C, nppiSqrDistanceSame_Norm_16u32f_C1R, "nppiSqrDistanceSame_Norm_16u32f_C1R");

  --*
  -- * Three-channel 16-bit unsigned image SqrDistanceSame_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceSame_Norm_16u32f_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp16u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13701
   pragma Import (C, nppiSqrDistanceSame_Norm_16u32f_C3R, "nppiSqrDistanceSame_Norm_16u32f_C3R");

  --*
  -- * Four-channel 16-bit unsigned image SqrDistanceSame_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceSame_Norm_16u32f_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp16u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13719
   pragma Import (C, nppiSqrDistanceSame_Norm_16u32f_C4R, "nppiSqrDistanceSame_Norm_16u32f_C4R");

  --*
  -- * Four-channel 16-bit unsigned image SqrDistanceSame_Norm ignoring alpha channel. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceSame_Norm_16u32f_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp16u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13737
   pragma Import (C, nppiSqrDistanceSame_Norm_16u32f_AC4R, "nppiSqrDistanceSame_Norm_16u32f_AC4R");

  --* @}  
  --* @} SqrDistanceFull_Norm  
  --*
  -- * @defgroup sqrdistancevalidnorm SqrDistanceValid_Norm
  -- * Primitives for computing the normalized Euclidean distance between two images with valid mode.
  -- * @{
  --  

  --*
  -- * @name SqrDistanceValid_Norm
  -- * The functions compute the \f$\sigma_{st}(c,r)\f$ in \ref general_introduction 
  -- * with valid mode (see \ref category).
  -- * @{
  --  

  --*
  -- * One-channel 8-bit unsigned image SqrDistanceValid_Norm, scaled by \f$2^(-nScaleFactor)\f$. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param nScaleFactor \ref integer_result_scaling.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceValid_Norm_8u_C1RSfs
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      nScaleFactor : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13769
   pragma Import (C, nppiSqrDistanceValid_Norm_8u_C1RSfs, "nppiSqrDistanceValid_Norm_8u_C1RSfs");

  --*
  -- * Three-channel 8-bit unsigned image SqrDistanceValid_Norm, scaled by \f$2^(-nScaleFactor)\f$. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param nScaleFactor \ref integer_result_scaling.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceValid_Norm_8u_C3RSfs
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      nScaleFactor : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13788
   pragma Import (C, nppiSqrDistanceValid_Norm_8u_C3RSfs, "nppiSqrDistanceValid_Norm_8u_C3RSfs");

  --*
  -- * Four-channel 8-bit unsigned image SqrDistanceValid_Norm, scaled by \f$2^(-nScaleFactor)\f$. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param nScaleFactor \ref integer_result_scaling.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceValid_Norm_8u_C4RSfs
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      nScaleFactor : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13807
   pragma Import (C, nppiSqrDistanceValid_Norm_8u_C4RSfs, "nppiSqrDistanceValid_Norm_8u_C4RSfs");

  --*
  -- * Four-channel 8-bit unsigned image SqrDistanceValid_Norm ignoring alpha channel, scaled by \f$2^(-nScaleFactor)\f$. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param nScaleFactor \ref integer_result_scaling.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceValid_Norm_8u_AC4RSfs
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      nScaleFactor : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13826
   pragma Import (C, nppiSqrDistanceValid_Norm_8u_AC4RSfs, "nppiSqrDistanceValid_Norm_8u_AC4RSfs");

  --*
  -- * One-channel 32-bit floating point image SqrDistanceValid_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceValid_Norm_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp32f;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13844
   pragma Import (C, nppiSqrDistanceValid_Norm_32f_C1R, "nppiSqrDistanceValid_Norm_32f_C1R");

  --*
  -- * Three-channel 32-bit floating point image SqrDistanceValid_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceValid_Norm_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp32f;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13862
   pragma Import (C, nppiSqrDistanceValid_Norm_32f_C3R, "nppiSqrDistanceValid_Norm_32f_C3R");

  --*
  -- * Four-channel 32-bit floating point image SqrDistanceValid_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceValid_Norm_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp32f;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13880
   pragma Import (C, nppiSqrDistanceValid_Norm_32f_C4R, "nppiSqrDistanceValid_Norm_32f_C4R");

  --*
  -- * Four-channel 32-bit floating point image SqrDistanceValid_Norm ignoring alpha channel. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceValid_Norm_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp32f;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13898
   pragma Import (C, nppiSqrDistanceValid_Norm_32f_AC4R, "nppiSqrDistanceValid_Norm_32f_AC4R");

  --*
  -- * One-channel 8-bit unsigned image SqrDistanceValid_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceValid_Norm_8u32f_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13916
   pragma Import (C, nppiSqrDistanceValid_Norm_8u32f_C1R, "nppiSqrDistanceValid_Norm_8u32f_C1R");

  --*
  -- * Three-channel 8-bit unsigned image SqrDistanceValid_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceValid_Norm_8u32f_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13934
   pragma Import (C, nppiSqrDistanceValid_Norm_8u32f_C3R, "nppiSqrDistanceValid_Norm_8u32f_C3R");

  --*
  -- * Four-channel 8-bit unsigned image SqrDistanceValid_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceValid_Norm_8u32f_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13952
   pragma Import (C, nppiSqrDistanceValid_Norm_8u32f_C4R, "nppiSqrDistanceValid_Norm_8u32f_C4R");

  --*
  -- * Four-channel 8-bit unsigned image SqrDistanceValid_Norm ignoring alpha channel. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceValid_Norm_8u32f_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13970
   pragma Import (C, nppiSqrDistanceValid_Norm_8u32f_AC4R, "nppiSqrDistanceValid_Norm_8u32f_AC4R");

  --*
  -- * One-channel 8-bit signed image SqrDistanceValid_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceValid_Norm_8s32f_C1R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8s;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:13988
   pragma Import (C, nppiSqrDistanceValid_Norm_8s32f_C1R, "nppiSqrDistanceValid_Norm_8s32f_C1R");

  --*
  -- * Three-channel 8-bit signed image SqrDistanceValid_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceValid_Norm_8s32f_C3R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8s;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14006
   pragma Import (C, nppiSqrDistanceValid_Norm_8s32f_C3R, "nppiSqrDistanceValid_Norm_8s32f_C3R");

  --*
  -- * Four-channel 8-bit signed image SqrDistanceValid_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceValid_Norm_8s32f_C4R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8s;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14024
   pragma Import (C, nppiSqrDistanceValid_Norm_8s32f_C4R, "nppiSqrDistanceValid_Norm_8s32f_C4R");

  --*
  -- * Four-channel 8-bit signed image SqrDistanceValid_Norm ignoring alpha channel. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceValid_Norm_8s32f_AC4R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8s;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14042
   pragma Import (C, nppiSqrDistanceValid_Norm_8s32f_AC4R, "nppiSqrDistanceValid_Norm_8s32f_AC4R");

  --*
  -- * One-channel 16-bit unsigned image SqrDistanceValid_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceValid_Norm_16u32f_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp16u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14060
   pragma Import (C, nppiSqrDistanceValid_Norm_16u32f_C1R, "nppiSqrDistanceValid_Norm_16u32f_C1R");

  --*
  -- * Three-channel 16-bit unsigned image SqrDistanceValid_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceValid_Norm_16u32f_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp16u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14078
   pragma Import (C, nppiSqrDistanceValid_Norm_16u32f_C3R, "nppiSqrDistanceValid_Norm_16u32f_C3R");

  --*
  -- * Four-channel 16-bit unsigned image SqrDistanceValid_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceValid_Norm_16u32f_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp16u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14096
   pragma Import (C, nppiSqrDistanceValid_Norm_16u32f_C4R, "nppiSqrDistanceValid_Norm_16u32f_C4R");

  --*
  -- * Four-channel 16-bit unsigned image SqrDistanceValid_Norm ignoring alpha channel. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSqrDistanceValid_Norm_16u32f_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp16u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14114
   pragma Import (C, nppiSqrDistanceValid_Norm_16u32f_AC4R, "nppiSqrDistanceValid_Norm_16u32f_AC4R");

  --* @}  
  --* @} SqrDistanceValid_Norm 
  --*
  -- * @defgroup crosscorrfullnorm CrossCorrFull_Norm
  -- * Primitives for computing the normalized cross correlation between two images with full mode.
  -- *
  -- * @{
  --  

  --*
  -- * @name CrossCorrFull_Norm
  -- * The functions compute the \f$\rho_{st}(c,r)\f$ in \ref general_introduction 
  -- * with full mode (see \ref category).
  -- * @{
  --  

  --*
  -- * One-channel 8-bit unsigned image CrossCorrFull_Norm, scaled by \f$2^(-nScaleFactor)\f$. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param nScaleFactor \ref integer_result_scaling.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrFull_Norm_8u_C1RSfs
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      nScaleFactor : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14147
   pragma Import (C, nppiCrossCorrFull_Norm_8u_C1RSfs, "nppiCrossCorrFull_Norm_8u_C1RSfs");

  --*
  -- * Three-channel 8-bit unsigned image CrossCorrFull_Norm, scaled by \f$2^(-nScaleFactor)\f$. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param nScaleFactor \ref integer_result_scaling.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrFull_Norm_8u_C3RSfs
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      nScaleFactor : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14166
   pragma Import (C, nppiCrossCorrFull_Norm_8u_C3RSfs, "nppiCrossCorrFull_Norm_8u_C3RSfs");

  --*
  -- * Four-channel 8-bit unsigned image CrossCorrFull_Norm, scaled by \f$2^(-nScaleFactor)\f$. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param nScaleFactor \ref integer_result_scaling.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrFull_Norm_8u_C4RSfs
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      nScaleFactor : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14185
   pragma Import (C, nppiCrossCorrFull_Norm_8u_C4RSfs, "nppiCrossCorrFull_Norm_8u_C4RSfs");

  --*
  -- * Four-channel 8-bit unsigned image CrossCorrFull_Norm ignoring alpha channel, scaled by \f$2^(-nScaleFactor)\f$. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param nScaleFactor \ref integer_result_scaling.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrFull_Norm_8u_AC4RSfs
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      nScaleFactor : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14204
   pragma Import (C, nppiCrossCorrFull_Norm_8u_AC4RSfs, "nppiCrossCorrFull_Norm_8u_AC4RSfs");

  --*
  -- * One-channel 32-bit floating point image CrossCorrFull_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrFull_Norm_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp32f;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14222
   pragma Import (C, nppiCrossCorrFull_Norm_32f_C1R, "nppiCrossCorrFull_Norm_32f_C1R");

  --*
  -- * Three-channel 32-bit floating point image CrossCorrFull_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrFull_Norm_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp32f;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14240
   pragma Import (C, nppiCrossCorrFull_Norm_32f_C3R, "nppiCrossCorrFull_Norm_32f_C3R");

  --*
  -- * Four-channel 32-bit floating point image CrossCorrFull_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrFull_Norm_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp32f;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14258
   pragma Import (C, nppiCrossCorrFull_Norm_32f_C4R, "nppiCrossCorrFull_Norm_32f_C4R");

  --*
  -- * Four-channel 32-bit floating point image CrossCorrFull_Norm ignoring alpha channel. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrFull_Norm_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp32f;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14276
   pragma Import (C, nppiCrossCorrFull_Norm_32f_AC4R, "nppiCrossCorrFull_Norm_32f_AC4R");

  --*
  -- * One-channel 8-bit unsigned image CrossCorrFull_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrFull_Norm_8u32f_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14294
   pragma Import (C, nppiCrossCorrFull_Norm_8u32f_C1R, "nppiCrossCorrFull_Norm_8u32f_C1R");

  --*
  -- * Three-channel 8-bit unsigned image CrossCorrFull_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrFull_Norm_8u32f_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14312
   pragma Import (C, nppiCrossCorrFull_Norm_8u32f_C3R, "nppiCrossCorrFull_Norm_8u32f_C3R");

  --*
  -- * Four-channel 8-bit unsigned image CrossCorrFull_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrFull_Norm_8u32f_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14330
   pragma Import (C, nppiCrossCorrFull_Norm_8u32f_C4R, "nppiCrossCorrFull_Norm_8u32f_C4R");

  --*
  -- * Four-channel 8-bit unsigned image CrossCorrFull_Norm ignoring alpha channel. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrFull_Norm_8u32f_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14348
   pragma Import (C, nppiCrossCorrFull_Norm_8u32f_AC4R, "nppiCrossCorrFull_Norm_8u32f_AC4R");

  --*
  -- * One-channel 8-bit signed image CrossCorrFull_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrFull_Norm_8s32f_C1R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8s;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14366
   pragma Import (C, nppiCrossCorrFull_Norm_8s32f_C1R, "nppiCrossCorrFull_Norm_8s32f_C1R");

  --*
  -- * Three-channel 8-bit signed image CrossCorrFull_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrFull_Norm_8s32f_C3R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8s;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14384
   pragma Import (C, nppiCrossCorrFull_Norm_8s32f_C3R, "nppiCrossCorrFull_Norm_8s32f_C3R");

  --*
  -- * Four-channel 8-bit signed image CrossCorrFull_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrFull_Norm_8s32f_C4R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8s;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14402
   pragma Import (C, nppiCrossCorrFull_Norm_8s32f_C4R, "nppiCrossCorrFull_Norm_8s32f_C4R");

  --*
  -- * Four-channel 8-bit signed image CrossCorrFull_Norm ignoring alpha channel. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrFull_Norm_8s32f_AC4R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8s;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14420
   pragma Import (C, nppiCrossCorrFull_Norm_8s32f_AC4R, "nppiCrossCorrFull_Norm_8s32f_AC4R");

  --*
  -- * One-channel 16-bit unsigned image CrossCorrFull_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrFull_Norm_16u32f_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp16u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14438
   pragma Import (C, nppiCrossCorrFull_Norm_16u32f_C1R, "nppiCrossCorrFull_Norm_16u32f_C1R");

  --*
  -- * Three-channel 16-bit unsigned image CrossCorrFull_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrFull_Norm_16u32f_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp16u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14456
   pragma Import (C, nppiCrossCorrFull_Norm_16u32f_C3R, "nppiCrossCorrFull_Norm_16u32f_C3R");

  --*
  -- * Four-channel 16-bit unsigned image CrossCorrFull_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrFull_Norm_16u32f_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp16u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14474
   pragma Import (C, nppiCrossCorrFull_Norm_16u32f_C4R, "nppiCrossCorrFull_Norm_16u32f_C4R");

  --*
  -- * Four-channel 16-bit unsigned image CrossCorrFull_Norm ignoring alpha channel. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrFull_Norm_16u32f_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp16u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14492
   pragma Import (C, nppiCrossCorrFull_Norm_16u32f_AC4R, "nppiCrossCorrFull_Norm_16u32f_AC4R");

  --* @}  
  --* @} CrossCorrFull_Norm  
  --*
  -- * @defgroup crosscorrsamenorm CrossCorrSame_Norm
  -- * Primitives for computing the normalized cross correlation between two images with same mode.
  -- *
  -- * @{
  --  

  --*
  -- * @name CrossCorrSame_Norm
  -- * The functions compute the \f$\rho_{st}(c,r)\f$ in \ref general_introduction 
  -- * with same mode (see \ref category).
  -- * @{
  --  

  --*
  -- * One-channel 8-bit unsigned image CrossCorrSame_Norm, scaled by \f$2^(-nScaleFactor)\f$. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param nScaleFactor \ref integer_result_scaling.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrSame_Norm_8u_C1RSfs
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      nScaleFactor : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14525
   pragma Import (C, nppiCrossCorrSame_Norm_8u_C1RSfs, "nppiCrossCorrSame_Norm_8u_C1RSfs");

  --*
  -- * Three-channel 8-bit unsigned image CrossCorrSame_Norm, scaled by \f$2^(-nScaleFactor)\f$. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param nScaleFactor \ref integer_result_scaling.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrSame_Norm_8u_C3RSfs
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      nScaleFactor : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14544
   pragma Import (C, nppiCrossCorrSame_Norm_8u_C3RSfs, "nppiCrossCorrSame_Norm_8u_C3RSfs");

  --*
  -- * Four-channel 8-bit unsigned image CrossCorrSame_Norm, scaled by \f$2^(-nScaleFactor)\f$. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param nScaleFactor \ref integer_result_scaling.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrSame_Norm_8u_C4RSfs
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      nScaleFactor : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14563
   pragma Import (C, nppiCrossCorrSame_Norm_8u_C4RSfs, "nppiCrossCorrSame_Norm_8u_C4RSfs");

  --*
  -- * Four-channel 8-bit unsigned image CrossCorrSame_Norm ignoring alpha channel, scaled by \f$2^(-nScaleFactor)\f$. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param nScaleFactor \ref integer_result_scaling.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrSame_Norm_8u_AC4RSfs
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      nScaleFactor : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14582
   pragma Import (C, nppiCrossCorrSame_Norm_8u_AC4RSfs, "nppiCrossCorrSame_Norm_8u_AC4RSfs");

  --*
  -- * One-channel 32-bit floating point image CrossCorrSame_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrSame_Norm_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp32f;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14600
   pragma Import (C, nppiCrossCorrSame_Norm_32f_C1R, "nppiCrossCorrSame_Norm_32f_C1R");

  --*
  -- * Three-channel 32-bit floating point image CrossCorrSame_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrSame_Norm_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp32f;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14618
   pragma Import (C, nppiCrossCorrSame_Norm_32f_C3R, "nppiCrossCorrSame_Norm_32f_C3R");

  --*
  -- * Four-channel 32-bit floating point image CrossCorrSame_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrSame_Norm_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp32f;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14636
   pragma Import (C, nppiCrossCorrSame_Norm_32f_C4R, "nppiCrossCorrSame_Norm_32f_C4R");

  --*
  -- * Four-channel 32-bit floating point image CrossCorrSame_Norm ignoring alpha channel. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrSame_Norm_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp32f;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14654
   pragma Import (C, nppiCrossCorrSame_Norm_32f_AC4R, "nppiCrossCorrSame_Norm_32f_AC4R");

  --*
  -- * One-channel 8-bit unsigned image CrossCorrSame_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrSame_Norm_8u32f_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14672
   pragma Import (C, nppiCrossCorrSame_Norm_8u32f_C1R, "nppiCrossCorrSame_Norm_8u32f_C1R");

  --*
  -- * Three-channel 8-bit unsigned image CrossCorrSame_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrSame_Norm_8u32f_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14690
   pragma Import (C, nppiCrossCorrSame_Norm_8u32f_C3R, "nppiCrossCorrSame_Norm_8u32f_C3R");

  --*
  -- * Four-channel 8-bit unsigned image CrossCorrSame_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrSame_Norm_8u32f_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14708
   pragma Import (C, nppiCrossCorrSame_Norm_8u32f_C4R, "nppiCrossCorrSame_Norm_8u32f_C4R");

  --*
  -- * Four-channel 8-bit unsigned image CrossCorrSame_Norm ignoring alpha channel. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrSame_Norm_8u32f_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14726
   pragma Import (C, nppiCrossCorrSame_Norm_8u32f_AC4R, "nppiCrossCorrSame_Norm_8u32f_AC4R");

  --*
  -- * One-channel 8-bit signed image CrossCorrSame_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrSame_Norm_8s32f_C1R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8s;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14744
   pragma Import (C, nppiCrossCorrSame_Norm_8s32f_C1R, "nppiCrossCorrSame_Norm_8s32f_C1R");

  --*
  -- * Three-channel 8-bit signed image CrossCorrSame_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrSame_Norm_8s32f_C3R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8s;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14762
   pragma Import (C, nppiCrossCorrSame_Norm_8s32f_C3R, "nppiCrossCorrSame_Norm_8s32f_C3R");

  --*
  -- * Four-channel 8-bit signed image CrossCorrSame_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrSame_Norm_8s32f_C4R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8s;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14780
   pragma Import (C, nppiCrossCorrSame_Norm_8s32f_C4R, "nppiCrossCorrSame_Norm_8s32f_C4R");

  --*
  -- * Four-channel 8-bit signed image CrossCorrSame_Norm ignoring alpha channel. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrSame_Norm_8s32f_AC4R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8s;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14798
   pragma Import (C, nppiCrossCorrSame_Norm_8s32f_AC4R, "nppiCrossCorrSame_Norm_8s32f_AC4R");

  --*
  -- * One-channel 16-bit unsigned image CrossCorrSame_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrSame_Norm_16u32f_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp16u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14816
   pragma Import (C, nppiCrossCorrSame_Norm_16u32f_C1R, "nppiCrossCorrSame_Norm_16u32f_C1R");

  --*
  -- * Three-channel 16-bit unsigned image CrossCorrSame_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrSame_Norm_16u32f_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp16u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14834
   pragma Import (C, nppiCrossCorrSame_Norm_16u32f_C3R, "nppiCrossCorrSame_Norm_16u32f_C3R");

  --*
  -- * Four-channel 16-bit unsigned image CrossCorrSame_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrSame_Norm_16u32f_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp16u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14852
   pragma Import (C, nppiCrossCorrSame_Norm_16u32f_C4R, "nppiCrossCorrSame_Norm_16u32f_C4R");

  --*
  -- * Four-channel 16-bit unsigned image CrossCorrSame_Norm ignoring alpha channel. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrSame_Norm_16u32f_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp16u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14870
   pragma Import (C, nppiCrossCorrSame_Norm_16u32f_AC4R, "nppiCrossCorrSame_Norm_16u32f_AC4R");

  --* @}  
  --* @} CrossCorrSame_Norm 
  --*
  -- * @defgroup crosscorrvalidnorm CrossCorrValid_Norm
  -- * Primitives for computing the normalized cross correlation between two images with valid mode.
  -- *
  -- * @{
  --  

  --*
  -- * @name CrossCorrValid_Norm
  -- * The functions compute the \f$\rho_{st}(c,r)\f$ in \ref general_introduction 
  -- * with valid mode (see \ref category).
  -- * @{
  --  

  --*
  -- * One-channel 8-bit unsigned image CrossCorrValid_Norm, scaled by \f$2^(-nScaleFactor)\f$. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param nScaleFactor \ref integer_result_scaling.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrValid_Norm_8u_C1RSfs
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      nScaleFactor : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14903
   pragma Import (C, nppiCrossCorrValid_Norm_8u_C1RSfs, "nppiCrossCorrValid_Norm_8u_C1RSfs");

  --*
  -- * Three-channel 8-bit unsigned image CrossCorrValid_Norm, scaled by \f$2^(-nScaleFactor)\f$. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param nScaleFactor \ref integer_result_scaling.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrValid_Norm_8u_C3RSfs
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      nScaleFactor : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14922
   pragma Import (C, nppiCrossCorrValid_Norm_8u_C3RSfs, "nppiCrossCorrValid_Norm_8u_C3RSfs");

  --*
  -- * Four-channel 8-bit unsigned image CrossCorrValid_Norm, scaled by \f$2^(-nScaleFactor)\f$. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param nScaleFactor \ref integer_result_scaling.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrValid_Norm_8u_C4RSfs
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      nScaleFactor : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14941
   pragma Import (C, nppiCrossCorrValid_Norm_8u_C4RSfs, "nppiCrossCorrValid_Norm_8u_C4RSfs");

  --*
  -- * Four-channel 8-bit unsigned image CrossCorrValid_Norm ignoring alpha channel, scaled by \f$2^(-nScaleFactor)\f$. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param nScaleFactor \ref integer_result_scaling.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrValid_Norm_8u_AC4RSfs
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      nScaleFactor : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14960
   pragma Import (C, nppiCrossCorrValid_Norm_8u_AC4RSfs, "nppiCrossCorrValid_Norm_8u_AC4RSfs");

  --*
  -- * One-channel 32-bit floating point image CrossCorrValid_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrValid_Norm_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp32f;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14978
   pragma Import (C, nppiCrossCorrValid_Norm_32f_C1R, "nppiCrossCorrValid_Norm_32f_C1R");

  --*
  -- * Three-channel 32-bit floating point image CrossCorrValid_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrValid_Norm_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp32f;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:14996
   pragma Import (C, nppiCrossCorrValid_Norm_32f_C3R, "nppiCrossCorrValid_Norm_32f_C3R");

  --*
  -- * Four-channel 32-bit floating point image CrossCorrValid_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrValid_Norm_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp32f;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15014
   pragma Import (C, nppiCrossCorrValid_Norm_32f_C4R, "nppiCrossCorrValid_Norm_32f_C4R");

  --*
  -- * Four-channel 32-bit floating point image CrossCorrValid_Norm ignoring alpha channel. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrValid_Norm_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp32f;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15032
   pragma Import (C, nppiCrossCorrValid_Norm_32f_AC4R, "nppiCrossCorrValid_Norm_32f_AC4R");

  --*
  -- * One-channel 8-bit unsigned image CrossCorrValid_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrValid_Norm_8u32f_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15050
   pragma Import (C, nppiCrossCorrValid_Norm_8u32f_C1R, "nppiCrossCorrValid_Norm_8u32f_C1R");

  --*
  -- * Three-channel 8-bit unsigned image CrossCorrValid_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrValid_Norm_8u32f_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15068
   pragma Import (C, nppiCrossCorrValid_Norm_8u32f_C3R, "nppiCrossCorrValid_Norm_8u32f_C3R");

  --*
  -- * Four-channel 8-bit unsigned image CrossCorrValid_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrValid_Norm_8u32f_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15086
   pragma Import (C, nppiCrossCorrValid_Norm_8u32f_C4R, "nppiCrossCorrValid_Norm_8u32f_C4R");

  --*
  -- * Four-channel 8-bit unsigned image CrossCorrValid_Norm ignoring alpha channel. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrValid_Norm_8u32f_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15104
   pragma Import (C, nppiCrossCorrValid_Norm_8u32f_AC4R, "nppiCrossCorrValid_Norm_8u32f_AC4R");

  --*
  -- * One-channel 8-bit signed image CrossCorrValid_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrValid_Norm_8s32f_C1R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8s;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15122
   pragma Import (C, nppiCrossCorrValid_Norm_8s32f_C1R, "nppiCrossCorrValid_Norm_8s32f_C1R");

  --*
  -- * Three-channel 8-bit signed image CrossCorrValid_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrValid_Norm_8s32f_C3R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8s;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15140
   pragma Import (C, nppiCrossCorrValid_Norm_8s32f_C3R, "nppiCrossCorrValid_Norm_8s32f_C3R");

  --*
  -- * Four-channel 8-bit signed image CrossCorrValid_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrValid_Norm_8s32f_C4R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8s;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15158
   pragma Import (C, nppiCrossCorrValid_Norm_8s32f_C4R, "nppiCrossCorrValid_Norm_8s32f_C4R");

  --*
  -- * Four-channel 8-bit signed image CrossCorrValid_Norm ignoring alpha channel. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrValid_Norm_8s32f_AC4R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8s;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15176
   pragma Import (C, nppiCrossCorrValid_Norm_8s32f_AC4R, "nppiCrossCorrValid_Norm_8s32f_AC4R");

  --*
  -- * One-channel 16-bit unsigned image CrossCorrValid_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrValid_Norm_16u32f_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp16u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15194
   pragma Import (C, nppiCrossCorrValid_Norm_16u32f_C1R, "nppiCrossCorrValid_Norm_16u32f_C1R");

  --*
  -- * Three-channel 16-bit unsigned image CrossCorrValid_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrValid_Norm_16u32f_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp16u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15212
   pragma Import (C, nppiCrossCorrValid_Norm_16u32f_C3R, "nppiCrossCorrValid_Norm_16u32f_C3R");

  --*
  -- * Four-channel 16-bit unsigned image CrossCorrValid_Norm. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrValid_Norm_16u32f_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp16u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15230
   pragma Import (C, nppiCrossCorrValid_Norm_16u32f_C4R, "nppiCrossCorrValid_Norm_16u32f_C4R");

  --*
  -- * Four-channel 16-bit unsigned image CrossCorrValid_Norm ignoring alpha channel. 
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrValid_Norm_16u32f_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp16u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15248
   pragma Import (C, nppiCrossCorrValid_Norm_16u32f_AC4R, "nppiCrossCorrValid_Norm_16u32f_AC4R");

  --* @}  
  --* @} CrossCorrValid_Norm 
  --*
  -- * @defgroup crosscorrvalid CrossCorrValid
  -- * Primitives for computing the cross correlation between two images with valid mode.
  -- *
  -- * @{
  --  

  --*
  -- * @name CrossCorrValid
  -- * The functions compute the \f$R_{st}(c,r)\f$ in \ref general_introduction 
  -- * with valid mode (see \ref category).
  -- * @{
  --  

  --*
  -- * One-channel 32-bit floating point images CrossCorrValid.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrValid_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp32f;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15280
   pragma Import (C, nppiCrossCorrValid_32f_C1R, "nppiCrossCorrValid_32f_C1R");

  --*
  -- * One-channel 8-bit unsigned images CrossCorrValid.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrValid_8u32f_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15298
   pragma Import (C, nppiCrossCorrValid_8u32f_C1R, "nppiCrossCorrValid_8u32f_C1R");

  --*
  -- * One-channel 8-bit signed images CrossCorrValid.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrValid_8s32f_C1R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8s;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15316
   pragma Import (C, nppiCrossCorrValid_8s32f_C1R, "nppiCrossCorrValid_8s32f_C1R");

  --*
  -- * One-channel 16-bit unsigned images CrossCorrValid.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrValid_16u32f_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp16u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15334
   pragma Import (C, nppiCrossCorrValid_16u32f_C1R, "nppiCrossCorrValid_16u32f_C1R");

  --* @}  
  --* @} CrossCorrValid 
  --*
  -- * @defgroup crosscorrfullnormlevel CrossCorrFull_NormLevel
  -- * Primitives for computing the normalized cross correlation coefficient between two images with full mode.
  -- *
  -- * @{
  --  

  --*
  -- * @name CrossCorrFull_NormLevel
  -- * The functions compute the \f$\gamma_{st}(c,r)\f$ in \ref general_introduction 
  -- * with full mode (see \ref category). The functions require additional scratch buffer for computations.
  -- * @{
  --  

  --*
  -- * One-channel 8-bit unsigned image CrossCorrFull_NormLevel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param nScaleFactor \ref integer_result_scaling.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiFullNormLevelGetBufferHostSize_8u_C1RSfs to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrFull_NormLevel_8u_C1RSfs
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      nScaleFactor : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15369
   pragma Import (C, nppiCrossCorrFull_NormLevel_8u_C1RSfs, "nppiCrossCorrFull_NormLevel_8u_C1RSfs");

  --*
  -- * Three-channel 8-bit unsigned image CrossCorrFull_NormLevel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param nScaleFactor \ref integer_result_scaling.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiFullNormLevelGetBufferHostSize_8u_C3RSfs to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrFull_NormLevel_8u_C3RSfs
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      nScaleFactor : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15390
   pragma Import (C, nppiCrossCorrFull_NormLevel_8u_C3RSfs, "nppiCrossCorrFull_NormLevel_8u_C3RSfs");

  --*
  -- * Four-channel 8-bit unsigned image CrossCorrFull_NormLevel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param nScaleFactor \ref integer_result_scaling.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiFullNormLevelGetBufferHostSize_8u_C4RSfs to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrFull_NormLevel_8u_C4RSfs
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      nScaleFactor : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15411
   pragma Import (C, nppiCrossCorrFull_NormLevel_8u_C4RSfs, "nppiCrossCorrFull_NormLevel_8u_C4RSfs");

  --*
  -- * Four-channel 8-bit unsigned image CrossCorrFull_NormLevel ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param nScaleFactor \ref integer_result_scaling.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiFullNormLevelGetBufferHostSize_8u_AC4RSfs to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrFull_NormLevel_8u_AC4RSfs
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      nScaleFactor : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15432
   pragma Import (C, nppiCrossCorrFull_NormLevel_8u_AC4RSfs, "nppiCrossCorrFull_NormLevel_8u_AC4RSfs");

  --*
  -- * One-channel 32-bit floating point image CrossCorrFull_NormLevel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiFullNormLevelGetBufferHostSize_32f_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrFull_NormLevel_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp32f;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15452
   pragma Import (C, nppiCrossCorrFull_NormLevel_32f_C1R, "nppiCrossCorrFull_NormLevel_32f_C1R");

  --*
  -- * Three-channel 32-bit floating point image CrossCorrFull_NormLevel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiFullNormLevelGetBufferHostSize_32f_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrFull_NormLevel_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp32f;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15472
   pragma Import (C, nppiCrossCorrFull_NormLevel_32f_C3R, "nppiCrossCorrFull_NormLevel_32f_C3R");

  --*
  -- * Four-channel 32-bit floating point image CrossCorrFull_NormLevel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiFullNormLevelGetBufferHostSize_32f_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrFull_NormLevel_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp32f;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15492
   pragma Import (C, nppiCrossCorrFull_NormLevel_32f_C4R, "nppiCrossCorrFull_NormLevel_32f_C4R");

  --*
  -- * Four-channel 32-bit floating point image CrossCorrFull_NormLevel ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiFullNormLevelGetBufferHostSize_32f_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrFull_NormLevel_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp32f;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15512
   pragma Import (C, nppiCrossCorrFull_NormLevel_32f_AC4R, "nppiCrossCorrFull_NormLevel_32f_AC4R");

  --*
  -- * One-channel 8-bit unsigned image CrossCorrFull_NormLevel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiFullNormLevelGetBufferHostSize_8u32f_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrFull_NormLevel_8u32f_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15532
   pragma Import (C, nppiCrossCorrFull_NormLevel_8u32f_C1R, "nppiCrossCorrFull_NormLevel_8u32f_C1R");

  --*
  -- * Three-channel 8-bit unsigned image CrossCorrFull_NormLevel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiFullNormLevelGetBufferHostSize_8u32f_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrFull_NormLevel_8u32f_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15552
   pragma Import (C, nppiCrossCorrFull_NormLevel_8u32f_C3R, "nppiCrossCorrFull_NormLevel_8u32f_C3R");

  --*
  -- * Four-channel 8-bit unsigned image CrossCorrFull_NormLevel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiFullNormLevelGetBufferHostSize_8u32f_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrFull_NormLevel_8u32f_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15572
   pragma Import (C, nppiCrossCorrFull_NormLevel_8u32f_C4R, "nppiCrossCorrFull_NormLevel_8u32f_C4R");

  --*
  -- * Four-channel 8-bit unsigned image CrossCorrFull_NormLevel ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiFullNormLevelGetBufferHostSize_8u32f_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrFull_NormLevel_8u32f_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15592
   pragma Import (C, nppiCrossCorrFull_NormLevel_8u32f_AC4R, "nppiCrossCorrFull_NormLevel_8u32f_AC4R");

  --*
  -- * One-channel 8-bit signed image CrossCorrFull_NormLevel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiFullNormLevelGetBufferHostSize_8s32f_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrFull_NormLevel_8s32f_C1R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8s;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15612
   pragma Import (C, nppiCrossCorrFull_NormLevel_8s32f_C1R, "nppiCrossCorrFull_NormLevel_8s32f_C1R");

  --*
  -- * Three-channel 8-bit signed image CrossCorrFull_NormLevel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiFullNormLevelGetBufferHostSize_8s32f_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrFull_NormLevel_8s32f_C3R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8s;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15632
   pragma Import (C, nppiCrossCorrFull_NormLevel_8s32f_C3R, "nppiCrossCorrFull_NormLevel_8s32f_C3R");

  --*
  -- * Four-channel 8-bit signed image CrossCorrFull_NormLevel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiFullNormLevelGetBufferHostSize_8s32f_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrFull_NormLevel_8s32f_C4R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8s;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15652
   pragma Import (C, nppiCrossCorrFull_NormLevel_8s32f_C4R, "nppiCrossCorrFull_NormLevel_8s32f_C4R");

  --*
  -- * Four-channel 8-bit signed image CrossCorrFull_NormLevel ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiFullNormLevelGetBufferHostSize_8s32f_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrFull_NormLevel_8s32f_AC4R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8s;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15672
   pragma Import (C, nppiCrossCorrFull_NormLevel_8s32f_AC4R, "nppiCrossCorrFull_NormLevel_8s32f_AC4R");

  --*
  -- * One-channel 16-bit unsigned image CrossCorrFull_NormLevel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiFullNormLevelGetBufferHostSize_16u32f_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrFull_NormLevel_16u32f_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp16u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15692
   pragma Import (C, nppiCrossCorrFull_NormLevel_16u32f_C1R, "nppiCrossCorrFull_NormLevel_16u32f_C1R");

  --*
  -- * Three-channel 16-bit unsigned image CrossCorrFull_NormLevel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiFullNormLevelGetBufferHostSize_16u32f_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrFull_NormLevel_16u32f_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp16u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15712
   pragma Import (C, nppiCrossCorrFull_NormLevel_16u32f_C3R, "nppiCrossCorrFull_NormLevel_16u32f_C3R");

  --*
  -- * Four-channel 16-bit unsigned image CrossCorrFull_NormLevel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiFullNormLevelGetBufferHostSize_16u32f_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrFull_NormLevel_16u32f_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp16u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15732
   pragma Import (C, nppiCrossCorrFull_NormLevel_16u32f_C4R, "nppiCrossCorrFull_NormLevel_16u32f_C4R");

  --*
  -- * Four-channel 16-bit unsigned image CrossCorrFull_NormLevel ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiFullNormLevelGetBufferHostSize_16u32f_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrFull_NormLevel_16u32f_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp16u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15752
   pragma Import (C, nppiCrossCorrFull_NormLevel_16u32f_AC4R, "nppiCrossCorrFull_NormLevel_16u32f_AC4R");

  --* @}  
  --* @name FullNormLevelGetBufferHostSize 
  -- * Companion primitives for computing the device buffer size (in bytes) required by the CrossCorrFull_NormLevel primitives.
  -- * @{
  --  

  --* 
  -- * Buffer size (in bytes) for nppiCrossCorrFull_NormLevel_8u_C1RSfs.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiFullNormLevelGetBufferHostSize_8u_C1RSfs (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15769
   pragma Import (C, nppiFullNormLevelGetBufferHostSize_8u_C1RSfs, "nppiFullNormLevelGetBufferHostSize_8u_C1RSfs");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrFull_NormLevel_8u_C3RSfs.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiFullNormLevelGetBufferHostSize_8u_C3RSfs (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15779
   pragma Import (C, nppiFullNormLevelGetBufferHostSize_8u_C3RSfs, "nppiFullNormLevelGetBufferHostSize_8u_C3RSfs");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrFull_NormLevel_8u_C4RSfs.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiFullNormLevelGetBufferHostSize_8u_C4RSfs (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15789
   pragma Import (C, nppiFullNormLevelGetBufferHostSize_8u_C4RSfs, "nppiFullNormLevelGetBufferHostSize_8u_C4RSfs");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrFull_NormLevel_8u_AC4RSfs.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiFullNormLevelGetBufferHostSize_8u_AC4RSfs (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15799
   pragma Import (C, nppiFullNormLevelGetBufferHostSize_8u_AC4RSfs, "nppiFullNormLevelGetBufferHostSize_8u_AC4RSfs");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrFull_NormLevel_32f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiFullNormLevelGetBufferHostSize_32f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15809
   pragma Import (C, nppiFullNormLevelGetBufferHostSize_32f_C1R, "nppiFullNormLevelGetBufferHostSize_32f_C1R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrFull_NormLevel_32f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiFullNormLevelGetBufferHostSize_32f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15819
   pragma Import (C, nppiFullNormLevelGetBufferHostSize_32f_C3R, "nppiFullNormLevelGetBufferHostSize_32f_C3R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrFull_NormLevel_32f_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiFullNormLevelGetBufferHostSize_32f_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15829
   pragma Import (C, nppiFullNormLevelGetBufferHostSize_32f_C4R, "nppiFullNormLevelGetBufferHostSize_32f_C4R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrFull_NormLevel_32f_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiFullNormLevelGetBufferHostSize_32f_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15839
   pragma Import (C, nppiFullNormLevelGetBufferHostSize_32f_AC4R, "nppiFullNormLevelGetBufferHostSize_32f_AC4R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrFull_NormLevel_8u32f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiFullNormLevelGetBufferHostSize_8u32f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15849
   pragma Import (C, nppiFullNormLevelGetBufferHostSize_8u32f_C1R, "nppiFullNormLevelGetBufferHostSize_8u32f_C1R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrFull_NormLevel_8u32f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiFullNormLevelGetBufferHostSize_8u32f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15859
   pragma Import (C, nppiFullNormLevelGetBufferHostSize_8u32f_C3R, "nppiFullNormLevelGetBufferHostSize_8u32f_C3R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrFull_NormLevel_8u32f_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiFullNormLevelGetBufferHostSize_8u32f_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15869
   pragma Import (C, nppiFullNormLevelGetBufferHostSize_8u32f_C4R, "nppiFullNormLevelGetBufferHostSize_8u32f_C4R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrFull_NormLevel_8u32f_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiFullNormLevelGetBufferHostSize_8u32f_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15879
   pragma Import (C, nppiFullNormLevelGetBufferHostSize_8u32f_AC4R, "nppiFullNormLevelGetBufferHostSize_8u32f_AC4R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrFull_NormLevel_8s32f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiFullNormLevelGetBufferHostSize_8s32f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15889
   pragma Import (C, nppiFullNormLevelGetBufferHostSize_8s32f_C1R, "nppiFullNormLevelGetBufferHostSize_8s32f_C1R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrFull_NormLevel_8s32f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiFullNormLevelGetBufferHostSize_8s32f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15899
   pragma Import (C, nppiFullNormLevelGetBufferHostSize_8s32f_C3R, "nppiFullNormLevelGetBufferHostSize_8s32f_C3R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrFull_NormLevel_8s32f_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiFullNormLevelGetBufferHostSize_8s32f_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15909
   pragma Import (C, nppiFullNormLevelGetBufferHostSize_8s32f_C4R, "nppiFullNormLevelGetBufferHostSize_8s32f_C4R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrFull_NormLevel_8s32f_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiFullNormLevelGetBufferHostSize_8s32f_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15919
   pragma Import (C, nppiFullNormLevelGetBufferHostSize_8s32f_AC4R, "nppiFullNormLevelGetBufferHostSize_8s32f_AC4R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrFull_NormLevel_16u32f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiFullNormLevelGetBufferHostSize_16u32f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15929
   pragma Import (C, nppiFullNormLevelGetBufferHostSize_16u32f_C1R, "nppiFullNormLevelGetBufferHostSize_16u32f_C1R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrFull_NormLevel_16u32f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiFullNormLevelGetBufferHostSize_16u32f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15939
   pragma Import (C, nppiFullNormLevelGetBufferHostSize_16u32f_C3R, "nppiFullNormLevelGetBufferHostSize_16u32f_C3R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrFull_NormLevel_16u32f_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiFullNormLevelGetBufferHostSize_16u32f_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15949
   pragma Import (C, nppiFullNormLevelGetBufferHostSize_16u32f_C4R, "nppiFullNormLevelGetBufferHostSize_16u32f_C4R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrFull_NormLevel_16u32f_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiFullNormLevelGetBufferHostSize_16u32f_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15959
   pragma Import (C, nppiFullNormLevelGetBufferHostSize_16u32f_AC4R, "nppiFullNormLevelGetBufferHostSize_16u32f_AC4R");

  --* @}  
  --* @} CrossCorrFull_NormLevel 
  --*
  -- * @defgroup crosscorrsamenormlevel CrossCorrSame_NormLevel
  -- * Primitives for computing the normalized cross correlation coefficient between two images with same mode.
  -- *
  -- * @{
  --  

  --*
  -- * @name CrossCorrSame_NormLevel
  -- * The functions compute the \f$\gamma_{st}(c,r)\f$ in \ref general_introduction 
  -- * with same mode (see \ref category). The functions require additional scratch buffer for computations.
  -- * @{
  --  

  --*
  -- * One-channel 8-bit unsigned image CrossCorrSame_NormLevel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param nScaleFactor \ref integer_result_scaling.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiSameNormLevelGetBufferHostSize_8u_C1RSfs to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrSame_NormLevel_8u_C1RSfs
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      nScaleFactor : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:15992
   pragma Import (C, nppiCrossCorrSame_NormLevel_8u_C1RSfs, "nppiCrossCorrSame_NormLevel_8u_C1RSfs");

  --*
  -- * Three-channel 8-bit unsigned image CrossCorrSame_NormLevel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param nScaleFactor \ref integer_result_scaling.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiSameNormLevelGetBufferHostSize_8u_C3RSfs to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrSame_NormLevel_8u_C3RSfs
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      nScaleFactor : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16013
   pragma Import (C, nppiCrossCorrSame_NormLevel_8u_C3RSfs, "nppiCrossCorrSame_NormLevel_8u_C3RSfs");

  --*
  -- * Four-channel 8-bit unsigned image CrossCorrSame_NormLevel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param nScaleFactor \ref integer_result_scaling.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiSameNormLevelGetBufferHostSize_8u_C4RSfs to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrSame_NormLevel_8u_C4RSfs
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      nScaleFactor : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16034
   pragma Import (C, nppiCrossCorrSame_NormLevel_8u_C4RSfs, "nppiCrossCorrSame_NormLevel_8u_C4RSfs");

  --*
  -- * Four-channel 8-bit unsigned image CrossCorrSame_NormLevel ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param nScaleFactor \ref integer_result_scaling.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiSameNormLevelGetBufferHostSize_8u_AC4RSfs to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrSame_NormLevel_8u_AC4RSfs
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      nScaleFactor : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16055
   pragma Import (C, nppiCrossCorrSame_NormLevel_8u_AC4RSfs, "nppiCrossCorrSame_NormLevel_8u_AC4RSfs");

  --*
  -- * One-channel 32-bit floating point image CrossCorrSame_NormLevel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiSameNormLevelGetBufferHostSize_32f_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrSame_NormLevel_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp32f;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16075
   pragma Import (C, nppiCrossCorrSame_NormLevel_32f_C1R, "nppiCrossCorrSame_NormLevel_32f_C1R");

  --*
  -- * Three-channel 32-bit floating point image CrossCorrSame_NormLevel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiSameNormLevelGetBufferHostSize_32f_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrSame_NormLevel_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp32f;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16095
   pragma Import (C, nppiCrossCorrSame_NormLevel_32f_C3R, "nppiCrossCorrSame_NormLevel_32f_C3R");

  --*
  -- * Four-channel 32-bit floating point image CrossCorrSame_NormLevel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiSameNormLevelGetBufferHostSize_32f_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrSame_NormLevel_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp32f;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16115
   pragma Import (C, nppiCrossCorrSame_NormLevel_32f_C4R, "nppiCrossCorrSame_NormLevel_32f_C4R");

  --*
  -- * Four-channel 32-bit floating point image CrossCorrSame_NormLevel ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiSameNormLevelGetBufferHostSize_32f_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrSame_NormLevel_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp32f;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16135
   pragma Import (C, nppiCrossCorrSame_NormLevel_32f_AC4R, "nppiCrossCorrSame_NormLevel_32f_AC4R");

  --*
  -- * One-channel 8-bit unsigned image CrossCorrSame_NormLevel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiSameNormLevelGetBufferHostSize_8u32f_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrSame_NormLevel_8u32f_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16155
   pragma Import (C, nppiCrossCorrSame_NormLevel_8u32f_C1R, "nppiCrossCorrSame_NormLevel_8u32f_C1R");

  --*
  -- * Three-channel 8-bit unsigned image CrossCorrSame_NormLevel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiSameNormLevelGetBufferHostSize_8u32f_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrSame_NormLevel_8u32f_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16175
   pragma Import (C, nppiCrossCorrSame_NormLevel_8u32f_C3R, "nppiCrossCorrSame_NormLevel_8u32f_C3R");

  --*
  -- * Four-channel 8-bit unsigned image CrossCorrSame_NormLevel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiSameNormLevelGetBufferHostSize_8u32f_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrSame_NormLevel_8u32f_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16195
   pragma Import (C, nppiCrossCorrSame_NormLevel_8u32f_C4R, "nppiCrossCorrSame_NormLevel_8u32f_C4R");

  --*
  -- * Four-channel 8-bit unsigned image CrossCorrSame_NormLevel ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiSameNormLevelGetBufferHostSize_8u32f_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrSame_NormLevel_8u32f_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16215
   pragma Import (C, nppiCrossCorrSame_NormLevel_8u32f_AC4R, "nppiCrossCorrSame_NormLevel_8u32f_AC4R");

  --*
  -- * One-channel 8-bit signed image CrossCorrSame_NormLevel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiSameNormLevelGetBufferHostSize_8s32f_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrSame_NormLevel_8s32f_C1R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8s;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16235
   pragma Import (C, nppiCrossCorrSame_NormLevel_8s32f_C1R, "nppiCrossCorrSame_NormLevel_8s32f_C1R");

  --*
  -- * Three-channel 8-bit signed image CrossCorrSame_NormLevel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiSameNormLevelGetBufferHostSize_8s32f_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrSame_NormLevel_8s32f_C3R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8s;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16255
   pragma Import (C, nppiCrossCorrSame_NormLevel_8s32f_C3R, "nppiCrossCorrSame_NormLevel_8s32f_C3R");

  --*
  -- * Four-channel 8-bit signed image CrossCorrSame_NormLevel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiSameNormLevelGetBufferHostSize_8s32f_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrSame_NormLevel_8s32f_C4R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8s;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16275
   pragma Import (C, nppiCrossCorrSame_NormLevel_8s32f_C4R, "nppiCrossCorrSame_NormLevel_8s32f_C4R");

  --*
  -- * Four-channel 8-bit signed image CrossCorrSame_NormLevel ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiSameNormLevelGetBufferHostSize_8s32f_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrSame_NormLevel_8s32f_AC4R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8s;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16295
   pragma Import (C, nppiCrossCorrSame_NormLevel_8s32f_AC4R, "nppiCrossCorrSame_NormLevel_8s32f_AC4R");

  --*
  -- * One-channel 16-bit unsigned image CrossCorrSame_NormLevel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiSameNormLevelGetBufferHostSize_16u32f_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrSame_NormLevel_16u32f_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp16u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16315
   pragma Import (C, nppiCrossCorrSame_NormLevel_16u32f_C1R, "nppiCrossCorrSame_NormLevel_16u32f_C1R");

  --*
  -- * Three-channel 16-bit unsigned image CrossCorrSame_NormLevel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiSameNormLevelGetBufferHostSize_16u32f_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrSame_NormLevel_16u32f_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp16u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16335
   pragma Import (C, nppiCrossCorrSame_NormLevel_16u32f_C3R, "nppiCrossCorrSame_NormLevel_16u32f_C3R");

  --*
  -- * Four-channel 16-bit unsigned image CrossCorrSame_NormLevel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiSameNormLevelGetBufferHostSize_16u32f_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrSame_NormLevel_16u32f_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp16u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16355
   pragma Import (C, nppiCrossCorrSame_NormLevel_16u32f_C4R, "nppiCrossCorrSame_NormLevel_16u32f_C4R");

  --*
  -- * Four-channel 16-bit unsigned image CrossCorrSame_NormLevel ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiSameNormLevelGetBufferHostSize_16u32f_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrSame_NormLevel_16u32f_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp16u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16375
   pragma Import (C, nppiCrossCorrSame_NormLevel_16u32f_AC4R, "nppiCrossCorrSame_NormLevel_16u32f_AC4R");

  --* @}  
  --* @name SameNormLevelGetBufferHostSize 
  -- * Companion primitives for computing the device buffer size (in bytes) required by the CrossCorrSame_NormLevel primitives.
  -- * @{
  --  

  --* 
  -- * Buffer size (in bytes) for nppiCrossCorrSame_NormLevel_8u_C1RSfs.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiSameNormLevelGetBufferHostSize_8u_C1RSfs (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16392
   pragma Import (C, nppiSameNormLevelGetBufferHostSize_8u_C1RSfs, "nppiSameNormLevelGetBufferHostSize_8u_C1RSfs");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrSame_NormLevel_8u_C3RSfs.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiSameNormLevelGetBufferHostSize_8u_C3RSfs (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16402
   pragma Import (C, nppiSameNormLevelGetBufferHostSize_8u_C3RSfs, "nppiSameNormLevelGetBufferHostSize_8u_C3RSfs");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrSame_NormLevel_8u_C4RSfs.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiSameNormLevelGetBufferHostSize_8u_C4RSfs (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16412
   pragma Import (C, nppiSameNormLevelGetBufferHostSize_8u_C4RSfs, "nppiSameNormLevelGetBufferHostSize_8u_C4RSfs");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrSame_NormLevel_8u_AC4RSfs.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiSameNormLevelGetBufferHostSize_8u_AC4RSfs (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16422
   pragma Import (C, nppiSameNormLevelGetBufferHostSize_8u_AC4RSfs, "nppiSameNormLevelGetBufferHostSize_8u_AC4RSfs");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrSame_NormLevel_32f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiSameNormLevelGetBufferHostSize_32f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16432
   pragma Import (C, nppiSameNormLevelGetBufferHostSize_32f_C1R, "nppiSameNormLevelGetBufferHostSize_32f_C1R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrSame_NormLevel_32f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiSameNormLevelGetBufferHostSize_32f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16442
   pragma Import (C, nppiSameNormLevelGetBufferHostSize_32f_C3R, "nppiSameNormLevelGetBufferHostSize_32f_C3R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrSame_NormLevel_32f_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiSameNormLevelGetBufferHostSize_32f_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16452
   pragma Import (C, nppiSameNormLevelGetBufferHostSize_32f_C4R, "nppiSameNormLevelGetBufferHostSize_32f_C4R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrSame_NormLevel_32f_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiSameNormLevelGetBufferHostSize_32f_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16462
   pragma Import (C, nppiSameNormLevelGetBufferHostSize_32f_AC4R, "nppiSameNormLevelGetBufferHostSize_32f_AC4R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrSame_NormLevel_8u32f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiSameNormLevelGetBufferHostSize_8u32f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16472
   pragma Import (C, nppiSameNormLevelGetBufferHostSize_8u32f_C1R, "nppiSameNormLevelGetBufferHostSize_8u32f_C1R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrSame_NormLevel_8u32f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiSameNormLevelGetBufferHostSize_8u32f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16482
   pragma Import (C, nppiSameNormLevelGetBufferHostSize_8u32f_C3R, "nppiSameNormLevelGetBufferHostSize_8u32f_C3R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrSame_NormLevel_8u32f_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiSameNormLevelGetBufferHostSize_8u32f_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16492
   pragma Import (C, nppiSameNormLevelGetBufferHostSize_8u32f_C4R, "nppiSameNormLevelGetBufferHostSize_8u32f_C4R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrSame_NormLevel_8u32f_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiSameNormLevelGetBufferHostSize_8u32f_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16502
   pragma Import (C, nppiSameNormLevelGetBufferHostSize_8u32f_AC4R, "nppiSameNormLevelGetBufferHostSize_8u32f_AC4R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrSame_NormLevel_8s32f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiSameNormLevelGetBufferHostSize_8s32f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16512
   pragma Import (C, nppiSameNormLevelGetBufferHostSize_8s32f_C1R, "nppiSameNormLevelGetBufferHostSize_8s32f_C1R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrSame_NormLevel_8s32f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiSameNormLevelGetBufferHostSize_8s32f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16522
   pragma Import (C, nppiSameNormLevelGetBufferHostSize_8s32f_C3R, "nppiSameNormLevelGetBufferHostSize_8s32f_C3R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrSame_NormLevel_8s32f_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiSameNormLevelGetBufferHostSize_8s32f_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16532
   pragma Import (C, nppiSameNormLevelGetBufferHostSize_8s32f_C4R, "nppiSameNormLevelGetBufferHostSize_8s32f_C4R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrSame_NormLevel_8s32f_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiSameNormLevelGetBufferHostSize_8s32f_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16542
   pragma Import (C, nppiSameNormLevelGetBufferHostSize_8s32f_AC4R, "nppiSameNormLevelGetBufferHostSize_8s32f_AC4R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrSame_NormLevel_16u32f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiSameNormLevelGetBufferHostSize_16u32f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16552
   pragma Import (C, nppiSameNormLevelGetBufferHostSize_16u32f_C1R, "nppiSameNormLevelGetBufferHostSize_16u32f_C1R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrSame_NormLevel_16u32f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiSameNormLevelGetBufferHostSize_16u32f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16562
   pragma Import (C, nppiSameNormLevelGetBufferHostSize_16u32f_C3R, "nppiSameNormLevelGetBufferHostSize_16u32f_C3R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrSame_NormLevel_16u32f_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiSameNormLevelGetBufferHostSize_16u32f_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16572
   pragma Import (C, nppiSameNormLevelGetBufferHostSize_16u32f_C4R, "nppiSameNormLevelGetBufferHostSize_16u32f_C4R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrSame_NormLevel_16u32f_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiSameNormLevelGetBufferHostSize_16u32f_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16582
   pragma Import (C, nppiSameNormLevelGetBufferHostSize_16u32f_AC4R, "nppiSameNormLevelGetBufferHostSize_16u32f_AC4R");

  --* @}  
  --* @} CrossCorrSame_NormLevel 
  --*
  -- * @defgroup crosscorrvalidnormlevel CrossCorrValid_NormLevel
  -- * Primitives for computing the normalized cross correlation coefficient between two images with valid mode.
  -- *
  -- * @{
  --  

  --*
  -- * @name CrossCorrValid_NormLevel
  -- * The functions compute the \f$\gamma_{st}(c,r)\f$ in \ref general_introduction 
  -- * with valid mode (see \ref category). The functions require additional scratch buffer for computations.
  -- * @{
  --  

  --*
  -- * One-channel 8-bit unsigned image CrossCorrValid_NormLevel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param nScaleFactor \ref integer_result_scaling.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiValidNormLevelGetBufferHostSize_8u_C1RSfs to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrValid_NormLevel_8u_C1RSfs
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      nScaleFactor : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16615
   pragma Import (C, nppiCrossCorrValid_NormLevel_8u_C1RSfs, "nppiCrossCorrValid_NormLevel_8u_C1RSfs");

  --*
  -- * Three-channel 8-bit unsigned image CrossCorrValid_NormLevel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param nScaleFactor \ref integer_result_scaling.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiValidNormLevelGetBufferHostSize_8u_C3RSfs to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrValid_NormLevel_8u_C3RSfs
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      nScaleFactor : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16636
   pragma Import (C, nppiCrossCorrValid_NormLevel_8u_C3RSfs, "nppiCrossCorrValid_NormLevel_8u_C3RSfs");

  --*
  -- * Four-channel 8-bit unsigned image CrossCorrValid_NormLevel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param nScaleFactor \ref integer_result_scaling.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiValidNormLevelGetBufferHostSize_8u_C4RSfs to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrValid_NormLevel_8u_C4RSfs
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      nScaleFactor : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16657
   pragma Import (C, nppiCrossCorrValid_NormLevel_8u_C4RSfs, "nppiCrossCorrValid_NormLevel_8u_C4RSfs");

  --*
  -- * Four-channel 8-bit unsigned image CrossCorrValid_NormLevel ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param nScaleFactor \ref integer_result_scaling.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiValidNormLevelGetBufferHostSize_8u_AC4RSfs to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrValid_NormLevel_8u_AC4RSfs
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      nScaleFactor : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16678
   pragma Import (C, nppiCrossCorrValid_NormLevel_8u_AC4RSfs, "nppiCrossCorrValid_NormLevel_8u_AC4RSfs");

  --*
  -- * One-channel 32-bit floating point image CrossCorrValid_NormLevel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiValidNormLevelGetBufferHostSize_32f_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrValid_NormLevel_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp32f;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16698
   pragma Import (C, nppiCrossCorrValid_NormLevel_32f_C1R, "nppiCrossCorrValid_NormLevel_32f_C1R");

  --*
  -- * Three-channel 32-bit floating point image CrossCorrValid_NormLevel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiValidNormLevelGetBufferHostSize_32f_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrValid_NormLevel_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp32f;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16718
   pragma Import (C, nppiCrossCorrValid_NormLevel_32f_C3R, "nppiCrossCorrValid_NormLevel_32f_C3R");

  --*
  -- * Four-channel 32-bit floating point image CrossCorrValid_NormLevel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiValidNormLevelGetBufferHostSize_32f_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrValid_NormLevel_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp32f;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16738
   pragma Import (C, nppiCrossCorrValid_NormLevel_32f_C4R, "nppiCrossCorrValid_NormLevel_32f_C4R");

  --*
  -- * Four-channel 32-bit floating point image CrossCorrValid_NormLevel ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiValidNormLevelGetBufferHostSize_32f_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrValid_NormLevel_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp32f;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16758
   pragma Import (C, nppiCrossCorrValid_NormLevel_32f_AC4R, "nppiCrossCorrValid_NormLevel_32f_AC4R");

  --*
  -- * One-channel 8-bit unsigned image CrossCorrValid_NormLevel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiValidNormLevelGetBufferHostSize_8u32f_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrValid_NormLevel_8u32f_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16778
   pragma Import (C, nppiCrossCorrValid_NormLevel_8u32f_C1R, "nppiCrossCorrValid_NormLevel_8u32f_C1R");

  --*
  -- * Three-channel 8-bit unsigned image CrossCorrValid_NormLevel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiValidNormLevelGetBufferHostSize_8u32f_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrValid_NormLevel_8u32f_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16798
   pragma Import (C, nppiCrossCorrValid_NormLevel_8u32f_C3R, "nppiCrossCorrValid_NormLevel_8u32f_C3R");

  --*
  -- * Four-channel 8-bit unsigned image CrossCorrValid_NormLevel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiValidNormLevelGetBufferHostSize_8u32f_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrValid_NormLevel_8u32f_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16818
   pragma Import (C, nppiCrossCorrValid_NormLevel_8u32f_C4R, "nppiCrossCorrValid_NormLevel_8u32f_C4R");

  --*
  -- * Four-channel 8-bit unsigned image CrossCorrValid_NormLevel ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiValidNormLevelGetBufferHostSize_8u32f_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrValid_NormLevel_8u32f_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16838
   pragma Import (C, nppiCrossCorrValid_NormLevel_8u32f_AC4R, "nppiCrossCorrValid_NormLevel_8u32f_AC4R");

  --*
  -- * One-channel 8-bit signed image CrossCorrValid_NormLevel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiValidNormLevelGetBufferHostSize_8s32f_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrValid_NormLevel_8s32f_C1R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8s;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16858
   pragma Import (C, nppiCrossCorrValid_NormLevel_8s32f_C1R, "nppiCrossCorrValid_NormLevel_8s32f_C1R");

  --*
  -- * Three-channel 8-bit signed image CrossCorrValid_NormLevel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiValidNormLevelGetBufferHostSize_8s32f_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrValid_NormLevel_8s32f_C3R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8s;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16878
   pragma Import (C, nppiCrossCorrValid_NormLevel_8s32f_C3R, "nppiCrossCorrValid_NormLevel_8s32f_C3R");

  --*
  -- * Four-channel 8-bit signed image CrossCorrValid_NormLevel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiValidNormLevelGetBufferHostSize_8s32f_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrValid_NormLevel_8s32f_C4R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8s;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16898
   pragma Import (C, nppiCrossCorrValid_NormLevel_8s32f_C4R, "nppiCrossCorrValid_NormLevel_8s32f_C4R");

  --*
  -- * Four-channel 8-bit signed image CrossCorrValid_NormLevel ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiValidNormLevelGetBufferHostSize_8s32f_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrValid_NormLevel_8s32f_AC4R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp8s;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16918
   pragma Import (C, nppiCrossCorrValid_NormLevel_8s32f_AC4R, "nppiCrossCorrValid_NormLevel_8s32f_AC4R");

  --*
  -- * One-channel 16-bit unsigned image CrossCorrValid_NormLevel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiValidNormLevelGetBufferHostSize_16u32f_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrValid_NormLevel_16u32f_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp16u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16938
   pragma Import (C, nppiCrossCorrValid_NormLevel_16u32f_C1R, "nppiCrossCorrValid_NormLevel_16u32f_C1R");

  --*
  -- * Three-channel 16-bit unsigned image CrossCorrValid_NormLevel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiValidNormLevelGetBufferHostSize_16u32f_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrValid_NormLevel_16u32f_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp16u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16958
   pragma Import (C, nppiCrossCorrValid_NormLevel_16u32f_C3R, "nppiCrossCorrValid_NormLevel_16u32f_C3R");

  --*
  -- * Four-channel 16-bit unsigned image CrossCorrValid_NormLevel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiValidNormLevelGetBufferHostSize_16u32f_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrValid_NormLevel_16u32f_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp16u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16978
   pragma Import (C, nppiCrossCorrValid_NormLevel_16u32f_C4R, "nppiCrossCorrValid_NormLevel_16u32f_C4R");

  --*
  -- * Four-channel 16-bit unsigned image CrossCorrValid_NormLevel ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcRoiSize \ref roi_specification.
  -- * \param pTpl Pointer to the template image.
  -- * \param nTplStep Number of bytes between successive rows in the template image.
  -- * \param oTplRoiSize \ref roi_specification.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiValidNormLevelGetBufferHostSize_16u32f_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiCrossCorrValid_NormLevel_16u32f_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcRoiSize : nppdefs_h.NppiSize;
      pTpl : access nppdefs_h.Npp16u;
      nTplStep : int;
      oTplRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:16998
   pragma Import (C, nppiCrossCorrValid_NormLevel_16u32f_AC4R, "nppiCrossCorrValid_NormLevel_16u32f_AC4R");

  --* @}  
  --* @name ValidNormLevelGetBufferHostSize 
  -- * Companion primitives for computing the device buffer size (in bytes) required by the CrossCorrValid_NormLevel primitives.
  -- * @{
  --  

  --* 
  -- * Buffer size (in bytes) for nppiCrossCorrValid_NormLevel_8u_C1RSfs.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiValidNormLevelGetBufferHostSize_8u_C1RSfs (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17015
   pragma Import (C, nppiValidNormLevelGetBufferHostSize_8u_C1RSfs, "nppiValidNormLevelGetBufferHostSize_8u_C1RSfs");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrValid_NormLevel_8u_C3RSfs.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiValidNormLevelGetBufferHostSize_8u_C3RSfs (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17025
   pragma Import (C, nppiValidNormLevelGetBufferHostSize_8u_C3RSfs, "nppiValidNormLevelGetBufferHostSize_8u_C3RSfs");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrValid_NormLevel_8u_C4RSfs.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiValidNormLevelGetBufferHostSize_8u_C4RSfs (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17035
   pragma Import (C, nppiValidNormLevelGetBufferHostSize_8u_C4RSfs, "nppiValidNormLevelGetBufferHostSize_8u_C4RSfs");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrValid_NormLevel_8u_AC4RSfs.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiValidNormLevelGetBufferHostSize_8u_AC4RSfs (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17045
   pragma Import (C, nppiValidNormLevelGetBufferHostSize_8u_AC4RSfs, "nppiValidNormLevelGetBufferHostSize_8u_AC4RSfs");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrValid_NormLevel_32f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiValidNormLevelGetBufferHostSize_32f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17055
   pragma Import (C, nppiValidNormLevelGetBufferHostSize_32f_C1R, "nppiValidNormLevelGetBufferHostSize_32f_C1R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrValid_NormLevel_32f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiValidNormLevelGetBufferHostSize_32f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17065
   pragma Import (C, nppiValidNormLevelGetBufferHostSize_32f_C3R, "nppiValidNormLevelGetBufferHostSize_32f_C3R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrValid_NormLevel_32f_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiValidNormLevelGetBufferHostSize_32f_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17075
   pragma Import (C, nppiValidNormLevelGetBufferHostSize_32f_C4R, "nppiValidNormLevelGetBufferHostSize_32f_C4R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrValid_NormLevel_32f_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiValidNormLevelGetBufferHostSize_32f_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17085
   pragma Import (C, nppiValidNormLevelGetBufferHostSize_32f_AC4R, "nppiValidNormLevelGetBufferHostSize_32f_AC4R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrValid_NormLevel_8u32f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiValidNormLevelGetBufferHostSize_8u32f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17095
   pragma Import (C, nppiValidNormLevelGetBufferHostSize_8u32f_C1R, "nppiValidNormLevelGetBufferHostSize_8u32f_C1R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrValid_NormLevel_8u32f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiValidNormLevelGetBufferHostSize_8u32f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17105
   pragma Import (C, nppiValidNormLevelGetBufferHostSize_8u32f_C3R, "nppiValidNormLevelGetBufferHostSize_8u32f_C3R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrValid_NormLevel_8u32f_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiValidNormLevelGetBufferHostSize_8u32f_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17115
   pragma Import (C, nppiValidNormLevelGetBufferHostSize_8u32f_C4R, "nppiValidNormLevelGetBufferHostSize_8u32f_C4R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrValid_NormLevel_8u32f_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiValidNormLevelGetBufferHostSize_8u32f_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17125
   pragma Import (C, nppiValidNormLevelGetBufferHostSize_8u32f_AC4R, "nppiValidNormLevelGetBufferHostSize_8u32f_AC4R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrValid_NormLevel_8s32f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiValidNormLevelGetBufferHostSize_8s32f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17135
   pragma Import (C, nppiValidNormLevelGetBufferHostSize_8s32f_C1R, "nppiValidNormLevelGetBufferHostSize_8s32f_C1R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrValid_NormLevel_8s32f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiValidNormLevelGetBufferHostSize_8s32f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17145
   pragma Import (C, nppiValidNormLevelGetBufferHostSize_8s32f_C3R, "nppiValidNormLevelGetBufferHostSize_8s32f_C3R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrValid_NormLevel_8s32f_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiValidNormLevelGetBufferHostSize_8s32f_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17155
   pragma Import (C, nppiValidNormLevelGetBufferHostSize_8s32f_C4R, "nppiValidNormLevelGetBufferHostSize_8s32f_C4R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrValid_NormLevel_8s32f_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiValidNormLevelGetBufferHostSize_8s32f_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17165
   pragma Import (C, nppiValidNormLevelGetBufferHostSize_8s32f_AC4R, "nppiValidNormLevelGetBufferHostSize_8s32f_AC4R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrValid_NormLevel_16u32f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiValidNormLevelGetBufferHostSize_16u32f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17175
   pragma Import (C, nppiValidNormLevelGetBufferHostSize_16u32f_C1R, "nppiValidNormLevelGetBufferHostSize_16u32f_C1R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrValid_NormLevel_16u32f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiValidNormLevelGetBufferHostSize_16u32f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17185
   pragma Import (C, nppiValidNormLevelGetBufferHostSize_16u32f_C3R, "nppiValidNormLevelGetBufferHostSize_16u32f_C3R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrValid_NormLevel_16u32f_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiValidNormLevelGetBufferHostSize_16u32f_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17195
   pragma Import (C, nppiValidNormLevelGetBufferHostSize_16u32f_C4R, "nppiValidNormLevelGetBufferHostSize_16u32f_C4R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiCrossCorrValid_NormLevel_16u32f_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiValidNormLevelGetBufferHostSize_16u32f_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17205
   pragma Import (C, nppiValidNormLevelGetBufferHostSize_16u32f_AC4R, "nppiValidNormLevelGetBufferHostSize_16u32f_AC4R");

  --* @}  
  --* @} CrossCorrValid_NormLevel 
  --* @} image_proximity  
  --* @defgroup image_quality_index Image Quality Index
  -- * Primitives for computing the image quality index of two images.
  -- * @{
  --  

  --*
  -- * @name QualityIndex
  --  * Given two images \f$M\f$ and \f$N\f$ (both \f$W \times H\f$), the
  -- * mathematical formula to calculate the image quality index \f$Q\f$ between them is expressed as:
  -- * \f[Q = \frac{4\sigma_{MN}\tilde{M}\tilde{N}}{[(\tilde{M}^2)+(\tilde{N}^2)][(\sigma_M)^2+(\sigma_N)^2]} \f]
  -- * where
  -- * \f[\tilde{M} = \frac{1}{W\cdot H}\sum_{j=0}^{H-1}\sum_{i=0}^{W-1}M(j,i)\f]
  -- * \f[\tilde{N} = \frac{1}{W\cdot H}\sum_{j=0}^{H-1}\sum_{i=0}^{W-1}N(j,i)\f]
  -- * \f[\sigma_{M} = \sqrt{\frac{1}{W\cdot H-1}\sum_{j=0}^{H-1}\sum_{i=0}^{W-1}[M(j,i)-\tilde{M}]^2}\f]
  -- * \f[\sigma_{N} = \sqrt{\frac{1}{W\cdot H-1}\sum_{j=0}^{H-1}\sum_{i=0}^{W-1}[N(j,i)-\tilde{N}]^2}\f]
  -- * \f[\sigma_{MN} = \frac{1}{W\cdot H-1}\sum_{j=0}^{H-1}\sum_{i=0}^{W-1}[M(j,i)-\tilde{M}][N(j,i)-\tilde{N}]\f]
  -- * The functions require additional scratch buffer for computations.
  -- * @{
  --  

  --*
  -- * One-channel 8-bit unsigned image QualityIndex.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oRoiSize \ref roi_specification.
  -- * \param pDst Pointer to the quality index.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiQualityIndexGetBufferHostSize_8u32f_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_QUALITY_INDEX_ERROR if pixels of 
  -- * either image are constant numberse.
  --  

   function nppiQualityIndex_8u32f_C1R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17244
   pragma Import (C, nppiQualityIndex_8u32f_C1R, "nppiQualityIndex_8u32f_C1R");

  --*
  -- * One-channel 16-bit unsigned image QualityIndex.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oRoiSize \ref roi_specification.
  -- * \param pDst Pointer to the quality index.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiQualityIndexGetBufferHostSize_16u32f_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_QUALITY_INDEX_ERROR if pixels of 
  -- * either image are constant numberse.
  --  

   function nppiQualityIndex_16u32f_C1R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17263
   pragma Import (C, nppiQualityIndex_16u32f_C1R, "nppiQualityIndex_16u32f_C1R");

  --*
  -- * One-channel 32-bit floating point image QualityIndex.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oRoiSize \ref roi_specification.
  -- * \param pDst Pointer to the quality index.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiQualityIndexGetBufferHostSize_32f_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_QUALITY_INDEX_ERROR if pixels of 
  -- * either image are constant numberse.
  --  

   function nppiQualityIndex_32f_C1R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17282
   pragma Import (C, nppiQualityIndex_32f_C1R, "nppiQualityIndex_32f_C1R");

  --*
  -- * Three-channel 8-bit unsigned image QualityIndex.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oRoiSize \ref roi_specification.
  -- * \param pDst Pointer to the quality index.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiQualityIndexGetBufferHostSize_8u32f_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_QUALITY_INDEX_ERROR if pixels of 
  -- * either image are constant numberse.
  --  

   function nppiQualityIndex_8u32f_C3R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17301
   pragma Import (C, nppiQualityIndex_8u32f_C3R, "nppiQualityIndex_8u32f_C3R");

  --*
  -- * Three-channel 16-bit unsigned image QualityIndex.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oRoiSize \ref roi_specification.
  -- * \param pDst Pointer to the quality index.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiQualityIndexGetBufferHostSize_16u32f_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_QUALITY_INDEX_ERROR if pixels of 
  -- * either image are constant numberse.
  --  

   function nppiQualityIndex_16u32f_C3R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17320
   pragma Import (C, nppiQualityIndex_16u32f_C3R, "nppiQualityIndex_16u32f_C3R");

  --*
  -- * Three-channel 32-bit floating point image QualityIndex.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oRoiSize \ref roi_specification.
  -- * \param pDst Pointer to the quality index.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiQualityIndexGetBufferHostSize_32f_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_QUALITY_INDEX_ERROR if pixels of 
  -- * either image are constant numberse.
  --  

   function nppiQualityIndex_32f_C3R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17339
   pragma Import (C, nppiQualityIndex_32f_C3R, "nppiQualityIndex_32f_C3R");

  --*
  -- * Four-channel 8-bit unsigned image QualityIndex.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oRoiSize \ref roi_specification.
  -- * \param pDst Pointer to the quality index.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiQualityIndexGetBufferHostSize_8u32f_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_QUALITY_INDEX_ERROR if pixels of 
  -- * either image are constant numberse.
  --  

   function nppiQualityIndex_8u32f_AC4R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17358
   pragma Import (C, nppiQualityIndex_8u32f_AC4R, "nppiQualityIndex_8u32f_AC4R");

  --*
  -- * Four-channel 16-bit unsigned image QualityIndex.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oRoiSize \ref roi_specification.
  -- * \param pDst Pointer to the quality index.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiQualityIndexGetBufferHostSize_16u32f_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_QUALITY_INDEX_ERROR if pixels of 
  -- * either image are constant numberse.
  --  

   function nppiQualityIndex_16u32f_AC4R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17377
   pragma Import (C, nppiQualityIndex_16u32f_AC4R, "nppiQualityIndex_16u32f_AC4R");

  --*
  -- * Four-channel 32-bit floating point image QualityIndex.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oRoiSize \ref roi_specification.
  -- * \param pDst Pointer to the quality index.
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiQualityIndexGetBufferHostSize_32f_AC4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_QUALITY_INDEX_ERROR if pixels of 
  -- * either image are constant numberse.
  --  

   function nppiQualityIndex_32f_AC4R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oRoiSize : nppdefs_h.NppiSize;
      pDst : access nppdefs_h.Npp32f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17396
   pragma Import (C, nppiQualityIndex_32f_AC4R, "nppiQualityIndex_32f_AC4R");

  --* @}  
  --* @name QualityIndexGetBufferHostSize 
  -- * Companion primitives for computing the device buffer size (in bytes) required by the QualityIndex primitives.
  -- * @{
  --  

  --* 
  -- * Buffer size (in bytes) for \ref nppiQualityIndex_8u32f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiQualityIndexGetBufferHostSize_8u32f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17413
   pragma Import (C, nppiQualityIndexGetBufferHostSize_8u32f_C1R, "nppiQualityIndexGetBufferHostSize_8u32f_C1R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiQualityIndex_16u32f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiQualityIndexGetBufferHostSize_16u32f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17423
   pragma Import (C, nppiQualityIndexGetBufferHostSize_16u32f_C1R, "nppiQualityIndexGetBufferHostSize_16u32f_C1R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiQualityIndex_32f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiQualityIndexGetBufferHostSize_32f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17433
   pragma Import (C, nppiQualityIndexGetBufferHostSize_32f_C1R, "nppiQualityIndexGetBufferHostSize_32f_C1R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiQualityIndex_8u32f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiQualityIndexGetBufferHostSize_8u32f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17443
   pragma Import (C, nppiQualityIndexGetBufferHostSize_8u32f_C3R, "nppiQualityIndexGetBufferHostSize_8u32f_C3R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiQualityIndex_16u32f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiQualityIndexGetBufferHostSize_16u32f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17453
   pragma Import (C, nppiQualityIndexGetBufferHostSize_16u32f_C3R, "nppiQualityIndexGetBufferHostSize_16u32f_C3R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiQualityIndex_32f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiQualityIndexGetBufferHostSize_32f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17463
   pragma Import (C, nppiQualityIndexGetBufferHostSize_32f_C3R, "nppiQualityIndexGetBufferHostSize_32f_C3R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiQualityIndex_8u32f_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiQualityIndexGetBufferHostSize_8u32f_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17473
   pragma Import (C, nppiQualityIndexGetBufferHostSize_8u32f_AC4R, "nppiQualityIndexGetBufferHostSize_8u32f_AC4R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiQualityIndex_16u32f_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiQualityIndexGetBufferHostSize_16u32f_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17483
   pragma Import (C, nppiQualityIndexGetBufferHostSize_16u32f_AC4R, "nppiQualityIndexGetBufferHostSize_16u32f_AC4R");

  --* 
  -- * Buffer size (in bytes) for \ref nppiQualityIndex_32f_AC4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiQualityIndexGetBufferHostSize_32f_AC4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17493
   pragma Import (C, nppiQualityIndexGetBufferHostSize_32f_AC4R, "nppiQualityIndexGetBufferHostSize_32f_AC4R");

  --* @}   
  --* @} image_quality_index  
  --* @defgroup image_maximum_error MaximumError
  -- * Primitives for computing the maximum error between two images.
  -- * Given two images \f$pSrc1\f$ and \f$pSrc2\f$ both with width \f$W\f$ and height \f$H\f$, 
  -- * the maximum error is defined as the largest absolute difference between pixels of two images.
  -- * If the image is in complex format, the absolute value of the complex number is provided.
  -- * 
  -- * @{
  --  

  --*
  -- * One-channel 8-bit unsigned image Maximum_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumErrorGetBufferHostSize_8u_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumError_8u_C1R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17518
   pragma Import (C, nppiMaximumError_8u_C1R, "nppiMaximumError_8u_C1R");

  --*
  -- * One-channel 8-bit signed image Maximum_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumErrorGetBufferHostSize_8u_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumError_8s_C1R
     (pSrc1 : access nppdefs_h.Npp8s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17535
   pragma Import (C, nppiMaximumError_8s_C1R, "nppiMaximumError_8s_C1R");

  --*
  -- * One-channel 16-bit unsigned image Maximum_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumErrorGetBufferHostSize_16u_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumError_16u_C1R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17552
   pragma Import (C, nppiMaximumError_16u_C1R, "nppiMaximumError_16u_C1R");

  --*
  -- * One-channel 16-bit signed image Maximum_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumErrorGetBufferHostSize_16s_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumError_16s_C1R
     (pSrc1 : access nppdefs_h.Npp16s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17569
   pragma Import (C, nppiMaximumError_16s_C1R, "nppiMaximumError_16s_C1R");

  --*
  -- * One-channel 16-bit signed complex image Maximum_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumErrorGetBufferHostSize_16s_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumError_16sc_C1R
     (pSrc1 : access constant nppdefs_h.Npp16sc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp16sc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17586
   pragma Import (C, nppiMaximumError_16sc_C1R, "nppiMaximumError_16sc_C1R");

  --*
  -- * One-channel 32-bit unsigned image Maximum_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumErrorGetBufferHostSize_16u_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumError_32u_C1R
     (pSrc1 : access nppdefs_h.Npp32u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17603
   pragma Import (C, nppiMaximumError_32u_C1R, "nppiMaximumError_32u_C1R");

  --*
  -- * One-channel 32-bit signed image Maximum_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumErrorGetBufferHostSize_16s_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumError_32s_C1R
     (pSrc1 : access nppdefs_h.Npp32s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17620
   pragma Import (C, nppiMaximumError_32s_C1R, "nppiMaximumError_32s_C1R");

  --*
  -- * One-channel 32-bit signed complex image Maximum_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumErrorGetBufferHostSize_16s_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumError_32sc_C1R
     (pSrc1 : access constant nppdefs_h.Npp32sc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp32sc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17637
   pragma Import (C, nppiMaximumError_32sc_C1R, "nppiMaximumError_32sc_C1R");

  --*
  -- * One-channel 32-bit floating point image Maximum_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumErrorGetBufferHostSize_32f_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiMaximumError_32f_C1R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17655
   pragma Import (C, nppiMaximumError_32f_C1R, "nppiMaximumError_32f_C1R");

  --*
  -- * One-channel 32-bit floating point complex image Maximum_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumErrorGetBufferHostSize_32f_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiMaximumError_32fc_C1R
     (pSrc1 : access constant nppdefs_h.Npp32fc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp32fc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17673
   pragma Import (C, nppiMaximumError_32fc_C1R, "nppiMaximumError_32fc_C1R");

  --*
  -- * One-channel 64-bit floating point image Maximum_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumErrorGetBufferHostSize_32f_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiMaximumError_64f_C1R
     (pSrc1 : access nppdefs_h.Npp64f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp64f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17691
   pragma Import (C, nppiMaximumError_64f_C1R, "nppiMaximumError_64f_C1R");

  --*
  -- * Two-channel 8-bit unsigned image Maximum_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumErrorGetBufferHostSize_8u_C2R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumError_8u_C2R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17708
   pragma Import (C, nppiMaximumError_8u_C2R, "nppiMaximumError_8u_C2R");

  --*
  -- * Two-channel 8-bit signed image Maximum_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumErrorGetBufferHostSize_8u_C2R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumError_8s_C2R
     (pSrc1 : access nppdefs_h.Npp8s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17725
   pragma Import (C, nppiMaximumError_8s_C2R, "nppiMaximumError_8s_C2R");

  --*
  -- * Two-channel 16-bit unsigned image Maximum_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumErrorGetBufferHostSize_16u_C2R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumError_16u_C2R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17742
   pragma Import (C, nppiMaximumError_16u_C2R, "nppiMaximumError_16u_C2R");

  --*
  -- * Two-channel 16-bit signed image Maximum_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumErrorGetBufferHostSize_16s_C2R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumError_16s_C2R
     (pSrc1 : access nppdefs_h.Npp16s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17759
   pragma Import (C, nppiMaximumError_16s_C2R, "nppiMaximumError_16s_C2R");

  --*
  -- * Two-channel 16-bit signed complex image Maximum_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumErrorGetBufferHostSize_16s_C2R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumError_16sc_C2R
     (pSrc1 : access constant nppdefs_h.Npp16sc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp16sc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17776
   pragma Import (C, nppiMaximumError_16sc_C2R, "nppiMaximumError_16sc_C2R");

  --*
  -- * Two-channel 32-bit unsigned image Maximum_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumErrorGetBufferHostSize_16u_C2R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumError_32u_C2R
     (pSrc1 : access nppdefs_h.Npp32u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17793
   pragma Import (C, nppiMaximumError_32u_C2R, "nppiMaximumError_32u_C2R");

  --*
  -- * Two-channel 32-bit signed image Maximum_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumErrorGetBufferHostSize_16s_C2R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumError_32s_C2R
     (pSrc1 : access nppdefs_h.Npp32s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17810
   pragma Import (C, nppiMaximumError_32s_C2R, "nppiMaximumError_32s_C2R");

  --*
  -- * Two-channel 32-bit signed complex image Maximum_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumErrorGetBufferHostSize_16s_C2R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumError_32sc_C2R
     (pSrc1 : access constant nppdefs_h.Npp32sc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp32sc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17827
   pragma Import (C, nppiMaximumError_32sc_C2R, "nppiMaximumError_32sc_C2R");

  --*
  -- * Two-channel 32-bit floating point image Maximum_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumErrorGetBufferHostSize_32f_C2R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiMaximumError_32f_C2R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17845
   pragma Import (C, nppiMaximumError_32f_C2R, "nppiMaximumError_32f_C2R");

  --*
  -- * Two-channel 32-bit floating point complex image Maximum_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumErrorGetBufferHostSize_32f_C2R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiMaximumError_32fc_C2R
     (pSrc1 : access constant nppdefs_h.Npp32fc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp32fc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17863
   pragma Import (C, nppiMaximumError_32fc_C2R, "nppiMaximumError_32fc_C2R");

  --*
  -- * Two-channel 64-bit floating point image Maximum_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumErrorGetBufferHostSize_32f_C2R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiMaximumError_64f_C2R
     (pSrc1 : access nppdefs_h.Npp64f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp64f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17881
   pragma Import (C, nppiMaximumError_64f_C2R, "nppiMaximumError_64f_C2R");

  --*
  -- * Three-channel 8-bit unsigned image Maximum_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumErrorGetBufferHostSize_8u_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumError_8u_C3R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17898
   pragma Import (C, nppiMaximumError_8u_C3R, "nppiMaximumError_8u_C3R");

  --*
  -- * Three-channel 8-bit signed image Maximum_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumErrorGetBufferHostSize_8u_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumError_8s_C3R
     (pSrc1 : access nppdefs_h.Npp8s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17915
   pragma Import (C, nppiMaximumError_8s_C3R, "nppiMaximumError_8s_C3R");

  --*
  -- * Three-channel 16-bit unsigned image Maximum_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumErrorGetBufferHostSize_16u_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumError_16u_C3R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17932
   pragma Import (C, nppiMaximumError_16u_C3R, "nppiMaximumError_16u_C3R");

  --*
  -- * Three-channel 16-bit signed image Maximum_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumErrorGetBufferHostSize_16s_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumError_16s_C3R
     (pSrc1 : access nppdefs_h.Npp16s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17949
   pragma Import (C, nppiMaximumError_16s_C3R, "nppiMaximumError_16s_C3R");

  --*
  -- * Three-channel 16-bit signed complex image Maximum_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumErrorGetBufferHostSize_16s_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumError_16sc_C3R
     (pSrc1 : access constant nppdefs_h.Npp16sc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp16sc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17966
   pragma Import (C, nppiMaximumError_16sc_C3R, "nppiMaximumError_16sc_C3R");

  --*
  -- * Three-channel 32-bit unsigned image Maximum_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumErrorGetBufferHostSize_16u_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumError_32u_C3R
     (pSrc1 : access nppdefs_h.Npp32u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:17983
   pragma Import (C, nppiMaximumError_32u_C3R, "nppiMaximumError_32u_C3R");

  --*
  -- * Three-channel 32-bit signed image Maximum_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumErrorGetBufferHostSize_16s_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumError_32s_C3R
     (pSrc1 : access nppdefs_h.Npp32s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18000
   pragma Import (C, nppiMaximumError_32s_C3R, "nppiMaximumError_32s_C3R");

  --*
  -- * Three-channel 32-bit signed complex image Maximum_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumErrorGetBufferHostSize_16s_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumError_32sc_C3R
     (pSrc1 : access constant nppdefs_h.Npp32sc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp32sc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18017
   pragma Import (C, nppiMaximumError_32sc_C3R, "nppiMaximumError_32sc_C3R");

  --*
  -- * Three-channel 32-bit floating point image Maximum_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumErrorGetBufferHostSize_32f_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiMaximumError_32f_C3R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18035
   pragma Import (C, nppiMaximumError_32f_C3R, "nppiMaximumError_32f_C3R");

  --*
  -- * Three-channel 32-bit floating point complex image Maximum_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumErrorGetBufferHostSize_32f_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiMaximumError_32fc_C3R
     (pSrc1 : access constant nppdefs_h.Npp32fc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp32fc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18053
   pragma Import (C, nppiMaximumError_32fc_C3R, "nppiMaximumError_32fc_C3R");

  --*
  -- * Three-channel 64-bit floating point image Maximum_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumErrorGetBufferHostSize_32f_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiMaximumError_64f_C3R
     (pSrc1 : access nppdefs_h.Npp64f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp64f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18071
   pragma Import (C, nppiMaximumError_64f_C3R, "nppiMaximumError_64f_C3R");

  --*
  -- * Four-channel 8-bit unsigned image Maximum_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumErrorGetBufferHostSize_8u_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumError_8u_C4R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18088
   pragma Import (C, nppiMaximumError_8u_C4R, "nppiMaximumError_8u_C4R");

  --*
  -- * Four-channel 8-bit signed image Maximum_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumErrorGetBufferHostSize_8u_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumError_8s_C4R
     (pSrc1 : access nppdefs_h.Npp8s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18105
   pragma Import (C, nppiMaximumError_8s_C4R, "nppiMaximumError_8s_C4R");

  --*
  -- * Four-channel 16-bit unsigned image Maximum_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumErrorGetBufferHostSize_16u_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumError_16u_C4R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18122
   pragma Import (C, nppiMaximumError_16u_C4R, "nppiMaximumError_16u_C4R");

  --*
  -- * Four-channel 16-bit signed image Maximum_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumErrorGetBufferHostSize_16s_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumError_16s_C4R
     (pSrc1 : access nppdefs_h.Npp16s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18139
   pragma Import (C, nppiMaximumError_16s_C4R, "nppiMaximumError_16s_C4R");

  --*
  -- * Four-channel 16-bit signed complex image Maximum_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumErrorGetBufferHostSize_16s_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumError_16sc_C4R
     (pSrc1 : access constant nppdefs_h.Npp16sc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp16sc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18156
   pragma Import (C, nppiMaximumError_16sc_C4R, "nppiMaximumError_16sc_C4R");

  --*
  -- * Four-channel 32-bit unsigned image Maximum_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumErrorGetBufferHostSize_16u_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumError_32u_C4R
     (pSrc1 : access nppdefs_h.Npp32u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18173
   pragma Import (C, nppiMaximumError_32u_C4R, "nppiMaximumError_32u_C4R");

  --*
  -- * Four-channel 32-bit signed image Maximum_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumErrorGetBufferHostSize_16s_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumError_32s_C4R
     (pSrc1 : access nppdefs_h.Npp32s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18190
   pragma Import (C, nppiMaximumError_32s_C4R, "nppiMaximumError_32s_C4R");

  --*
  -- * Four-channel 32-bit signed complex image Maximum_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumErrorGetBufferHostSize_16s_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumError_32sc_C4R
     (pSrc1 : access constant nppdefs_h.Npp32sc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp32sc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18207
   pragma Import (C, nppiMaximumError_32sc_C4R, "nppiMaximumError_32sc_C4R");

  --*
  -- * Four-channel 32-bit floating point image Maximum_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumErrorGetBufferHostSize_32f_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiMaximumError_32f_C4R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18225
   pragma Import (C, nppiMaximumError_32f_C4R, "nppiMaximumError_32f_C4R");

  --*
  -- * Four-channel 32-bit floating point complex image Maximum_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumErrorGetBufferHostSize_32f_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiMaximumError_32fc_C4R
     (pSrc1 : access constant nppdefs_h.Npp32fc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp32fc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18243
   pragma Import (C, nppiMaximumError_32fc_C4R, "nppiMaximumError_32fc_C4R");

  --*
  -- * Four-channel 64-bit floating point image Maximum_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumErrorGetBufferHostSize_32f_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiMaximumError_64f_C4R
     (pSrc1 : access nppdefs_h.Npp64f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp64f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18261
   pragma Import (C, nppiMaximumError_64f_C4R, "nppiMaximumError_64f_C4R");

  --* @}  
  --* @name NormDiffInfGetBufferHostSize
  -- * Companion primitives for computing the device buffer size (in bytes) required by the NormDiff_Inf primitives.
  -- * @{
  --  

  --* 
  -- * Buffer size for \ref nppiMaximumError_8u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumErrorGetBufferHostSize_8u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18279
   pragma Import (C, nppiMaximumErrorGetBufferHostSize_8u_C1R, "nppiMaximumErrorGetBufferHostSize_8u_C1R");

  --* 
  -- * Buffer size for \ref nppiMaximumError_8s_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumErrorGetBufferHostSize_8s_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18289
   pragma Import (C, nppiMaximumErrorGetBufferHostSize_8s_C1R, "nppiMaximumErrorGetBufferHostSize_8s_C1R");

  --* 
  -- * Buffer size for \ref nppiMaximumError_16u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumErrorGetBufferHostSize_16u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18299
   pragma Import (C, nppiMaximumErrorGetBufferHostSize_16u_C1R, "nppiMaximumErrorGetBufferHostSize_16u_C1R");

  --* 
  -- * Buffer size for \ref nppiMaximumError_16s_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumErrorGetBufferHostSize_16s_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18309
   pragma Import (C, nppiMaximumErrorGetBufferHostSize_16s_C1R, "nppiMaximumErrorGetBufferHostSize_16s_C1R");

  --* 
  -- * Buffer size for \ref nppiMaximumError_16sc_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumErrorGetBufferHostSize_16sc_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18319
   pragma Import (C, nppiMaximumErrorGetBufferHostSize_16sc_C1R, "nppiMaximumErrorGetBufferHostSize_16sc_C1R");

  --* 
  -- * Buffer size for \ref nppiMaximumError_32u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumErrorGetBufferHostSize_32u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18329
   pragma Import (C, nppiMaximumErrorGetBufferHostSize_32u_C1R, "nppiMaximumErrorGetBufferHostSize_32u_C1R");

  --* 
  -- * Buffer size for \ref nppiMaximumError_32s_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumErrorGetBufferHostSize_32s_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18339
   pragma Import (C, nppiMaximumErrorGetBufferHostSize_32s_C1R, "nppiMaximumErrorGetBufferHostSize_32s_C1R");

  --* 
  -- * Buffer size for \ref nppiMaximumError_32sc_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumErrorGetBufferHostSize_32sc_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18349
   pragma Import (C, nppiMaximumErrorGetBufferHostSize_32sc_C1R, "nppiMaximumErrorGetBufferHostSize_32sc_C1R");

  --* 
  -- * Buffer size for \ref nppiMaximumError_32f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumErrorGetBufferHostSize_32f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18359
   pragma Import (C, nppiMaximumErrorGetBufferHostSize_32f_C1R, "nppiMaximumErrorGetBufferHostSize_32f_C1R");

  --* 
  -- * Buffer size for \ref nppiMaximumError_32fc_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumErrorGetBufferHostSize_32fc_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18369
   pragma Import (C, nppiMaximumErrorGetBufferHostSize_32fc_C1R, "nppiMaximumErrorGetBufferHostSize_32fc_C1R");

  --* 
  -- * Buffer size for \ref nppiMaximumError_64f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumErrorGetBufferHostSize_64f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18379
   pragma Import (C, nppiMaximumErrorGetBufferHostSize_64f_C1R, "nppiMaximumErrorGetBufferHostSize_64f_C1R");

  --* 
  -- * Buffer size for \ref nppiMaximumError_8u_C2R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumErrorGetBufferHostSize_8u_C2R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18389
   pragma Import (C, nppiMaximumErrorGetBufferHostSize_8u_C2R, "nppiMaximumErrorGetBufferHostSize_8u_C2R");

  --* 
  -- * Buffer size for \ref nppiMaximumError_8s_C2R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumErrorGetBufferHostSize_8s_C2R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18399
   pragma Import (C, nppiMaximumErrorGetBufferHostSize_8s_C2R, "nppiMaximumErrorGetBufferHostSize_8s_C2R");

  --* 
  -- * Buffer size for \ref nppiMaximumError_16u_C2R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumErrorGetBufferHostSize_16u_C2R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18409
   pragma Import (C, nppiMaximumErrorGetBufferHostSize_16u_C2R, "nppiMaximumErrorGetBufferHostSize_16u_C2R");

  --* 
  -- * Buffer size for \ref nppiMaximumError_16s_C2R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumErrorGetBufferHostSize_16s_C2R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18419
   pragma Import (C, nppiMaximumErrorGetBufferHostSize_16s_C2R, "nppiMaximumErrorGetBufferHostSize_16s_C2R");

  --* 
  -- * Buffer size for \ref nppiMaximumError_16sc_C2R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumErrorGetBufferHostSize_16sc_C2R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18429
   pragma Import (C, nppiMaximumErrorGetBufferHostSize_16sc_C2R, "nppiMaximumErrorGetBufferHostSize_16sc_C2R");

  --* 
  -- * Buffer size for \ref nppiMaximumError_32u_C2R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumErrorGetBufferHostSize_32u_C2R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18439
   pragma Import (C, nppiMaximumErrorGetBufferHostSize_32u_C2R, "nppiMaximumErrorGetBufferHostSize_32u_C2R");

  --* 
  -- * Buffer size for \ref nppiMaximumError_32s_C2R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumErrorGetBufferHostSize_32s_C2R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18449
   pragma Import (C, nppiMaximumErrorGetBufferHostSize_32s_C2R, "nppiMaximumErrorGetBufferHostSize_32s_C2R");

  --* 
  -- * Buffer size for \ref nppiMaximumError_32sc_C2R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumErrorGetBufferHostSize_32sc_C2R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18459
   pragma Import (C, nppiMaximumErrorGetBufferHostSize_32sc_C2R, "nppiMaximumErrorGetBufferHostSize_32sc_C2R");

  --* 
  -- * Buffer size for \ref nppiMaximumError_32f_C2R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumErrorGetBufferHostSize_32f_C2R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18469
   pragma Import (C, nppiMaximumErrorGetBufferHostSize_32f_C2R, "nppiMaximumErrorGetBufferHostSize_32f_C2R");

  --* 
  -- * Buffer size for \ref nppiMaximumError_32fc_C2R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumErrorGetBufferHostSize_32fc_C2R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18479
   pragma Import (C, nppiMaximumErrorGetBufferHostSize_32fc_C2R, "nppiMaximumErrorGetBufferHostSize_32fc_C2R");

  --* 
  -- * Buffer size for \ref nppiMaximumError_64f_C2R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumErrorGetBufferHostSize_64f_C2R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18489
   pragma Import (C, nppiMaximumErrorGetBufferHostSize_64f_C2R, "nppiMaximumErrorGetBufferHostSize_64f_C2R");

  --* 
  -- * Buffer size for \ref nppiMaximumError_8u_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumErrorGetBufferHostSize_8u_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18499
   pragma Import (C, nppiMaximumErrorGetBufferHostSize_8u_C3R, "nppiMaximumErrorGetBufferHostSize_8u_C3R");

  --* 
  -- * Buffer size for \ref nppiMaximumError_8s_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumErrorGetBufferHostSize_8s_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18509
   pragma Import (C, nppiMaximumErrorGetBufferHostSize_8s_C3R, "nppiMaximumErrorGetBufferHostSize_8s_C3R");

  --* 
  -- * Buffer size for \ref nppiMaximumError_16u_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumErrorGetBufferHostSize_16u_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18519
   pragma Import (C, nppiMaximumErrorGetBufferHostSize_16u_C3R, "nppiMaximumErrorGetBufferHostSize_16u_C3R");

  --* 
  -- * Buffer size for \ref nppiMaximumError_16s_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumErrorGetBufferHostSize_16s_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18529
   pragma Import (C, nppiMaximumErrorGetBufferHostSize_16s_C3R, "nppiMaximumErrorGetBufferHostSize_16s_C3R");

  --* 
  -- * Buffer size for \ref nppiMaximumError_16sc_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumErrorGetBufferHostSize_16sc_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18539
   pragma Import (C, nppiMaximumErrorGetBufferHostSize_16sc_C3R, "nppiMaximumErrorGetBufferHostSize_16sc_C3R");

  --* 
  -- * Buffer size for \ref nppiMaximumError_32u_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumErrorGetBufferHostSize_32u_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18549
   pragma Import (C, nppiMaximumErrorGetBufferHostSize_32u_C3R, "nppiMaximumErrorGetBufferHostSize_32u_C3R");

  --* 
  -- * Buffer size for \ref nppiMaximumError_32s_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumErrorGetBufferHostSize_32s_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18559
   pragma Import (C, nppiMaximumErrorGetBufferHostSize_32s_C3R, "nppiMaximumErrorGetBufferHostSize_32s_C3R");

  --* 
  -- * Buffer size for \ref nppiMaximumError_32sc_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumErrorGetBufferHostSize_32sc_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18569
   pragma Import (C, nppiMaximumErrorGetBufferHostSize_32sc_C3R, "nppiMaximumErrorGetBufferHostSize_32sc_C3R");

  --* 
  -- * Buffer size for \ref nppiMaximumError_32f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumErrorGetBufferHostSize_32f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18579
   pragma Import (C, nppiMaximumErrorGetBufferHostSize_32f_C3R, "nppiMaximumErrorGetBufferHostSize_32f_C3R");

  --* 
  -- * Buffer size for \ref nppiMaximumError_32fc_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumErrorGetBufferHostSize_32fc_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18589
   pragma Import (C, nppiMaximumErrorGetBufferHostSize_32fc_C3R, "nppiMaximumErrorGetBufferHostSize_32fc_C3R");

  --* 
  -- * Buffer size for \ref nppiMaximumError_64f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumErrorGetBufferHostSize_64f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18599
   pragma Import (C, nppiMaximumErrorGetBufferHostSize_64f_C3R, "nppiMaximumErrorGetBufferHostSize_64f_C3R");

  --* 
  -- * Buffer size for \ref nppiMaximumError_8u_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumErrorGetBufferHostSize_8u_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18609
   pragma Import (C, nppiMaximumErrorGetBufferHostSize_8u_C4R, "nppiMaximumErrorGetBufferHostSize_8u_C4R");

  --* 
  -- * Buffer size for \ref nppiMaximumError_8s_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumErrorGetBufferHostSize_8s_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18619
   pragma Import (C, nppiMaximumErrorGetBufferHostSize_8s_C4R, "nppiMaximumErrorGetBufferHostSize_8s_C4R");

  --* 
  -- * Buffer size for \ref nppiMaximumError_16u_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumErrorGetBufferHostSize_16u_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18629
   pragma Import (C, nppiMaximumErrorGetBufferHostSize_16u_C4R, "nppiMaximumErrorGetBufferHostSize_16u_C4R");

  --* 
  -- * Buffer size for \ref nppiMaximumError_16s_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumErrorGetBufferHostSize_16s_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18639
   pragma Import (C, nppiMaximumErrorGetBufferHostSize_16s_C4R, "nppiMaximumErrorGetBufferHostSize_16s_C4R");

  --* 
  -- * Buffer size for \ref nppiMaximumError_16sc_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumErrorGetBufferHostSize_16sc_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18649
   pragma Import (C, nppiMaximumErrorGetBufferHostSize_16sc_C4R, "nppiMaximumErrorGetBufferHostSize_16sc_C4R");

  --* 
  -- * Buffer size for \ref nppiMaximumError_32u_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumErrorGetBufferHostSize_32u_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18659
   pragma Import (C, nppiMaximumErrorGetBufferHostSize_32u_C4R, "nppiMaximumErrorGetBufferHostSize_32u_C4R");

  --* 
  -- * Buffer size for \ref nppiMaximumError_32s_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumErrorGetBufferHostSize_32s_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18669
   pragma Import (C, nppiMaximumErrorGetBufferHostSize_32s_C4R, "nppiMaximumErrorGetBufferHostSize_32s_C4R");

  --* 
  -- * Buffer size for \ref nppiMaximumError_32sc_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumErrorGetBufferHostSize_32sc_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18679
   pragma Import (C, nppiMaximumErrorGetBufferHostSize_32sc_C4R, "nppiMaximumErrorGetBufferHostSize_32sc_C4R");

  --* 
  -- * Buffer size for \ref nppiMaximumError_32f_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumErrorGetBufferHostSize_32f_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18689
   pragma Import (C, nppiMaximumErrorGetBufferHostSize_32f_C4R, "nppiMaximumErrorGetBufferHostSize_32f_C4R");

  --* 
  -- * Buffer size for \ref nppiMaximumError_32fc_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumErrorGetBufferHostSize_32fc_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18699
   pragma Import (C, nppiMaximumErrorGetBufferHostSize_32fc_C4R, "nppiMaximumErrorGetBufferHostSize_32fc_C4R");

  --* 
  -- * Buffer size for \ref nppiMaximumError_64f_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumErrorGetBufferHostSize_64f_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18709
   pragma Import (C, nppiMaximumErrorGetBufferHostSize_64f_C4R, "nppiMaximumErrorGetBufferHostSize_64f_C4R");

  --* @}  
  --* @defgroup image_average_error AverageError
  -- * Primitives for computing the average error between two images.
  -- * Given two images \f$pSrc1\f$ and \f$pSrc2\f$ both with width \f$W\f$ and height \f$H\f$, 
  -- * the average error is defined as:
  -- * \f[Average Error = \frac{1}{W\cdot H\cdot N}\sum_{n=0}^{N-1}\sum_{j=0}^{H-1}\sum_{i=0}^{W-1}\left|pSrc1(j,i) - pSrc2(j,i)\right|\f]
  -- * where N stands for the number of channels. If the image is in complex format, the absolute value is used for computation.
  -- * @{
  --  

  --*
  -- * One-channel 8-bit unsigned image Average_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageErrorGetBufferHostSize_8u_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageError_8u_C1R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18733
   pragma Import (C, nppiAverageError_8u_C1R, "nppiAverageError_8u_C1R");

  --*
  -- * One-channel 8-bit signed image Average_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageErrorGetBufferHostSize_8u_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageError_8s_C1R
     (pSrc1 : access nppdefs_h.Npp8s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18750
   pragma Import (C, nppiAverageError_8s_C1R, "nppiAverageError_8s_C1R");

  --*
  -- * One-channel 16-bit unsigned image Average_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageErrorGetBufferHostSize_16u_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageError_16u_C1R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18767
   pragma Import (C, nppiAverageError_16u_C1R, "nppiAverageError_16u_C1R");

  --*
  -- * One-channel 16-bit signed image Average_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageErrorGetBufferHostSize_16s_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageError_16s_C1R
     (pSrc1 : access nppdefs_h.Npp16s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18784
   pragma Import (C, nppiAverageError_16s_C1R, "nppiAverageError_16s_C1R");

  --*
  -- * One-channel 16-bit signed complex image Average_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageErrorGetBufferHostSize_16s_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageError_16sc_C1R
     (pSrc1 : access constant nppdefs_h.Npp16sc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp16sc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18801
   pragma Import (C, nppiAverageError_16sc_C1R, "nppiAverageError_16sc_C1R");

  --*
  -- * One-channel 32-bit unsigned image Average_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageErrorGetBufferHostSize_16u_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageError_32u_C1R
     (pSrc1 : access nppdefs_h.Npp32u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18818
   pragma Import (C, nppiAverageError_32u_C1R, "nppiAverageError_32u_C1R");

  --*
  -- * One-channel 32-bit signed image Average_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageErrorGetBufferHostSize_16s_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageError_32s_C1R
     (pSrc1 : access nppdefs_h.Npp32s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18835
   pragma Import (C, nppiAverageError_32s_C1R, "nppiAverageError_32s_C1R");

  --*
  -- * One-channel 32-bit signed complex image Average_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageErrorGetBufferHostSize_16s_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageError_32sc_C1R
     (pSrc1 : access constant nppdefs_h.Npp32sc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp32sc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18852
   pragma Import (C, nppiAverageError_32sc_C1R, "nppiAverageError_32sc_C1R");

  --*
  -- * One-channel 32-bit floating point image Average_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageErrorGetBufferHostSize_32f_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiAverageError_32f_C1R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18870
   pragma Import (C, nppiAverageError_32f_C1R, "nppiAverageError_32f_C1R");

  --*
  -- * One-channel 32-bit floating point complex image Average_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageErrorGetBufferHostSize_32f_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiAverageError_32fc_C1R
     (pSrc1 : access constant nppdefs_h.Npp32fc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp32fc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18888
   pragma Import (C, nppiAverageError_32fc_C1R, "nppiAverageError_32fc_C1R");

  --*
  -- * One-channel 64-bit floating point image Average_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageErrorGetBufferHostSize_32f_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiAverageError_64f_C1R
     (pSrc1 : access nppdefs_h.Npp64f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp64f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18906
   pragma Import (C, nppiAverageError_64f_C1R, "nppiAverageError_64f_C1R");

  --*
  -- * Two-channel 8-bit unsigned image Average_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageErrorGetBufferHostSize_8u_C2R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageError_8u_C2R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18923
   pragma Import (C, nppiAverageError_8u_C2R, "nppiAverageError_8u_C2R");

  --*
  -- * Two-channel 8-bit signed image Average_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageErrorGetBufferHostSize_8u_C2R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageError_8s_C2R
     (pSrc1 : access nppdefs_h.Npp8s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18940
   pragma Import (C, nppiAverageError_8s_C2R, "nppiAverageError_8s_C2R");

  --*
  -- * Two-channel 16-bit unsigned image Average_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageErrorGetBufferHostSize_16u_C2R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageError_16u_C2R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18957
   pragma Import (C, nppiAverageError_16u_C2R, "nppiAverageError_16u_C2R");

  --*
  -- * Two-channel 16-bit signed image Average_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageErrorGetBufferHostSize_16s_C2R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageError_16s_C2R
     (pSrc1 : access nppdefs_h.Npp16s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18974
   pragma Import (C, nppiAverageError_16s_C2R, "nppiAverageError_16s_C2R");

  --*
  -- * Two-channel 16-bit signed complex image Average_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageErrorGetBufferHostSize_16s_C2R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageError_16sc_C2R
     (pSrc1 : access constant nppdefs_h.Npp16sc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp16sc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:18991
   pragma Import (C, nppiAverageError_16sc_C2R, "nppiAverageError_16sc_C2R");

  --*
  -- * Two-channel 32-bit unsigned image Average_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageErrorGetBufferHostSize_16u_C2R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageError_32u_C2R
     (pSrc1 : access nppdefs_h.Npp32u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19008
   pragma Import (C, nppiAverageError_32u_C2R, "nppiAverageError_32u_C2R");

  --*
  -- * Two-channel 32-bit signed image Average_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageErrorGetBufferHostSize_16s_C2R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageError_32s_C2R
     (pSrc1 : access nppdefs_h.Npp32s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19025
   pragma Import (C, nppiAverageError_32s_C2R, "nppiAverageError_32s_C2R");

  --*
  -- * Two-channel 32-bit signed complex image Average_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageErrorGetBufferHostSize_16s_C2R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageError_32sc_C2R
     (pSrc1 : access constant nppdefs_h.Npp32sc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp32sc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19042
   pragma Import (C, nppiAverageError_32sc_C2R, "nppiAverageError_32sc_C2R");

  --*
  -- * Two-channel 32-bit floating point image Average_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageErrorGetBufferHostSize_32f_C2R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiAverageError_32f_C2R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19060
   pragma Import (C, nppiAverageError_32f_C2R, "nppiAverageError_32f_C2R");

  --*
  -- * Two-channel 32-bit floating point complex image Average_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageErrorGetBufferHostSize_32f_C2R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiAverageError_32fc_C2R
     (pSrc1 : access constant nppdefs_h.Npp32fc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp32fc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19078
   pragma Import (C, nppiAverageError_32fc_C2R, "nppiAverageError_32fc_C2R");

  --*
  -- * Two-channel 64-bit floating point image Average_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageErrorGetBufferHostSize_32f_C2R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiAverageError_64f_C2R
     (pSrc1 : access nppdefs_h.Npp64f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp64f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19096
   pragma Import (C, nppiAverageError_64f_C2R, "nppiAverageError_64f_C2R");

  --*
  -- * Three-channel 8-bit unsigned image Average_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageErrorGetBufferHostSize_8u_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageError_8u_C3R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19113
   pragma Import (C, nppiAverageError_8u_C3R, "nppiAverageError_8u_C3R");

  --*
  -- * Three-channel 8-bit signed image Average_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageErrorGetBufferHostSize_8u_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageError_8s_C3R
     (pSrc1 : access nppdefs_h.Npp8s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19130
   pragma Import (C, nppiAverageError_8s_C3R, "nppiAverageError_8s_C3R");

  --*
  -- * Three-channel 16-bit unsigned image Average_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageErrorGetBufferHostSize_16u_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageError_16u_C3R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19147
   pragma Import (C, nppiAverageError_16u_C3R, "nppiAverageError_16u_C3R");

  --*
  -- * Three-channel 16-bit signed image Average_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageErrorGetBufferHostSize_16s_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageError_16s_C3R
     (pSrc1 : access nppdefs_h.Npp16s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19164
   pragma Import (C, nppiAverageError_16s_C3R, "nppiAverageError_16s_C3R");

  --*
  -- * Three-channel 16-bit signed complex image Average_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageErrorGetBufferHostSize_16s_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageError_16sc_C3R
     (pSrc1 : access constant nppdefs_h.Npp16sc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp16sc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19181
   pragma Import (C, nppiAverageError_16sc_C3R, "nppiAverageError_16sc_C3R");

  --*
  -- * Three-channel 32-bit unsigned image Average_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageErrorGetBufferHostSize_16u_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageError_32u_C3R
     (pSrc1 : access nppdefs_h.Npp32u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19198
   pragma Import (C, nppiAverageError_32u_C3R, "nppiAverageError_32u_C3R");

  --*
  -- * Three-channel 32-bit signed image Average_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageErrorGetBufferHostSize_16s_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageError_32s_C3R
     (pSrc1 : access nppdefs_h.Npp32s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19215
   pragma Import (C, nppiAverageError_32s_C3R, "nppiAverageError_32s_C3R");

  --*
  -- * Three-channel 32-bit signed complex image Average_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageErrorGetBufferHostSize_16s_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageError_32sc_C3R
     (pSrc1 : access constant nppdefs_h.Npp32sc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp32sc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19232
   pragma Import (C, nppiAverageError_32sc_C3R, "nppiAverageError_32sc_C3R");

  --*
  -- * Three-channel 32-bit floating point image Average_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageErrorGetBufferHostSize_32f_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiAverageError_32f_C3R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19250
   pragma Import (C, nppiAverageError_32f_C3R, "nppiAverageError_32f_C3R");

  --*
  -- * Three-channel 32-bit floating point complex image Average_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageErrorGetBufferHostSize_32f_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiAverageError_32fc_C3R
     (pSrc1 : access constant nppdefs_h.Npp32fc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp32fc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19268
   pragma Import (C, nppiAverageError_32fc_C3R, "nppiAverageError_32fc_C3R");

  --*
  -- * Three-channel 64-bit floating point image Average_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageErrorGetBufferHostSize_32f_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiAverageError_64f_C3R
     (pSrc1 : access nppdefs_h.Npp64f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp64f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19286
   pragma Import (C, nppiAverageError_64f_C3R, "nppiAverageError_64f_C3R");

  --*
  -- * Four-channel 8-bit unsigned image Average_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageErrorGetBufferHostSize_8u_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageError_8u_C4R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19303
   pragma Import (C, nppiAverageError_8u_C4R, "nppiAverageError_8u_C4R");

  --*
  -- * Four-channel 8-bit signed image Average_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageErrorGetBufferHostSize_8u_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageError_8s_C4R
     (pSrc1 : access nppdefs_h.Npp8s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19320
   pragma Import (C, nppiAverageError_8s_C4R, "nppiAverageError_8s_C4R");

  --*
  -- * Four-channel 16-bit unsigned image Average_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageErrorGetBufferHostSize_16u_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageError_16u_C4R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19337
   pragma Import (C, nppiAverageError_16u_C4R, "nppiAverageError_16u_C4R");

  --*
  -- * Four-channel 16-bit signed image Average_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageErrorGetBufferHostSize_16s_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageError_16s_C4R
     (pSrc1 : access nppdefs_h.Npp16s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19354
   pragma Import (C, nppiAverageError_16s_C4R, "nppiAverageError_16s_C4R");

  --*
  -- * Four-channel 16-bit signed complex image Average_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageErrorGetBufferHostSize_16s_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageError_16sc_C4R
     (pSrc1 : access constant nppdefs_h.Npp16sc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp16sc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19371
   pragma Import (C, nppiAverageError_16sc_C4R, "nppiAverageError_16sc_C4R");

  --*
  -- * Four-channel 32-bit unsigned image Average_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageErrorGetBufferHostSize_16u_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageError_32u_C4R
     (pSrc1 : access nppdefs_h.Npp32u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19388
   pragma Import (C, nppiAverageError_32u_C4R, "nppiAverageError_32u_C4R");

  --*
  -- * Four-channel 32-bit signed image Average_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageErrorGetBufferHostSize_16s_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageError_32s_C4R
     (pSrc1 : access nppdefs_h.Npp32s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19405
   pragma Import (C, nppiAverageError_32s_C4R, "nppiAverageError_32s_C4R");

  --*
  -- * Four-channel 32-bit signed complex image Average_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageErrorGetBufferHostSize_16s_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageError_32sc_C4R
     (pSrc1 : access constant nppdefs_h.Npp32sc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp32sc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19422
   pragma Import (C, nppiAverageError_32sc_C4R, "nppiAverageError_32sc_C4R");

  --*
  -- * Four-channel 32-bit floating point image Average_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageErrorGetBufferHostSize_32f_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiAverageError_32f_C4R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19440
   pragma Import (C, nppiAverageError_32f_C4R, "nppiAverageError_32f_C4R");

  --*
  -- * Four-channel 32-bit floating point complex image Average_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageErrorGetBufferHostSize_32f_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiAverageError_32fc_C4R
     (pSrc1 : access constant nppdefs_h.Npp32fc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp32fc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19458
   pragma Import (C, nppiAverageError_32fc_C4R, "nppiAverageError_32fc_C4R");

  --*
  -- * Four-channel 64-bit floating point image Average_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageErrorGetBufferHostSize_32f_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiAverageError_64f_C4R
     (pSrc1 : access nppdefs_h.Npp64f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp64f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19476
   pragma Import (C, nppiAverageError_64f_C4R, "nppiAverageError_64f_C4R");

  --* @}  
  --* @name NormDiffInfGetBufferHostSize
  -- * Companion primitives for computing the device buffer size (in bytes) required by the NormDiff_Inf primitives.
  -- * @{
  --  

  --* 
  -- * Buffer size for \ref nppiAverageError_8u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageErrorGetBufferHostSize_8u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19494
   pragma Import (C, nppiAverageErrorGetBufferHostSize_8u_C1R, "nppiAverageErrorGetBufferHostSize_8u_C1R");

  --* 
  -- * Buffer size for \ref nppiAverageError_8s_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageErrorGetBufferHostSize_8s_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19504
   pragma Import (C, nppiAverageErrorGetBufferHostSize_8s_C1R, "nppiAverageErrorGetBufferHostSize_8s_C1R");

  --* 
  -- * Buffer size for \ref nppiAverageError_16u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageErrorGetBufferHostSize_16u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19514
   pragma Import (C, nppiAverageErrorGetBufferHostSize_16u_C1R, "nppiAverageErrorGetBufferHostSize_16u_C1R");

  --* 
  -- * Buffer size for \ref nppiAverageError_16s_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageErrorGetBufferHostSize_16s_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19524
   pragma Import (C, nppiAverageErrorGetBufferHostSize_16s_C1R, "nppiAverageErrorGetBufferHostSize_16s_C1R");

  --* 
  -- * Buffer size for \ref nppiAverageError_16sc_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageErrorGetBufferHostSize_16sc_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19534
   pragma Import (C, nppiAverageErrorGetBufferHostSize_16sc_C1R, "nppiAverageErrorGetBufferHostSize_16sc_C1R");

  --* 
  -- * Buffer size for \ref nppiAverageError_32u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageErrorGetBufferHostSize_32u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19544
   pragma Import (C, nppiAverageErrorGetBufferHostSize_32u_C1R, "nppiAverageErrorGetBufferHostSize_32u_C1R");

  --* 
  -- * Buffer size for \ref nppiAverageError_32s_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageErrorGetBufferHostSize_32s_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19554
   pragma Import (C, nppiAverageErrorGetBufferHostSize_32s_C1R, "nppiAverageErrorGetBufferHostSize_32s_C1R");

  --* 
  -- * Buffer size for \ref nppiAverageError_32sc_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageErrorGetBufferHostSize_32sc_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19564
   pragma Import (C, nppiAverageErrorGetBufferHostSize_32sc_C1R, "nppiAverageErrorGetBufferHostSize_32sc_C1R");

  --* 
  -- * Buffer size for \ref nppiAverageError_32f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageErrorGetBufferHostSize_32f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19574
   pragma Import (C, nppiAverageErrorGetBufferHostSize_32f_C1R, "nppiAverageErrorGetBufferHostSize_32f_C1R");

  --* 
  -- * Buffer size for \ref nppiAverageError_32fc_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageErrorGetBufferHostSize_32fc_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19584
   pragma Import (C, nppiAverageErrorGetBufferHostSize_32fc_C1R, "nppiAverageErrorGetBufferHostSize_32fc_C1R");

  --* 
  -- * Buffer size for \ref nppiAverageError_64f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageErrorGetBufferHostSize_64f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19594
   pragma Import (C, nppiAverageErrorGetBufferHostSize_64f_C1R, "nppiAverageErrorGetBufferHostSize_64f_C1R");

  --* 
  -- * Buffer size for \ref nppiAverageError_8u_C2R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageErrorGetBufferHostSize_8u_C2R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19604
   pragma Import (C, nppiAverageErrorGetBufferHostSize_8u_C2R, "nppiAverageErrorGetBufferHostSize_8u_C2R");

  --* 
  -- * Buffer size for \ref nppiAverageError_8s_C2R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageErrorGetBufferHostSize_8s_C2R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19614
   pragma Import (C, nppiAverageErrorGetBufferHostSize_8s_C2R, "nppiAverageErrorGetBufferHostSize_8s_C2R");

  --* 
  -- * Buffer size for \ref nppiAverageError_16u_C2R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageErrorGetBufferHostSize_16u_C2R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19624
   pragma Import (C, nppiAverageErrorGetBufferHostSize_16u_C2R, "nppiAverageErrorGetBufferHostSize_16u_C2R");

  --* 
  -- * Buffer size for \ref nppiAverageError_16s_C2R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageErrorGetBufferHostSize_16s_C2R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19634
   pragma Import (C, nppiAverageErrorGetBufferHostSize_16s_C2R, "nppiAverageErrorGetBufferHostSize_16s_C2R");

  --* 
  -- * Buffer size for \ref nppiAverageError_16sc_C2R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageErrorGetBufferHostSize_16sc_C2R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19644
   pragma Import (C, nppiAverageErrorGetBufferHostSize_16sc_C2R, "nppiAverageErrorGetBufferHostSize_16sc_C2R");

  --* 
  -- * Buffer size for \ref nppiAverageError_32u_C2R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageErrorGetBufferHostSize_32u_C2R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19654
   pragma Import (C, nppiAverageErrorGetBufferHostSize_32u_C2R, "nppiAverageErrorGetBufferHostSize_32u_C2R");

  --* 
  -- * Buffer size for \ref nppiAverageError_32s_C2R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageErrorGetBufferHostSize_32s_C2R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19664
   pragma Import (C, nppiAverageErrorGetBufferHostSize_32s_C2R, "nppiAverageErrorGetBufferHostSize_32s_C2R");

  --* 
  -- * Buffer size for \ref nppiAverageError_32sc_C2R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageErrorGetBufferHostSize_32sc_C2R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19674
   pragma Import (C, nppiAverageErrorGetBufferHostSize_32sc_C2R, "nppiAverageErrorGetBufferHostSize_32sc_C2R");

  --* 
  -- * Buffer size for \ref nppiAverageError_32f_C2R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageErrorGetBufferHostSize_32f_C2R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19684
   pragma Import (C, nppiAverageErrorGetBufferHostSize_32f_C2R, "nppiAverageErrorGetBufferHostSize_32f_C2R");

  --* 
  -- * Buffer size for \ref nppiAverageError_32fc_C2R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageErrorGetBufferHostSize_32fc_C2R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19694
   pragma Import (C, nppiAverageErrorGetBufferHostSize_32fc_C2R, "nppiAverageErrorGetBufferHostSize_32fc_C2R");

  --* 
  -- * Buffer size for \ref nppiAverageError_64f_C2R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageErrorGetBufferHostSize_64f_C2R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19704
   pragma Import (C, nppiAverageErrorGetBufferHostSize_64f_C2R, "nppiAverageErrorGetBufferHostSize_64f_C2R");

  --* 
  -- * Buffer size for \ref nppiAverageError_8u_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageErrorGetBufferHostSize_8u_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19714
   pragma Import (C, nppiAverageErrorGetBufferHostSize_8u_C3R, "nppiAverageErrorGetBufferHostSize_8u_C3R");

  --* 
  -- * Buffer size for \ref nppiAverageError_8s_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageErrorGetBufferHostSize_8s_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19724
   pragma Import (C, nppiAverageErrorGetBufferHostSize_8s_C3R, "nppiAverageErrorGetBufferHostSize_8s_C3R");

  --* 
  -- * Buffer size for \ref nppiAverageError_16u_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageErrorGetBufferHostSize_16u_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19734
   pragma Import (C, nppiAverageErrorGetBufferHostSize_16u_C3R, "nppiAverageErrorGetBufferHostSize_16u_C3R");

  --* 
  -- * Buffer size for \ref nppiAverageError_16s_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageErrorGetBufferHostSize_16s_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19744
   pragma Import (C, nppiAverageErrorGetBufferHostSize_16s_C3R, "nppiAverageErrorGetBufferHostSize_16s_C3R");

  --* 
  -- * Buffer size for \ref nppiAverageError_16sc_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageErrorGetBufferHostSize_16sc_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19754
   pragma Import (C, nppiAverageErrorGetBufferHostSize_16sc_C3R, "nppiAverageErrorGetBufferHostSize_16sc_C3R");

  --* 
  -- * Buffer size for \ref nppiAverageError_32u_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageErrorGetBufferHostSize_32u_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19764
   pragma Import (C, nppiAverageErrorGetBufferHostSize_32u_C3R, "nppiAverageErrorGetBufferHostSize_32u_C3R");

  --* 
  -- * Buffer size for \ref nppiAverageError_32s_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageErrorGetBufferHostSize_32s_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19774
   pragma Import (C, nppiAverageErrorGetBufferHostSize_32s_C3R, "nppiAverageErrorGetBufferHostSize_32s_C3R");

  --* 
  -- * Buffer size for \ref nppiAverageError_32sc_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageErrorGetBufferHostSize_32sc_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19784
   pragma Import (C, nppiAverageErrorGetBufferHostSize_32sc_C3R, "nppiAverageErrorGetBufferHostSize_32sc_C3R");

  --* 
  -- * Buffer size for \ref nppiAverageError_32f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageErrorGetBufferHostSize_32f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19794
   pragma Import (C, nppiAverageErrorGetBufferHostSize_32f_C3R, "nppiAverageErrorGetBufferHostSize_32f_C3R");

  --* 
  -- * Buffer size for \ref nppiAverageError_32fc_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageErrorGetBufferHostSize_32fc_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19804
   pragma Import (C, nppiAverageErrorGetBufferHostSize_32fc_C3R, "nppiAverageErrorGetBufferHostSize_32fc_C3R");

  --* 
  -- * Buffer size for \ref nppiAverageError_64f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageErrorGetBufferHostSize_64f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19814
   pragma Import (C, nppiAverageErrorGetBufferHostSize_64f_C3R, "nppiAverageErrorGetBufferHostSize_64f_C3R");

  --* 
  -- * Buffer size for \ref nppiAverageError_8u_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageErrorGetBufferHostSize_8u_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19824
   pragma Import (C, nppiAverageErrorGetBufferHostSize_8u_C4R, "nppiAverageErrorGetBufferHostSize_8u_C4R");

  --* 
  -- * Buffer size for \ref nppiAverageError_8s_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageErrorGetBufferHostSize_8s_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19834
   pragma Import (C, nppiAverageErrorGetBufferHostSize_8s_C4R, "nppiAverageErrorGetBufferHostSize_8s_C4R");

  --* 
  -- * Buffer size for \ref nppiAverageError_16u_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageErrorGetBufferHostSize_16u_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19844
   pragma Import (C, nppiAverageErrorGetBufferHostSize_16u_C4R, "nppiAverageErrorGetBufferHostSize_16u_C4R");

  --* 
  -- * Buffer size for \ref nppiAverageError_16s_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageErrorGetBufferHostSize_16s_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19854
   pragma Import (C, nppiAverageErrorGetBufferHostSize_16s_C4R, "nppiAverageErrorGetBufferHostSize_16s_C4R");

  --* 
  -- * Buffer size for \ref nppiAverageError_16sc_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageErrorGetBufferHostSize_16sc_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19864
   pragma Import (C, nppiAverageErrorGetBufferHostSize_16sc_C4R, "nppiAverageErrorGetBufferHostSize_16sc_C4R");

  --* 
  -- * Buffer size for \ref nppiAverageError_32u_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageErrorGetBufferHostSize_32u_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19874
   pragma Import (C, nppiAverageErrorGetBufferHostSize_32u_C4R, "nppiAverageErrorGetBufferHostSize_32u_C4R");

  --* 
  -- * Buffer size for \ref nppiAverageError_32s_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageErrorGetBufferHostSize_32s_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19884
   pragma Import (C, nppiAverageErrorGetBufferHostSize_32s_C4R, "nppiAverageErrorGetBufferHostSize_32s_C4R");

  --* 
  -- * Buffer size for \ref nppiAverageError_32sc_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageErrorGetBufferHostSize_32sc_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19894
   pragma Import (C, nppiAverageErrorGetBufferHostSize_32sc_C4R, "nppiAverageErrorGetBufferHostSize_32sc_C4R");

  --* 
  -- * Buffer size for \ref nppiAverageError_32f_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageErrorGetBufferHostSize_32f_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19904
   pragma Import (C, nppiAverageErrorGetBufferHostSize_32f_C4R, "nppiAverageErrorGetBufferHostSize_32f_C4R");

  --* 
  -- * Buffer size for \ref nppiAverageError_32fc_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageErrorGetBufferHostSize_32fc_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19914
   pragma Import (C, nppiAverageErrorGetBufferHostSize_32fc_C4R, "nppiAverageErrorGetBufferHostSize_32fc_C4R");

  --* 
  -- * Buffer size for \ref nppiAverageError_64f_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageErrorGetBufferHostSize_64f_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19924
   pragma Import (C, nppiAverageErrorGetBufferHostSize_64f_C4R, "nppiAverageErrorGetBufferHostSize_64f_C4R");

  --* @}  
  --* @defgroup image_maximum_relative_error MaximumRelativeError
  -- * Primitives for computing the maximum relative error between two images.
  -- * Given two images \f$pSrc1\f$ and \f$pSrc2\f$ both with width \f$W\f$ and height \f$H\f$, 
  -- * the maximum relative error is defined as:
  -- * \f[MaximumRelativeError = max{\frac{\left|pSrc1(j,i) - pSrc2(j,i)\right|}{max(\left|pSrc1(j,i)\right|, \left|pSrc2(j,i)\right|)}}\f]
  -- * If the image is in complex format, the absolute value is used for computation.
  -- * For multiple channles, the maximum relative error of all the channles is returned.
  -- * @{
  --  

  --*
  -- * One-channel 8-bit unsigned image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumRelativeErrorGetBufferHostSize_8u_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumRelativeError_8u_C1R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19949
   pragma Import (C, nppiMaximumRelativeError_8u_C1R, "nppiMaximumRelativeError_8u_C1R");

  --*
  -- * One-channel 8-bit signed image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumRelativeErrorGetBufferHostSize_8u_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumRelativeError_8s_C1R
     (pSrc1 : access nppdefs_h.Npp8s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19966
   pragma Import (C, nppiMaximumRelativeError_8s_C1R, "nppiMaximumRelativeError_8s_C1R");

  --*
  -- * One-channel 16-bit unsigned image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumRelativeErrorGetBufferHostSize_16u_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumRelativeError_16u_C1R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:19983
   pragma Import (C, nppiMaximumRelativeError_16u_C1R, "nppiMaximumRelativeError_16u_C1R");

  --*
  -- * One-channel 16-bit signed image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumRelativeErrorGetBufferHostSize_16s_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumRelativeError_16s_C1R
     (pSrc1 : access nppdefs_h.Npp16s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20000
   pragma Import (C, nppiMaximumRelativeError_16s_C1R, "nppiMaximumRelativeError_16s_C1R");

  --*
  -- * One-channel 16-bit signed complex image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumRelativeErrorGetBufferHostSize_16s_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumRelativeError_16sc_C1R
     (pSrc1 : access constant nppdefs_h.Npp16sc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp16sc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20017
   pragma Import (C, nppiMaximumRelativeError_16sc_C1R, "nppiMaximumRelativeError_16sc_C1R");

  --*
  -- * One-channel 32-bit unsigned image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumRelativeErrorGetBufferHostSize_16u_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumRelativeError_32u_C1R
     (pSrc1 : access nppdefs_h.Npp32u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20034
   pragma Import (C, nppiMaximumRelativeError_32u_C1R, "nppiMaximumRelativeError_32u_C1R");

  --*
  -- * One-channel 32-bit signed image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumRelativeErrorGetBufferHostSize_16s_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumRelativeError_32s_C1R
     (pSrc1 : access nppdefs_h.Npp32s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20051
   pragma Import (C, nppiMaximumRelativeError_32s_C1R, "nppiMaximumRelativeError_32s_C1R");

  --*
  -- * One-channel 32-bit signed complex image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumRelativeErrorGetBufferHostSize_16s_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumRelativeError_32sc_C1R
     (pSrc1 : access constant nppdefs_h.Npp32sc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp32sc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20068
   pragma Import (C, nppiMaximumRelativeError_32sc_C1R, "nppiMaximumRelativeError_32sc_C1R");

  --*
  -- * One-channel 32-bit floating point image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumRelativeErrorGetBufferHostSize_32f_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiMaximumRelativeError_32f_C1R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20086
   pragma Import (C, nppiMaximumRelativeError_32f_C1R, "nppiMaximumRelativeError_32f_C1R");

  --*
  -- * One-channel 32-bit floating point complex image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumRelativeErrorGetBufferHostSize_32f_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiMaximumRelativeError_32fc_C1R
     (pSrc1 : access constant nppdefs_h.Npp32fc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp32fc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20104
   pragma Import (C, nppiMaximumRelativeError_32fc_C1R, "nppiMaximumRelativeError_32fc_C1R");

  --*
  -- * One-channel 64-bit floating point image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumRelativeErrorGetBufferHostSize_32f_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiMaximumRelativeError_64f_C1R
     (pSrc1 : access nppdefs_h.Npp64f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp64f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20122
   pragma Import (C, nppiMaximumRelativeError_64f_C1R, "nppiMaximumRelativeError_64f_C1R");

  --*
  -- * Two-channel 8-bit unsigned image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumRelativeErrorGetBufferHostSize_8u_C2R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumRelativeError_8u_C2R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20139
   pragma Import (C, nppiMaximumRelativeError_8u_C2R, "nppiMaximumRelativeError_8u_C2R");

  --*
  -- * Two-channel 8-bit signed image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumRelativeErrorGetBufferHostSize_8u_C2R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumRelativeError_8s_C2R
     (pSrc1 : access nppdefs_h.Npp8s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20156
   pragma Import (C, nppiMaximumRelativeError_8s_C2R, "nppiMaximumRelativeError_8s_C2R");

  --*
  -- * Two-channel 16-bit unsigned image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumRelativeErrorGetBufferHostSize_16u_C2R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumRelativeError_16u_C2R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20173
   pragma Import (C, nppiMaximumRelativeError_16u_C2R, "nppiMaximumRelativeError_16u_C2R");

  --*
  -- * Two-channel 16-bit signed image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumRelativeErrorGetBufferHostSize_16s_C2R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumRelativeError_16s_C2R
     (pSrc1 : access nppdefs_h.Npp16s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20190
   pragma Import (C, nppiMaximumRelativeError_16s_C2R, "nppiMaximumRelativeError_16s_C2R");

  --*
  -- * Two-channel 16-bit signed complex image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumRelativeErrorGetBufferHostSize_16s_C2R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumRelativeError_16sc_C2R
     (pSrc1 : access constant nppdefs_h.Npp16sc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp16sc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20207
   pragma Import (C, nppiMaximumRelativeError_16sc_C2R, "nppiMaximumRelativeError_16sc_C2R");

  --*
  -- * Two-channel 32-bit unsigned image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumRelativeErrorGetBufferHostSize_16u_C2R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumRelativeError_32u_C2R
     (pSrc1 : access nppdefs_h.Npp32u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20224
   pragma Import (C, nppiMaximumRelativeError_32u_C2R, "nppiMaximumRelativeError_32u_C2R");

  --*
  -- * Two-channel 32-bit signed image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumRelativeErrorGetBufferHostSize_16s_C2R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumRelativeError_32s_C2R
     (pSrc1 : access nppdefs_h.Npp32s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20241
   pragma Import (C, nppiMaximumRelativeError_32s_C2R, "nppiMaximumRelativeError_32s_C2R");

  --*
  -- * Two-channel 32-bit signed complex image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumRelativeErrorGetBufferHostSize_16s_C2R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumRelativeError_32sc_C2R
     (pSrc1 : access constant nppdefs_h.Npp32sc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp32sc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20258
   pragma Import (C, nppiMaximumRelativeError_32sc_C2R, "nppiMaximumRelativeError_32sc_C2R");

  --*
  -- * Two-channel 32-bit floating point image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumRelativeErrorGetBufferHostSize_32f_C2R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiMaximumRelativeError_32f_C2R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20276
   pragma Import (C, nppiMaximumRelativeError_32f_C2R, "nppiMaximumRelativeError_32f_C2R");

  --*
  -- * Two-channel 32-bit floating point complex image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumRelativeErrorGetBufferHostSize_32f_C2R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiMaximumRelativeError_32fc_C2R
     (pSrc1 : access constant nppdefs_h.Npp32fc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp32fc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20294
   pragma Import (C, nppiMaximumRelativeError_32fc_C2R, "nppiMaximumRelativeError_32fc_C2R");

  --*
  -- * Two-channel 64-bit floating point image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumRelativeErrorGetBufferHostSize_32f_C2R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiMaximumRelativeError_64f_C2R
     (pSrc1 : access nppdefs_h.Npp64f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp64f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20312
   pragma Import (C, nppiMaximumRelativeError_64f_C2R, "nppiMaximumRelativeError_64f_C2R");

  --*
  -- * Three-channel 8-bit unsigned image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumRelativeErrorGetBufferHostSize_8u_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumRelativeError_8u_C3R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20329
   pragma Import (C, nppiMaximumRelativeError_8u_C3R, "nppiMaximumRelativeError_8u_C3R");

  --*
  -- * Three-channel 8-bit signed image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumRelativeErrorGetBufferHostSize_8u_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumRelativeError_8s_C3R
     (pSrc1 : access nppdefs_h.Npp8s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20346
   pragma Import (C, nppiMaximumRelativeError_8s_C3R, "nppiMaximumRelativeError_8s_C3R");

  --*
  -- * Three-channel 16-bit unsigned image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumRelativeErrorGetBufferHostSize_16u_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumRelativeError_16u_C3R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20363
   pragma Import (C, nppiMaximumRelativeError_16u_C3R, "nppiMaximumRelativeError_16u_C3R");

  --*
  -- * Three-channel 16-bit signed image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumRelativeErrorGetBufferHostSize_16s_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumRelativeError_16s_C3R
     (pSrc1 : access nppdefs_h.Npp16s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20380
   pragma Import (C, nppiMaximumRelativeError_16s_C3R, "nppiMaximumRelativeError_16s_C3R");

  --*
  -- * Three-channel 16-bit signed complex image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumRelativeErrorGetBufferHostSize_16s_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumRelativeError_16sc_C3R
     (pSrc1 : access constant nppdefs_h.Npp16sc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp16sc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20397
   pragma Import (C, nppiMaximumRelativeError_16sc_C3R, "nppiMaximumRelativeError_16sc_C3R");

  --*
  -- * Three-channel 32-bit unsigned image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumRelativeErrorGetBufferHostSize_16u_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumRelativeError_32u_C3R
     (pSrc1 : access nppdefs_h.Npp32u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20414
   pragma Import (C, nppiMaximumRelativeError_32u_C3R, "nppiMaximumRelativeError_32u_C3R");

  --*
  -- * Three-channel 32-bit signed image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumRelativeErrorGetBufferHostSize_16s_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumRelativeError_32s_C3R
     (pSrc1 : access nppdefs_h.Npp32s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20431
   pragma Import (C, nppiMaximumRelativeError_32s_C3R, "nppiMaximumRelativeError_32s_C3R");

  --*
  -- * Three-channel 32-bit signed complex image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumRelativeErrorGetBufferHostSize_16s_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumRelativeError_32sc_C3R
     (pSrc1 : access constant nppdefs_h.Npp32sc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp32sc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20448
   pragma Import (C, nppiMaximumRelativeError_32sc_C3R, "nppiMaximumRelativeError_32sc_C3R");

  --*
  -- * Three-channel 32-bit floating point image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumRelativeErrorGetBufferHostSize_32f_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiMaximumRelativeError_32f_C3R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20466
   pragma Import (C, nppiMaximumRelativeError_32f_C3R, "nppiMaximumRelativeError_32f_C3R");

  --*
  -- * Three-channel 32-bit floating point complex image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumRelativeErrorGetBufferHostSize_32f_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiMaximumRelativeError_32fc_C3R
     (pSrc1 : access constant nppdefs_h.Npp32fc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp32fc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20484
   pragma Import (C, nppiMaximumRelativeError_32fc_C3R, "nppiMaximumRelativeError_32fc_C3R");

  --*
  -- * Three-channel 64-bit floating point image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumRelativeErrorGetBufferHostSize_32f_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiMaximumRelativeError_64f_C3R
     (pSrc1 : access nppdefs_h.Npp64f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp64f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20502
   pragma Import (C, nppiMaximumRelativeError_64f_C3R, "nppiMaximumRelativeError_64f_C3R");

  --*
  -- * Four-channel 8-bit unsigned image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumRelativeErrorGetBufferHostSize_8u_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumRelativeError_8u_C4R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20519
   pragma Import (C, nppiMaximumRelativeError_8u_C4R, "nppiMaximumRelativeError_8u_C4R");

  --*
  -- * Four-channel 8-bit signed image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumRelativeErrorGetBufferHostSize_8u_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumRelativeError_8s_C4R
     (pSrc1 : access nppdefs_h.Npp8s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20536
   pragma Import (C, nppiMaximumRelativeError_8s_C4R, "nppiMaximumRelativeError_8s_C4R");

  --*
  -- * Four-channel 16-bit unsigned image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumRelativeErrorGetBufferHostSize_16u_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumRelativeError_16u_C4R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20553
   pragma Import (C, nppiMaximumRelativeError_16u_C4R, "nppiMaximumRelativeError_16u_C4R");

  --*
  -- * Four-channel 16-bit signed image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumRelativeErrorGetBufferHostSize_16s_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumRelativeError_16s_C4R
     (pSrc1 : access nppdefs_h.Npp16s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20570
   pragma Import (C, nppiMaximumRelativeError_16s_C4R, "nppiMaximumRelativeError_16s_C4R");

  --*
  -- * Four-channel 16-bit signed complex image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumRelativeErrorGetBufferHostSize_16s_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumRelativeError_16sc_C4R
     (pSrc1 : access constant nppdefs_h.Npp16sc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp16sc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20587
   pragma Import (C, nppiMaximumRelativeError_16sc_C4R, "nppiMaximumRelativeError_16sc_C4R");

  --*
  -- * Four-channel 32-bit unsigned image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumRelativeErrorGetBufferHostSize_16u_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumRelativeError_32u_C4R
     (pSrc1 : access nppdefs_h.Npp32u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20604
   pragma Import (C, nppiMaximumRelativeError_32u_C4R, "nppiMaximumRelativeError_32u_C4R");

  --*
  -- * Four-channel 32-bit signed image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumRelativeErrorGetBufferHostSize_16s_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumRelativeError_32s_C4R
     (pSrc1 : access nppdefs_h.Npp32s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20621
   pragma Import (C, nppiMaximumRelativeError_32s_C4R, "nppiMaximumRelativeError_32s_C4R");

  --*
  -- * Four-channel 32-bit signed complex image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumRelativeErrorGetBufferHostSize_16s_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiMaximumRelativeError_32sc_C4R
     (pSrc1 : access constant nppdefs_h.Npp32sc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp32sc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20638
   pragma Import (C, nppiMaximumRelativeError_32sc_C4R, "nppiMaximumRelativeError_32sc_C4R");

  --*
  -- * Four-channel 32-bit floating point image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumRelativeErrorGetBufferHostSize_32f_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiMaximumRelativeError_32f_C4R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20656
   pragma Import (C, nppiMaximumRelativeError_32f_C4R, "nppiMaximumRelativeError_32f_C4R");

  --*
  -- * Four-channel 32-bit floating point complex image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumRelativeErrorGetBufferHostSize_32f_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiMaximumRelativeError_32fc_C4R
     (pSrc1 : access constant nppdefs_h.Npp32fc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp32fc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20674
   pragma Import (C, nppiMaximumRelativeError_32fc_C4R, "nppiMaximumRelativeError_32fc_C4R");

  --*
  -- * Four-channel 64-bit floating point image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiMaximumRelativeErrorGetBufferHostSize_32f_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiMaximumRelativeError_64f_C4R
     (pSrc1 : access nppdefs_h.Npp64f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp64f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20692
   pragma Import (C, nppiMaximumRelativeError_64f_C4R, "nppiMaximumRelativeError_64f_C4R");

  --* @}  
  --* @name NormDiffInfGetBufferHostSize
  -- * Companion primitives for computing the device buffer size (in bytes) required by the NormDiff_Inf primitives.
  -- * @{
  --  

  --* 
  -- * Buffer size for \ref nppiMaximumRelativeError_8u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumRelativeErrorGetBufferHostSize_8u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20710
   pragma Import (C, nppiMaximumRelativeErrorGetBufferHostSize_8u_C1R, "nppiMaximumRelativeErrorGetBufferHostSize_8u_C1R");

  --* 
  -- * Buffer size for \ref nppiMaximumRelativeError_8s_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumRelativeErrorGetBufferHostSize_8s_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20720
   pragma Import (C, nppiMaximumRelativeErrorGetBufferHostSize_8s_C1R, "nppiMaximumRelativeErrorGetBufferHostSize_8s_C1R");

  --* 
  -- * Buffer size for \ref nppiMaximumRelativeError_16u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumRelativeErrorGetBufferHostSize_16u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20730
   pragma Import (C, nppiMaximumRelativeErrorGetBufferHostSize_16u_C1R, "nppiMaximumRelativeErrorGetBufferHostSize_16u_C1R");

  --* 
  -- * Buffer size for \ref nppiMaximumRelativeError_16s_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumRelativeErrorGetBufferHostSize_16s_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20740
   pragma Import (C, nppiMaximumRelativeErrorGetBufferHostSize_16s_C1R, "nppiMaximumRelativeErrorGetBufferHostSize_16s_C1R");

  --* 
  -- * Buffer size for \ref nppiMaximumRelativeError_16sc_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumRelativeErrorGetBufferHostSize_16sc_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20750
   pragma Import (C, nppiMaximumRelativeErrorGetBufferHostSize_16sc_C1R, "nppiMaximumRelativeErrorGetBufferHostSize_16sc_C1R");

  --* 
  -- * Buffer size for \ref nppiMaximumRelativeError_32u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumRelativeErrorGetBufferHostSize_32u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20760
   pragma Import (C, nppiMaximumRelativeErrorGetBufferHostSize_32u_C1R, "nppiMaximumRelativeErrorGetBufferHostSize_32u_C1R");

  --* 
  -- * Buffer size for \ref nppiMaximumRelativeError_32s_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumRelativeErrorGetBufferHostSize_32s_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20770
   pragma Import (C, nppiMaximumRelativeErrorGetBufferHostSize_32s_C1R, "nppiMaximumRelativeErrorGetBufferHostSize_32s_C1R");

  --* 
  -- * Buffer size for \ref nppiMaximumRelativeError_32sc_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumRelativeErrorGetBufferHostSize_32sc_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20780
   pragma Import (C, nppiMaximumRelativeErrorGetBufferHostSize_32sc_C1R, "nppiMaximumRelativeErrorGetBufferHostSize_32sc_C1R");

  --* 
  -- * Buffer size for \ref nppiMaximumRelativeError_32f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumRelativeErrorGetBufferHostSize_32f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20790
   pragma Import (C, nppiMaximumRelativeErrorGetBufferHostSize_32f_C1R, "nppiMaximumRelativeErrorGetBufferHostSize_32f_C1R");

  --* 
  -- * Buffer size for \ref nppiMaximumRelativeError_32fc_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumRelativeErrorGetBufferHostSize_32fc_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20800
   pragma Import (C, nppiMaximumRelativeErrorGetBufferHostSize_32fc_C1R, "nppiMaximumRelativeErrorGetBufferHostSize_32fc_C1R");

  --* 
  -- * Buffer size for \ref nppiMaximumRelativeError_64f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumRelativeErrorGetBufferHostSize_64f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20810
   pragma Import (C, nppiMaximumRelativeErrorGetBufferHostSize_64f_C1R, "nppiMaximumRelativeErrorGetBufferHostSize_64f_C1R");

  --* 
  -- * Buffer size for \ref nppiMaximumRelativeError_8u_C2R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumRelativeErrorGetBufferHostSize_8u_C2R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20820
   pragma Import (C, nppiMaximumRelativeErrorGetBufferHostSize_8u_C2R, "nppiMaximumRelativeErrorGetBufferHostSize_8u_C2R");

  --* 
  -- * Buffer size for \ref nppiMaximumRelativeError_8s_C2R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumRelativeErrorGetBufferHostSize_8s_C2R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20830
   pragma Import (C, nppiMaximumRelativeErrorGetBufferHostSize_8s_C2R, "nppiMaximumRelativeErrorGetBufferHostSize_8s_C2R");

  --* 
  -- * Buffer size for \ref nppiMaximumRelativeError_16u_C2R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumRelativeErrorGetBufferHostSize_16u_C2R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20840
   pragma Import (C, nppiMaximumRelativeErrorGetBufferHostSize_16u_C2R, "nppiMaximumRelativeErrorGetBufferHostSize_16u_C2R");

  --* 
  -- * Buffer size for \ref nppiMaximumRelativeError_16s_C2R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumRelativeErrorGetBufferHostSize_16s_C2R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20850
   pragma Import (C, nppiMaximumRelativeErrorGetBufferHostSize_16s_C2R, "nppiMaximumRelativeErrorGetBufferHostSize_16s_C2R");

  --* 
  -- * Buffer size for \ref nppiMaximumRelativeError_16sc_C2R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumRelativeErrorGetBufferHostSize_16sc_C2R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20860
   pragma Import (C, nppiMaximumRelativeErrorGetBufferHostSize_16sc_C2R, "nppiMaximumRelativeErrorGetBufferHostSize_16sc_C2R");

  --* 
  -- * Buffer size for \ref nppiMaximumRelativeError_32u_C2R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumRelativeErrorGetBufferHostSize_32u_C2R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20870
   pragma Import (C, nppiMaximumRelativeErrorGetBufferHostSize_32u_C2R, "nppiMaximumRelativeErrorGetBufferHostSize_32u_C2R");

  --* 
  -- * Buffer size for \ref nppiMaximumRelativeError_32s_C2R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumRelativeErrorGetBufferHostSize_32s_C2R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20880
   pragma Import (C, nppiMaximumRelativeErrorGetBufferHostSize_32s_C2R, "nppiMaximumRelativeErrorGetBufferHostSize_32s_C2R");

  --* 
  -- * Buffer size for \ref nppiMaximumRelativeError_32sc_C2R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumRelativeErrorGetBufferHostSize_32sc_C2R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20890
   pragma Import (C, nppiMaximumRelativeErrorGetBufferHostSize_32sc_C2R, "nppiMaximumRelativeErrorGetBufferHostSize_32sc_C2R");

  --* 
  -- * Buffer size for \ref nppiMaximumRelativeError_32f_C2R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumRelativeErrorGetBufferHostSize_32f_C2R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20900
   pragma Import (C, nppiMaximumRelativeErrorGetBufferHostSize_32f_C2R, "nppiMaximumRelativeErrorGetBufferHostSize_32f_C2R");

  --* 
  -- * Buffer size for \ref nppiMaximumRelativeError_32fc_C2R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumRelativeErrorGetBufferHostSize_32fc_C2R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20910
   pragma Import (C, nppiMaximumRelativeErrorGetBufferHostSize_32fc_C2R, "nppiMaximumRelativeErrorGetBufferHostSize_32fc_C2R");

  --* 
  -- * Buffer size for \ref nppiMaximumRelativeError_64f_C2R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumRelativeErrorGetBufferHostSize_64f_C2R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20920
   pragma Import (C, nppiMaximumRelativeErrorGetBufferHostSize_64f_C2R, "nppiMaximumRelativeErrorGetBufferHostSize_64f_C2R");

  --* 
  -- * Buffer size for \ref nppiMaximumRelativeError_8u_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumRelativeErrorGetBufferHostSize_8u_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20930
   pragma Import (C, nppiMaximumRelativeErrorGetBufferHostSize_8u_C3R, "nppiMaximumRelativeErrorGetBufferHostSize_8u_C3R");

  --* 
  -- * Buffer size for \ref nppiMaximumRelativeError_8s_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumRelativeErrorGetBufferHostSize_8s_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20940
   pragma Import (C, nppiMaximumRelativeErrorGetBufferHostSize_8s_C3R, "nppiMaximumRelativeErrorGetBufferHostSize_8s_C3R");

  --* 
  -- * Buffer size for \ref nppiMaximumRelativeError_16u_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumRelativeErrorGetBufferHostSize_16u_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20950
   pragma Import (C, nppiMaximumRelativeErrorGetBufferHostSize_16u_C3R, "nppiMaximumRelativeErrorGetBufferHostSize_16u_C3R");

  --* 
  -- * Buffer size for \ref nppiMaximumRelativeError_16s_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumRelativeErrorGetBufferHostSize_16s_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20960
   pragma Import (C, nppiMaximumRelativeErrorGetBufferHostSize_16s_C3R, "nppiMaximumRelativeErrorGetBufferHostSize_16s_C3R");

  --* 
  -- * Buffer size for \ref nppiMaximumRelativeError_16sc_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumRelativeErrorGetBufferHostSize_16sc_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20970
   pragma Import (C, nppiMaximumRelativeErrorGetBufferHostSize_16sc_C3R, "nppiMaximumRelativeErrorGetBufferHostSize_16sc_C3R");

  --* 
  -- * Buffer size for \ref nppiMaximumRelativeError_32u_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumRelativeErrorGetBufferHostSize_32u_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20980
   pragma Import (C, nppiMaximumRelativeErrorGetBufferHostSize_32u_C3R, "nppiMaximumRelativeErrorGetBufferHostSize_32u_C3R");

  --* 
  -- * Buffer size for \ref nppiMaximumRelativeError_32s_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumRelativeErrorGetBufferHostSize_32s_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:20990
   pragma Import (C, nppiMaximumRelativeErrorGetBufferHostSize_32s_C3R, "nppiMaximumRelativeErrorGetBufferHostSize_32s_C3R");

  --* 
  -- * Buffer size for \ref nppiMaximumRelativeError_32sc_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumRelativeErrorGetBufferHostSize_32sc_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21000
   pragma Import (C, nppiMaximumRelativeErrorGetBufferHostSize_32sc_C3R, "nppiMaximumRelativeErrorGetBufferHostSize_32sc_C3R");

  --* 
  -- * Buffer size for \ref nppiMaximumRelativeError_32f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumRelativeErrorGetBufferHostSize_32f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21010
   pragma Import (C, nppiMaximumRelativeErrorGetBufferHostSize_32f_C3R, "nppiMaximumRelativeErrorGetBufferHostSize_32f_C3R");

  --* 
  -- * Buffer size for \ref nppiMaximumRelativeError_32fc_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumRelativeErrorGetBufferHostSize_32fc_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21020
   pragma Import (C, nppiMaximumRelativeErrorGetBufferHostSize_32fc_C3R, "nppiMaximumRelativeErrorGetBufferHostSize_32fc_C3R");

  --* 
  -- * Buffer size for \ref nppiMaximumRelativeError_64f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumRelativeErrorGetBufferHostSize_64f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21030
   pragma Import (C, nppiMaximumRelativeErrorGetBufferHostSize_64f_C3R, "nppiMaximumRelativeErrorGetBufferHostSize_64f_C3R");

  --* 
  -- * Buffer size for \ref nppiMaximumRelativeError_8u_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumRelativeErrorGetBufferHostSize_8u_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21040
   pragma Import (C, nppiMaximumRelativeErrorGetBufferHostSize_8u_C4R, "nppiMaximumRelativeErrorGetBufferHostSize_8u_C4R");

  --* 
  -- * Buffer size for \ref nppiMaximumRelativeError_8s_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumRelativeErrorGetBufferHostSize_8s_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21050
   pragma Import (C, nppiMaximumRelativeErrorGetBufferHostSize_8s_C4R, "nppiMaximumRelativeErrorGetBufferHostSize_8s_C4R");

  --* 
  -- * Buffer size for \ref nppiMaximumRelativeError_16u_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumRelativeErrorGetBufferHostSize_16u_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21060
   pragma Import (C, nppiMaximumRelativeErrorGetBufferHostSize_16u_C4R, "nppiMaximumRelativeErrorGetBufferHostSize_16u_C4R");

  --* 
  -- * Buffer size for \ref nppiMaximumRelativeError_16s_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumRelativeErrorGetBufferHostSize_16s_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21070
   pragma Import (C, nppiMaximumRelativeErrorGetBufferHostSize_16s_C4R, "nppiMaximumRelativeErrorGetBufferHostSize_16s_C4R");

  --* 
  -- * Buffer size for \ref nppiMaximumRelativeError_16sc_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumRelativeErrorGetBufferHostSize_16sc_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21080
   pragma Import (C, nppiMaximumRelativeErrorGetBufferHostSize_16sc_C4R, "nppiMaximumRelativeErrorGetBufferHostSize_16sc_C4R");

  --* 
  -- * Buffer size for \ref nppiMaximumRelativeError_32u_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumRelativeErrorGetBufferHostSize_32u_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21090
   pragma Import (C, nppiMaximumRelativeErrorGetBufferHostSize_32u_C4R, "nppiMaximumRelativeErrorGetBufferHostSize_32u_C4R");

  --* 
  -- * Buffer size for \ref nppiMaximumRelativeError_32s_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumRelativeErrorGetBufferHostSize_32s_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21100
   pragma Import (C, nppiMaximumRelativeErrorGetBufferHostSize_32s_C4R, "nppiMaximumRelativeErrorGetBufferHostSize_32s_C4R");

  --* 
  -- * Buffer size for \ref nppiMaximumRelativeError_32sc_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumRelativeErrorGetBufferHostSize_32sc_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21110
   pragma Import (C, nppiMaximumRelativeErrorGetBufferHostSize_32sc_C4R, "nppiMaximumRelativeErrorGetBufferHostSize_32sc_C4R");

  --* 
  -- * Buffer size for \ref nppiMaximumRelativeError_32f_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumRelativeErrorGetBufferHostSize_32f_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21120
   pragma Import (C, nppiMaximumRelativeErrorGetBufferHostSize_32f_C4R, "nppiMaximumRelativeErrorGetBufferHostSize_32f_C4R");

  --* 
  -- * Buffer size for \ref nppiMaximumRelativeError_32fc_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumRelativeErrorGetBufferHostSize_32fc_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21130
   pragma Import (C, nppiMaximumRelativeErrorGetBufferHostSize_32fc_C4R, "nppiMaximumRelativeErrorGetBufferHostSize_32fc_C4R");

  --* 
  -- * Buffer size for \ref nppiMaximumRelativeError_64f_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiMaximumRelativeErrorGetBufferHostSize_64f_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21140
   pragma Import (C, nppiMaximumRelativeErrorGetBufferHostSize_64f_C4R, "nppiMaximumRelativeErrorGetBufferHostSize_64f_C4R");

  --* @}  
  --* @defgroup image_average_relative_error AverageRelativeError
  -- * Primitives for computing the average relative error between two images.
  -- * Given two images \f$pSrc1\f$ and \f$pSrc2\f$ both with width \f$W\f$ and height \f$H\f$, 
  -- * the maximum relative error is defined as:
  -- * \f[AverageRelativeError = \frac{1}{W\cdot H\cdot N}\sum_{n=0}^{N-1}\sum_{j=0}^{H-1}\sum_{i=0}^{W-1}\frac{\left|pSrc1(j,i) - pSrc2(j,i)\right|}{max(\left|pSrc1(j,i)\right|, \left|pSrc2(j,i)\right|)}\f]
  -- * where N is the number of channels.
  -- * If the image is in complex format, the absolute value is used for computation.
  -- * @{
  --  

  --*
  -- * One-channel 8-bit unsigned image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageRelativeErrorGetBufferHostSize_8u_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageRelativeError_8u_C1R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21165
   pragma Import (C, nppiAverageRelativeError_8u_C1R, "nppiAverageRelativeError_8u_C1R");

  --*
  -- * One-channel 8-bit signed image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageRelativeErrorGetBufferHostSize_8u_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageRelativeError_8s_C1R
     (pSrc1 : access nppdefs_h.Npp8s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21182
   pragma Import (C, nppiAverageRelativeError_8s_C1R, "nppiAverageRelativeError_8s_C1R");

  --*
  -- * One-channel 16-bit unsigned image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageRelativeErrorGetBufferHostSize_16u_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageRelativeError_16u_C1R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21199
   pragma Import (C, nppiAverageRelativeError_16u_C1R, "nppiAverageRelativeError_16u_C1R");

  --*
  -- * One-channel 16-bit signed image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageRelativeErrorGetBufferHostSize_16s_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageRelativeError_16s_C1R
     (pSrc1 : access nppdefs_h.Npp16s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21216
   pragma Import (C, nppiAverageRelativeError_16s_C1R, "nppiAverageRelativeError_16s_C1R");

  --*
  -- * One-channel 16-bit signed complex image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageRelativeErrorGetBufferHostSize_16s_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageRelativeError_16sc_C1R
     (pSrc1 : access constant nppdefs_h.Npp16sc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp16sc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21233
   pragma Import (C, nppiAverageRelativeError_16sc_C1R, "nppiAverageRelativeError_16sc_C1R");

  --*
  -- * One-channel 32-bit unsigned image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageRelativeErrorGetBufferHostSize_16u_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageRelativeError_32u_C1R
     (pSrc1 : access nppdefs_h.Npp32u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21250
   pragma Import (C, nppiAverageRelativeError_32u_C1R, "nppiAverageRelativeError_32u_C1R");

  --*
  -- * One-channel 32-bit signed image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageRelativeErrorGetBufferHostSize_16s_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageRelativeError_32s_C1R
     (pSrc1 : access nppdefs_h.Npp32s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21267
   pragma Import (C, nppiAverageRelativeError_32s_C1R, "nppiAverageRelativeError_32s_C1R");

  --*
  -- * One-channel 32-bit signed complex image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageRelativeErrorGetBufferHostSize_16s_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageRelativeError_32sc_C1R
     (pSrc1 : access constant nppdefs_h.Npp32sc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp32sc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21284
   pragma Import (C, nppiAverageRelativeError_32sc_C1R, "nppiAverageRelativeError_32sc_C1R");

  --*
  -- * One-channel 32-bit floating point image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageRelativeErrorGetBufferHostSize_32f_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiAverageRelativeError_32f_C1R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21302
   pragma Import (C, nppiAverageRelativeError_32f_C1R, "nppiAverageRelativeError_32f_C1R");

  --*
  -- * One-channel 32-bit floating point complex image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageRelativeErrorGetBufferHostSize_32f_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiAverageRelativeError_32fc_C1R
     (pSrc1 : access constant nppdefs_h.Npp32fc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp32fc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21320
   pragma Import (C, nppiAverageRelativeError_32fc_C1R, "nppiAverageRelativeError_32fc_C1R");

  --*
  -- * One-channel 64-bit floating point image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageRelativeErrorGetBufferHostSize_32f_C1R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiAverageRelativeError_64f_C1R
     (pSrc1 : access nppdefs_h.Npp64f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp64f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21338
   pragma Import (C, nppiAverageRelativeError_64f_C1R, "nppiAverageRelativeError_64f_C1R");

  --*
  -- * Two-channel 8-bit unsigned image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageRelativeErrorGetBufferHostSize_8u_C2R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageRelativeError_8u_C2R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21355
   pragma Import (C, nppiAverageRelativeError_8u_C2R, "nppiAverageRelativeError_8u_C2R");

  --*
  -- * Two-channel 8-bit signed image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageRelativeErrorGetBufferHostSize_8u_C2R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageRelativeError_8s_C2R
     (pSrc1 : access nppdefs_h.Npp8s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21372
   pragma Import (C, nppiAverageRelativeError_8s_C2R, "nppiAverageRelativeError_8s_C2R");

  --*
  -- * Two-channel 16-bit unsigned image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageRelativeErrorGetBufferHostSize_16u_C2R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageRelativeError_16u_C2R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21389
   pragma Import (C, nppiAverageRelativeError_16u_C2R, "nppiAverageRelativeError_16u_C2R");

  --*
  -- * Two-channel 16-bit signed image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageRelativeErrorGetBufferHostSize_16s_C2R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageRelativeError_16s_C2R
     (pSrc1 : access nppdefs_h.Npp16s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21406
   pragma Import (C, nppiAverageRelativeError_16s_C2R, "nppiAverageRelativeError_16s_C2R");

  --*
  -- * Two-channel 16-bit signed complex image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageRelativeErrorGetBufferHostSize_16s_C2R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageRelativeError_16sc_C2R
     (pSrc1 : access constant nppdefs_h.Npp16sc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp16sc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21423
   pragma Import (C, nppiAverageRelativeError_16sc_C2R, "nppiAverageRelativeError_16sc_C2R");

  --*
  -- * Two-channel 32-bit unsigned image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageRelativeErrorGetBufferHostSize_16u_C2R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageRelativeError_32u_C2R
     (pSrc1 : access nppdefs_h.Npp32u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21440
   pragma Import (C, nppiAverageRelativeError_32u_C2R, "nppiAverageRelativeError_32u_C2R");

  --*
  -- * Two-channel 32-bit signed image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageRelativeErrorGetBufferHostSize_16s_C2R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageRelativeError_32s_C2R
     (pSrc1 : access nppdefs_h.Npp32s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21457
   pragma Import (C, nppiAverageRelativeError_32s_C2R, "nppiAverageRelativeError_32s_C2R");

  --*
  -- * Two-channel 32-bit signed complex image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageRelativeErrorGetBufferHostSize_16s_C2R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageRelativeError_32sc_C2R
     (pSrc1 : access constant nppdefs_h.Npp32sc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp32sc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21474
   pragma Import (C, nppiAverageRelativeError_32sc_C2R, "nppiAverageRelativeError_32sc_C2R");

  --*
  -- * Two-channel 32-bit floating point image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageRelativeErrorGetBufferHostSize_32f_C2R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiAverageRelativeError_32f_C2R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21492
   pragma Import (C, nppiAverageRelativeError_32f_C2R, "nppiAverageRelativeError_32f_C2R");

  --*
  -- * Two-channel 32-bit floating point complex image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageRelativeErrorGetBufferHostSize_32f_C2R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiAverageRelativeError_32fc_C2R
     (pSrc1 : access constant nppdefs_h.Npp32fc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp32fc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21510
   pragma Import (C, nppiAverageRelativeError_32fc_C2R, "nppiAverageRelativeError_32fc_C2R");

  --*
  -- * Two-channel 64-bit floating point image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageRelativeErrorGetBufferHostSize_32f_C2R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiAverageRelativeError_64f_C2R
     (pSrc1 : access nppdefs_h.Npp64f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp64f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21528
   pragma Import (C, nppiAverageRelativeError_64f_C2R, "nppiAverageRelativeError_64f_C2R");

  --*
  -- * Three-channel 8-bit unsigned image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageRelativeErrorGetBufferHostSize_8u_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageRelativeError_8u_C3R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21545
   pragma Import (C, nppiAverageRelativeError_8u_C3R, "nppiAverageRelativeError_8u_C3R");

  --*
  -- * Three-channel 8-bit signed image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageRelativeErrorGetBufferHostSize_8u_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageRelativeError_8s_C3R
     (pSrc1 : access nppdefs_h.Npp8s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21562
   pragma Import (C, nppiAverageRelativeError_8s_C3R, "nppiAverageRelativeError_8s_C3R");

  --*
  -- * Three-channel 16-bit unsigned image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageRelativeErrorGetBufferHostSize_16u_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageRelativeError_16u_C3R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21579
   pragma Import (C, nppiAverageRelativeError_16u_C3R, "nppiAverageRelativeError_16u_C3R");

  --*
  -- * Three-channel 16-bit signed image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageRelativeErrorGetBufferHostSize_16s_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageRelativeError_16s_C3R
     (pSrc1 : access nppdefs_h.Npp16s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21596
   pragma Import (C, nppiAverageRelativeError_16s_C3R, "nppiAverageRelativeError_16s_C3R");

  --*
  -- * Three-channel 16-bit signed complex image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageRelativeErrorGetBufferHostSize_16s_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageRelativeError_16sc_C3R
     (pSrc1 : access constant nppdefs_h.Npp16sc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp16sc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21613
   pragma Import (C, nppiAverageRelativeError_16sc_C3R, "nppiAverageRelativeError_16sc_C3R");

  --*
  -- * Three-channel 32-bit unsigned image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageRelativeErrorGetBufferHostSize_16u_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageRelativeError_32u_C3R
     (pSrc1 : access nppdefs_h.Npp32u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21630
   pragma Import (C, nppiAverageRelativeError_32u_C3R, "nppiAverageRelativeError_32u_C3R");

  --*
  -- * Three-channel 32-bit signed image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageRelativeErrorGetBufferHostSize_16s_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageRelativeError_32s_C3R
     (pSrc1 : access nppdefs_h.Npp32s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21647
   pragma Import (C, nppiAverageRelativeError_32s_C3R, "nppiAverageRelativeError_32s_C3R");

  --*
  -- * Three-channel 32-bit signed complex image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageRelativeErrorGetBufferHostSize_16s_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageRelativeError_32sc_C3R
     (pSrc1 : access constant nppdefs_h.Npp32sc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp32sc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21664
   pragma Import (C, nppiAverageRelativeError_32sc_C3R, "nppiAverageRelativeError_32sc_C3R");

  --*
  -- * Three-channel 32-bit floating point image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageRelativeErrorGetBufferHostSize_32f_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiAverageRelativeError_32f_C3R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21682
   pragma Import (C, nppiAverageRelativeError_32f_C3R, "nppiAverageRelativeError_32f_C3R");

  --*
  -- * Three-channel 32-bit floating point complex image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageRelativeErrorGetBufferHostSize_32f_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiAverageRelativeError_32fc_C3R
     (pSrc1 : access constant nppdefs_h.Npp32fc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp32fc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21700
   pragma Import (C, nppiAverageRelativeError_32fc_C3R, "nppiAverageRelativeError_32fc_C3R");

  --*
  -- * Three-channel 64-bit floating point image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageRelativeErrorGetBufferHostSize_32f_C3R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiAverageRelativeError_64f_C3R
     (pSrc1 : access nppdefs_h.Npp64f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp64f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21718
   pragma Import (C, nppiAverageRelativeError_64f_C3R, "nppiAverageRelativeError_64f_C3R");

  --*
  -- * Four-channel 8-bit unsigned image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageRelativeErrorGetBufferHostSize_8u_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageRelativeError_8u_C4R
     (pSrc1 : access nppdefs_h.Npp8u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21735
   pragma Import (C, nppiAverageRelativeError_8u_C4R, "nppiAverageRelativeError_8u_C4R");

  --*
  -- * Four-channel 8-bit signed image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageRelativeErrorGetBufferHostSize_8u_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageRelativeError_8s_C4R
     (pSrc1 : access nppdefs_h.Npp8s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp8s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21752
   pragma Import (C, nppiAverageRelativeError_8s_C4R, "nppiAverageRelativeError_8s_C4R");

  --*
  -- * Four-channel 16-bit unsigned image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageRelativeErrorGetBufferHostSize_16u_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageRelativeError_16u_C4R
     (pSrc1 : access nppdefs_h.Npp16u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21769
   pragma Import (C, nppiAverageRelativeError_16u_C4R, "nppiAverageRelativeError_16u_C4R");

  --*
  -- * Four-channel 16-bit signed image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageRelativeErrorGetBufferHostSize_16s_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageRelativeError_16s_C4R
     (pSrc1 : access nppdefs_h.Npp16s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp16s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21786
   pragma Import (C, nppiAverageRelativeError_16s_C4R, "nppiAverageRelativeError_16s_C4R");

  --*
  -- * Four-channel 16-bit signed complex image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageRelativeErrorGetBufferHostSize_16s_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageRelativeError_16sc_C4R
     (pSrc1 : access constant nppdefs_h.Npp16sc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp16sc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21803
   pragma Import (C, nppiAverageRelativeError_16sc_C4R, "nppiAverageRelativeError_16sc_C4R");

  --*
  -- * Four-channel 32-bit unsigned image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageRelativeErrorGetBufferHostSize_16u_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageRelativeError_32u_C4R
     (pSrc1 : access nppdefs_h.Npp32u;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32u;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21820
   pragma Import (C, nppiAverageRelativeError_32u_C4R, "nppiAverageRelativeError_32u_C4R");

  --*
  -- * Four-channel 32-bit signed image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageRelativeErrorGetBufferHostSize_16s_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageRelativeError_32s_C4R
     (pSrc1 : access nppdefs_h.Npp32s;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32s;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21837
   pragma Import (C, nppiAverageRelativeError_32s_C4R, "nppiAverageRelativeError_32s_C4R");

  --*
  -- * Four-channel 32-bit signed complex image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageRelativeErrorGetBufferHostSize_16s_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes.
  -- 

   function nppiAverageRelativeError_32sc_C4R
     (pSrc1 : access constant nppdefs_h.Npp32sc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp32sc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21854
   pragma Import (C, nppiAverageRelativeError_32sc_C4R, "nppiAverageRelativeError_32sc_C4R");

  --*
  -- * Four-channel 32-bit floating point image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageRelativeErrorGetBufferHostSize_32f_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiAverageRelativeError_32f_C4R
     (pSrc1 : access nppdefs_h.Npp32f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp32f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21872
   pragma Import (C, nppiAverageRelativeError_32f_C4R, "nppiAverageRelativeError_32f_C4R");

  --*
  -- * Four-channel 32-bit floating point complex image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error (absolute value). 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageRelativeErrorGetBufferHostSize_32f_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiAverageRelativeError_32fc_C4R
     (pSrc1 : access constant nppdefs_h.Npp32fc;
      nSrc1Step : int;
      pSrc2 : access constant nppdefs_h.Npp32fc;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21890
   pragma Import (C, nppiAverageRelativeError_32fc_C4R, "nppiAverageRelativeError_32fc_C4R");

  --*
  -- * Four-channel 64-bit floating point image MaximumRelative_Error.
  -- *
  -- * \param pSrc1 \ref source_image_pointer.
  -- * \param nSrc1Step \ref source_image_line_step.
  -- * \param pSrc2 \ref source_image_pointer.
  -- * \param nSrc2Step \ref source_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pError Pointer to the computed error. 
  -- * \param pDeviceBuffer Pointer to the required device memory allocation, \ref general_scratch_buffer. 
  -- * Use \ref nppiAverageRelativeErrorGetBufferHostSize_32f_C4R to compute the required size (in bytes).
  -- * \return \ref image_data_error_codes, \ref roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an 
  -- * invalid floating-point image is specified.
  -- 

   function nppiAverageRelativeError_64f_C4R
     (pSrc1 : access nppdefs_h.Npp64f;
      nSrc1Step : int;
      pSrc2 : access nppdefs_h.Npp64f;
      nSrc2Step : int;
      oSizeROI : nppdefs_h.NppiSize;
      pError : access nppdefs_h.Npp64f;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21908
   pragma Import (C, nppiAverageRelativeError_64f_C4R, "nppiAverageRelativeError_64f_C4R");

  --* @}  
  --* @name NormDiffInfGetBufferHostSize
  -- * Companion primitives for computing the device buffer size (in bytes) required by the NormDiff_Inf primitives.
  -- * @{
  --  

  --* 
  -- * Buffer size for \ref nppiAverageRelativeError_8u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageRelativeErrorGetBufferHostSize_8u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21926
   pragma Import (C, nppiAverageRelativeErrorGetBufferHostSize_8u_C1R, "nppiAverageRelativeErrorGetBufferHostSize_8u_C1R");

  --* 
  -- * Buffer size for \ref nppiAverageRelativeError_8s_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageRelativeErrorGetBufferHostSize_8s_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21936
   pragma Import (C, nppiAverageRelativeErrorGetBufferHostSize_8s_C1R, "nppiAverageRelativeErrorGetBufferHostSize_8s_C1R");

  --* 
  -- * Buffer size for \ref nppiAverageRelativeError_16u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageRelativeErrorGetBufferHostSize_16u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21946
   pragma Import (C, nppiAverageRelativeErrorGetBufferHostSize_16u_C1R, "nppiAverageRelativeErrorGetBufferHostSize_16u_C1R");

  --* 
  -- * Buffer size for \ref nppiAverageRelativeError_16s_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageRelativeErrorGetBufferHostSize_16s_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21956
   pragma Import (C, nppiAverageRelativeErrorGetBufferHostSize_16s_C1R, "nppiAverageRelativeErrorGetBufferHostSize_16s_C1R");

  --* 
  -- * Buffer size for \ref nppiAverageRelativeError_16sc_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageRelativeErrorGetBufferHostSize_16sc_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21966
   pragma Import (C, nppiAverageRelativeErrorGetBufferHostSize_16sc_C1R, "nppiAverageRelativeErrorGetBufferHostSize_16sc_C1R");

  --* 
  -- * Buffer size for \ref nppiAverageRelativeError_32u_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageRelativeErrorGetBufferHostSize_32u_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21976
   pragma Import (C, nppiAverageRelativeErrorGetBufferHostSize_32u_C1R, "nppiAverageRelativeErrorGetBufferHostSize_32u_C1R");

  --* 
  -- * Buffer size for \ref nppiAverageRelativeError_32s_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageRelativeErrorGetBufferHostSize_32s_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21986
   pragma Import (C, nppiAverageRelativeErrorGetBufferHostSize_32s_C1R, "nppiAverageRelativeErrorGetBufferHostSize_32s_C1R");

  --* 
  -- * Buffer size for \ref nppiAverageRelativeError_32sc_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageRelativeErrorGetBufferHostSize_32sc_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:21996
   pragma Import (C, nppiAverageRelativeErrorGetBufferHostSize_32sc_C1R, "nppiAverageRelativeErrorGetBufferHostSize_32sc_C1R");

  --* 
  -- * Buffer size for \ref nppiAverageRelativeError_32f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageRelativeErrorGetBufferHostSize_32f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:22006
   pragma Import (C, nppiAverageRelativeErrorGetBufferHostSize_32f_C1R, "nppiAverageRelativeErrorGetBufferHostSize_32f_C1R");

  --* 
  -- * Buffer size for \ref nppiAverageRelativeError_32fc_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageRelativeErrorGetBufferHostSize_32fc_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:22016
   pragma Import (C, nppiAverageRelativeErrorGetBufferHostSize_32fc_C1R, "nppiAverageRelativeErrorGetBufferHostSize_32fc_C1R");

  --* 
  -- * Buffer size for \ref nppiAverageRelativeError_64f_C1R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageRelativeErrorGetBufferHostSize_64f_C1R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:22026
   pragma Import (C, nppiAverageRelativeErrorGetBufferHostSize_64f_C1R, "nppiAverageRelativeErrorGetBufferHostSize_64f_C1R");

  --* 
  -- * Buffer size for \ref nppiAverageRelativeError_8u_C2R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageRelativeErrorGetBufferHostSize_8u_C2R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:22036
   pragma Import (C, nppiAverageRelativeErrorGetBufferHostSize_8u_C2R, "nppiAverageRelativeErrorGetBufferHostSize_8u_C2R");

  --* 
  -- * Buffer size for \ref nppiAverageRelativeError_8s_C2R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageRelativeErrorGetBufferHostSize_8s_C2R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:22046
   pragma Import (C, nppiAverageRelativeErrorGetBufferHostSize_8s_C2R, "nppiAverageRelativeErrorGetBufferHostSize_8s_C2R");

  --* 
  -- * Buffer size for \ref nppiAverageRelativeError_16u_C2R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageRelativeErrorGetBufferHostSize_16u_C2R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:22056
   pragma Import (C, nppiAverageRelativeErrorGetBufferHostSize_16u_C2R, "nppiAverageRelativeErrorGetBufferHostSize_16u_C2R");

  --* 
  -- * Buffer size for \ref nppiAverageRelativeError_16s_C2R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageRelativeErrorGetBufferHostSize_16s_C2R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:22066
   pragma Import (C, nppiAverageRelativeErrorGetBufferHostSize_16s_C2R, "nppiAverageRelativeErrorGetBufferHostSize_16s_C2R");

  --* 
  -- * Buffer size for \ref nppiAverageRelativeError_16sc_C2R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageRelativeErrorGetBufferHostSize_16sc_C2R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:22076
   pragma Import (C, nppiAverageRelativeErrorGetBufferHostSize_16sc_C2R, "nppiAverageRelativeErrorGetBufferHostSize_16sc_C2R");

  --* 
  -- * Buffer size for \ref nppiAverageRelativeError_32u_C2R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageRelativeErrorGetBufferHostSize_32u_C2R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:22086
   pragma Import (C, nppiAverageRelativeErrorGetBufferHostSize_32u_C2R, "nppiAverageRelativeErrorGetBufferHostSize_32u_C2R");

  --* 
  -- * Buffer size for \ref nppiAverageRelativeError_32s_C2R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageRelativeErrorGetBufferHostSize_32s_C2R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:22096
   pragma Import (C, nppiAverageRelativeErrorGetBufferHostSize_32s_C2R, "nppiAverageRelativeErrorGetBufferHostSize_32s_C2R");

  --* 
  -- * Buffer size for \ref nppiAverageRelativeError_32sc_C2R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageRelativeErrorGetBufferHostSize_32sc_C2R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:22106
   pragma Import (C, nppiAverageRelativeErrorGetBufferHostSize_32sc_C2R, "nppiAverageRelativeErrorGetBufferHostSize_32sc_C2R");

  --* 
  -- * Buffer size for \ref nppiAverageRelativeError_32f_C2R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageRelativeErrorGetBufferHostSize_32f_C2R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:22116
   pragma Import (C, nppiAverageRelativeErrorGetBufferHostSize_32f_C2R, "nppiAverageRelativeErrorGetBufferHostSize_32f_C2R");

  --* 
  -- * Buffer size for \ref nppiAverageRelativeError_32fc_C2R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageRelativeErrorGetBufferHostSize_32fc_C2R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:22126
   pragma Import (C, nppiAverageRelativeErrorGetBufferHostSize_32fc_C2R, "nppiAverageRelativeErrorGetBufferHostSize_32fc_C2R");

  --* 
  -- * Buffer size for \ref nppiAverageRelativeError_64f_C2R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageRelativeErrorGetBufferHostSize_64f_C2R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:22136
   pragma Import (C, nppiAverageRelativeErrorGetBufferHostSize_64f_C2R, "nppiAverageRelativeErrorGetBufferHostSize_64f_C2R");

  --* 
  -- * Buffer size for \ref nppiAverageRelativeError_8u_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageRelativeErrorGetBufferHostSize_8u_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:22146
   pragma Import (C, nppiAverageRelativeErrorGetBufferHostSize_8u_C3R, "nppiAverageRelativeErrorGetBufferHostSize_8u_C3R");

  --* 
  -- * Buffer size for \ref nppiAverageRelativeError_8s_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageRelativeErrorGetBufferHostSize_8s_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:22156
   pragma Import (C, nppiAverageRelativeErrorGetBufferHostSize_8s_C3R, "nppiAverageRelativeErrorGetBufferHostSize_8s_C3R");

  --* 
  -- * Buffer size for \ref nppiAverageRelativeError_16u_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageRelativeErrorGetBufferHostSize_16u_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:22166
   pragma Import (C, nppiAverageRelativeErrorGetBufferHostSize_16u_C3R, "nppiAverageRelativeErrorGetBufferHostSize_16u_C3R");

  --* 
  -- * Buffer size for \ref nppiAverageRelativeError_16s_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageRelativeErrorGetBufferHostSize_16s_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:22176
   pragma Import (C, nppiAverageRelativeErrorGetBufferHostSize_16s_C3R, "nppiAverageRelativeErrorGetBufferHostSize_16s_C3R");

  --* 
  -- * Buffer size for \ref nppiAverageRelativeError_16sc_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageRelativeErrorGetBufferHostSize_16sc_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:22186
   pragma Import (C, nppiAverageRelativeErrorGetBufferHostSize_16sc_C3R, "nppiAverageRelativeErrorGetBufferHostSize_16sc_C3R");

  --* 
  -- * Buffer size for \ref nppiAverageRelativeError_32u_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageRelativeErrorGetBufferHostSize_32u_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:22196
   pragma Import (C, nppiAverageRelativeErrorGetBufferHostSize_32u_C3R, "nppiAverageRelativeErrorGetBufferHostSize_32u_C3R");

  --* 
  -- * Buffer size for \ref nppiAverageRelativeError_32s_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageRelativeErrorGetBufferHostSize_32s_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:22206
   pragma Import (C, nppiAverageRelativeErrorGetBufferHostSize_32s_C3R, "nppiAverageRelativeErrorGetBufferHostSize_32s_C3R");

  --* 
  -- * Buffer size for \ref nppiAverageRelativeError_32sc_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageRelativeErrorGetBufferHostSize_32sc_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:22216
   pragma Import (C, nppiAverageRelativeErrorGetBufferHostSize_32sc_C3R, "nppiAverageRelativeErrorGetBufferHostSize_32sc_C3R");

  --* 
  -- * Buffer size for \ref nppiAverageRelativeError_32f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageRelativeErrorGetBufferHostSize_32f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:22226
   pragma Import (C, nppiAverageRelativeErrorGetBufferHostSize_32f_C3R, "nppiAverageRelativeErrorGetBufferHostSize_32f_C3R");

  --* 
  -- * Buffer size for \ref nppiAverageRelativeError_32fc_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageRelativeErrorGetBufferHostSize_32fc_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:22236
   pragma Import (C, nppiAverageRelativeErrorGetBufferHostSize_32fc_C3R, "nppiAverageRelativeErrorGetBufferHostSize_32fc_C3R");

  --* 
  -- * Buffer size for \ref nppiAverageRelativeError_64f_C3R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageRelativeErrorGetBufferHostSize_64f_C3R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:22246
   pragma Import (C, nppiAverageRelativeErrorGetBufferHostSize_64f_C3R, "nppiAverageRelativeErrorGetBufferHostSize_64f_C3R");

  --* 
  -- * Buffer size for \ref nppiAverageRelativeError_8u_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageRelativeErrorGetBufferHostSize_8u_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:22256
   pragma Import (C, nppiAverageRelativeErrorGetBufferHostSize_8u_C4R, "nppiAverageRelativeErrorGetBufferHostSize_8u_C4R");

  --* 
  -- * Buffer size for \ref nppiAverageRelativeError_8s_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageRelativeErrorGetBufferHostSize_8s_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:22266
   pragma Import (C, nppiAverageRelativeErrorGetBufferHostSize_8s_C4R, "nppiAverageRelativeErrorGetBufferHostSize_8s_C4R");

  --* 
  -- * Buffer size for \ref nppiAverageRelativeError_16u_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageRelativeErrorGetBufferHostSize_16u_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:22276
   pragma Import (C, nppiAverageRelativeErrorGetBufferHostSize_16u_C4R, "nppiAverageRelativeErrorGetBufferHostSize_16u_C4R");

  --* 
  -- * Buffer size for \ref nppiAverageRelativeError_16s_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageRelativeErrorGetBufferHostSize_16s_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:22286
   pragma Import (C, nppiAverageRelativeErrorGetBufferHostSize_16s_C4R, "nppiAverageRelativeErrorGetBufferHostSize_16s_C4R");

  --* 
  -- * Buffer size for \ref nppiAverageRelativeError_16sc_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageRelativeErrorGetBufferHostSize_16sc_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:22296
   pragma Import (C, nppiAverageRelativeErrorGetBufferHostSize_16sc_C4R, "nppiAverageRelativeErrorGetBufferHostSize_16sc_C4R");

  --* 
  -- * Buffer size for \ref nppiAverageRelativeError_32u_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageRelativeErrorGetBufferHostSize_32u_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:22306
   pragma Import (C, nppiAverageRelativeErrorGetBufferHostSize_32u_C4R, "nppiAverageRelativeErrorGetBufferHostSize_32u_C4R");

  --* 
  -- * Buffer size for \ref nppiAverageRelativeError_32s_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageRelativeErrorGetBufferHostSize_32s_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:22316
   pragma Import (C, nppiAverageRelativeErrorGetBufferHostSize_32s_C4R, "nppiAverageRelativeErrorGetBufferHostSize_32s_C4R");

  --* 
  -- * Buffer size for \ref nppiAverageRelativeError_32sc_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageRelativeErrorGetBufferHostSize_32sc_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:22326
   pragma Import (C, nppiAverageRelativeErrorGetBufferHostSize_32sc_C4R, "nppiAverageRelativeErrorGetBufferHostSize_32sc_C4R");

  --* 
  -- * Buffer size for \ref nppiAverageRelativeError_32f_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageRelativeErrorGetBufferHostSize_32f_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:22336
   pragma Import (C, nppiAverageRelativeErrorGetBufferHostSize_32f_C4R, "nppiAverageRelativeErrorGetBufferHostSize_32f_C4R");

  --* 
  -- * Buffer size for \ref nppiAverageRelativeError_32fc_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageRelativeErrorGetBufferHostSize_32fc_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:22346
   pragma Import (C, nppiAverageRelativeErrorGetBufferHostSize_32fc_C4R, "nppiAverageRelativeErrorGetBufferHostSize_32fc_C4R");

  --* 
  -- * Buffer size for \ref nppiAverageRelativeError_64f_C4R.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL),  \ref roi_error_codes.
  --  

  -- host pointer  
   function nppiAverageRelativeErrorGetBufferHostSize_64f_C4R (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_statistics_functions.h:22356
   pragma Import (C, nppiAverageRelativeErrorGetBufferHostSize_64f_C4R, "nppiAverageRelativeErrorGetBufferHostSize_64f_C4R");

  --* @}  
  --* @} image_statistics_functions  
  -- extern "C"  
end nppi_statistics_functions_h;

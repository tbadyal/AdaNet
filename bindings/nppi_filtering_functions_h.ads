pragma Ada_2005;
pragma Style_Checks (Off);

with Interfaces.C; use Interfaces.C;
with nppdefs_h;

package nppi_filtering_functions_h is

  -- Copyright 2009-2016 NVIDIA Corporation.  All rights reserved. 
  --  * 
  --  * NOTICE TO LICENSEE: 
  --  * 
  --  * The source code and/or documentation ("Licensed Deliverables") are 
  --  * subject to NVIDIA intellectual property rights under U.S. and                                                          
  --  * international Copyright laws.                                                                                              
  --  * 
  --  * The Licensed Deliverables contained herein are PROPRIETARY and 
  --  * CONFIDENTIAL to NVIDIA and are being provided under the terms and 
  --  * conditions of a form of NVIDIA software license agreement by and 
  --  * between NVIDIA and Licensee ("License Agreement") or electronically 
  --  * accepted by Licensee.  Notwithstanding any terms or conditions to 
  --  * the contrary in the License Agreement, reproduction or disclosure 
  --  * of the Licensed Deliverables to any third party without the express 
  --  * written consent of NVIDIA is prohibited. 
  --  * 
  --  * NOTWITHSTANDING ANY TERMS OR CONDITIONS TO THE CONTRARY IN THE 
  --  * LICENSE AGREEMENT, NVIDIA MAKES NO REPRESENTATION ABOUT THE 
  --  * SUITABILITY OF THESE LICENSED DELIVERABLES FOR ANY PURPOSE.  THEY ARE 
  --  * PROVIDED "AS IS" WITHOUT EXPRESS OR IMPLIED WARRANTY OF ANY KIND. 
  --  * NVIDIA DISCLAIMS ALL WARRANTIES WITH REGARD TO THESE LICENSED                                                   
  --  * DELIVERABLES, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY, 
  --  * NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE. 
  --  * NOTWITHSTANDING ANY TERMS OR CONDITIONS TO THE CONTRARY IN THE 
  --  * LICENSE AGREEMENT, IN NO EVENT SHALL NVIDIA BE LIABLE FOR ANY 
  --  * SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, OR ANY 
  --  * DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 
  --  * WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS 
  --  * ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 
  --  * OF THESE LICENSED DELIVERABLES. 
  --  * 
  --  * U.S. Government End Users.  These Licensed Deliverables are a 
  --  * "commercial item" as that term is defined at 48 C.F.R. 2.101 (OCT 
  --  * 1995), consisting of "commercial computer software" and "commercial 
  --  * computer software documentation" as such terms are used in 48 
  --  * C.F.R. 12.212 (SEPT 1995) and are provided to the U.S. Government 
  --  * only as a commercial end item.  Consistent with 48 C.F.R.12.212 and 
  --  * 48 C.F.R. 227.7202-1 through 227.7202-4 (JUNE 1995), all 
  --  * U.S. Government End Users acquire the Licensed Deliverables with 
  --  * only those rights set forth herein. 
  --  * 
  --  * Any use of the Licensed Deliverables in individual and commercial 
  --  * software must include, in the user documentation and internal 
  --  * comments to the code, the above Disclaimer and U.S. Government End 
  --  * Users Notice. 
  --   

  --*
  -- * \file nppi_filtering_functions.h
  -- * NPP Image Processing Functionality.
  --  

  --* @defgroup image_filtering_functions Filtering Functions
  -- *  @ingroup nppi
  -- *
  -- * Linear and non-linear image filtering functions.
  -- *
  -- * Filtering functions are classified as \ref neighborhood_operations. It is the user's 
  -- * responsibility to avoid \ref sampling_beyond_image_boundaries. 
  -- *
  -- * @{
  -- *
  -- * These functions can be found in either the nppi or nppif libraries. Linking to only the sub-libraries that you use can significantly
  -- * save link time, application load time, and CUDA runtime startup time when using dynamic libraries.
  -- *
  --  

  --* @defgroup image_1D_linear_filter 1D Linear Filter
  -- *
  -- * @{
  -- *
  --  

  --* @name FilterColumn
  -- * Apply convolution filter with user specified 1D column of weights.  
  -- * Result pixel is equal to the sum of the products between the kernel
  -- * coefficients (pKernel array) and corresponding neighboring column pixel
  -- * values in the source image defined by nKernelDim and nAnchorY, divided by
  -- * nDivisor. 
  -- * 
  -- * @{
  -- *
  --  

  --*
  -- * 8-bit unsigned single-channel 1D column convolution.
  -- * 
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *                 operation should be divided.  If equal to the sum of
  -- *                 coefficients, this will keep the maximum result value within
  -- *                 full scale.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumn_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:115
   pragma Import (C, nppiFilterColumn_8u_C1R, "nppiFilterColumn_8u_C1R");

  --*
  -- * 8-bit unsigned three-channel 1D column convolution.
  -- * 
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *                 operation should be divided.  If equal to the sum of
  -- *                 coefficients, this will keep the maximum result value within
  -- *                 full scale.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumn_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:138
   pragma Import (C, nppiFilterColumn_8u_C3R, "nppiFilterColumn_8u_C3R");

  --*
  -- * 8-bit unsigned four-channel 1D column convolution.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *                 operation should be divided.  If equal to the sum of
  -- *                 coefficients, this will keep the maximum result value within
  -- *                 full scale.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumn_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:161
   pragma Import (C, nppiFilterColumn_8u_C4R, "nppiFilterColumn_8u_C4R");

  --*
  -- * 8-bit unsigned four-channel 1D column convolution ignoring alpha-channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *                 operation should be divided.  If equal to the sum of
  -- *                 coefficients, this will keep the maximum result value within
  -- *                 full scale.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumn_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:184
   pragma Import (C, nppiFilterColumn_8u_AC4R, "nppiFilterColumn_8u_AC4R");

  --*
  -- * 16-bit unsigned single-channel 1D column convolution.
  -- * 
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *                 operation should be divided.  If equal to the sum of
  -- *                 coefficients, this will keep the maximum result value within
  -- *                 full scale.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumn_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:207
   pragma Import (C, nppiFilterColumn_16u_C1R, "nppiFilterColumn_16u_C1R");

  --*
  -- * 16-bit unsigned three-channel 1D column convolution.
  -- * 
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *                 operation should be divided.  If equal to the sum of
  -- *                 coefficients, this will keep the maximum result value within
  -- *                 full scale.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumn_16u_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:230
   pragma Import (C, nppiFilterColumn_16u_C3R, "nppiFilterColumn_16u_C3R");

  --*
  -- * 16-bit unsigned four-channel 1D column convolution.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *                 operation should be divided.  If equal to the sum of
  -- *                 coefficients, this will keep the maximum result value within
  -- *                 full scale.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumn_16u_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:253
   pragma Import (C, nppiFilterColumn_16u_C4R, "nppiFilterColumn_16u_C4R");

  --*
  -- * 16-bit unsigned four-channel 1D column convolution ignoring alpha-channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *                 operation should be divided.  If equal to the sum of
  -- *                 coefficients, this will keep the maximum result value within
  -- *                 full scale.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumn_16u_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:276
   pragma Import (C, nppiFilterColumn_16u_AC4R, "nppiFilterColumn_16u_AC4R");

  --*
  -- * 16-bit single-channel 1D column convolution.
  -- * 
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *                 operation should be divided.  If equal to the sum of
  -- *                 coefficients, this will keep the maximum result value within
  -- *                 full scale.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumn_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:299
   pragma Import (C, nppiFilterColumn_16s_C1R, "nppiFilterColumn_16s_C1R");

  --*
  -- * 16-bit three-channel 1D column convolution.
  -- * 
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *                 operation should be divided.  If equal to the sum of
  -- *                 coefficients, this will keep the maximum result value within
  -- *                 full scale.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumn_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:322
   pragma Import (C, nppiFilterColumn_16s_C3R, "nppiFilterColumn_16s_C3R");

  --*
  -- * 16-bit four-channel 1D column convolution.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *                 operation should be divided.  If equal to the sum of
  -- *                 coefficients, this will keep the maximum result value within
  -- *                 full scale.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumn_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:345
   pragma Import (C, nppiFilterColumn_16s_C4R, "nppiFilterColumn_16s_C4R");

  --*
  -- * 16-bit four-channel 1D column convolution ignoring alpha-channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *                 operation should be divided.  If equal to the sum of
  -- *                 coefficients, this will keep the maximum result value within
  -- *                 full scale.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumn_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:368
   pragma Import (C, nppiFilterColumn_16s_AC4R, "nppiFilterColumn_16s_AC4R");

  --*
  -- * 32-bit float single-channel 1D column convolution.
  -- * 
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumn_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:387
   pragma Import (C, nppiFilterColumn_32f_C1R, "nppiFilterColumn_32f_C1R");

  --*
  -- * 32-bit float three-channel 1D column convolution.
  -- * 
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumn_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:406
   pragma Import (C, nppiFilterColumn_32f_C3R, "nppiFilterColumn_32f_C3R");

  --*
  -- * 32-bit float four-channel 1D column convolution.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumn_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:425
   pragma Import (C, nppiFilterColumn_32f_C4R, "nppiFilterColumn_32f_C4R");

  --*
  -- * 32-bit float four-channel 1D column convolution ignoring alpha-channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumn_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:444
   pragma Import (C, nppiFilterColumn_32f_AC4R, "nppiFilterColumn_32f_AC4R");

  --*
  -- * 64-bit float single-channel 1D column convolution.
  -- * 
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumn_64f_C1R
     (pSrc : access nppdefs_h.Npp64f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp64f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp64f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:463
   pragma Import (C, nppiFilterColumn_64f_C1R, "nppiFilterColumn_64f_C1R");

  --* @} FilterColumn  
  --* @name FilterColumnBorder
  -- * General purpose 1D convolution column filter with border control.
  -- *
  -- * Pixels under the mask are multiplied by the respective weights in the mask
  -- * and the results are summed. Before writing the result pixel the sum is scaled
  -- * back via division by nDivisor. If any portion of the mask overlaps the source
  -- * image boundary the requested border type operation is applied to all mask pixels
  -- * which fall outside of the source image.
  -- *
  -- * Currently only the NPP_BORDER_REPLICATE border type operation is supported.
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned 1D column convolution filter with border control.
  -- * 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumnBorder_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:507
   pragma Import (C, nppiFilterColumnBorder_8u_C1R, "nppiFilterColumnBorder_8u_C1R");

  --*
  -- * Three channel 8-bit unsigned 1D column convolution filter with border control.
  -- * 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumnBorder_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:533
   pragma Import (C, nppiFilterColumnBorder_8u_C3R, "nppiFilterColumnBorder_8u_C3R");

  --*
  -- * Four channel channel 8-bit unsigned 1D column convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumnBorder_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:558
   pragma Import (C, nppiFilterColumnBorder_8u_C4R, "nppiFilterColumnBorder_8u_C4R");

  --*
  -- * Four channel 8-bit unsigned convolution 1D column filter with border control, ignoring alpha channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumnBorder_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:583
   pragma Import (C, nppiFilterColumnBorder_8u_AC4R, "nppiFilterColumnBorder_8u_AC4R");

  --*
  -- * Single channel 16-bit unsigned convolution 1D column filter with border control.
  -- * 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumnBorder_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:609
   pragma Import (C, nppiFilterColumnBorder_16u_C1R, "nppiFilterColumnBorder_16u_C1R");

  --*
  -- * Three channel 16-bit unsigned 1D column convolution filter with border control.
  -- * 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumnBorder_16u_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:635
   pragma Import (C, nppiFilterColumnBorder_16u_C3R, "nppiFilterColumnBorder_16u_C3R");

  --*
  -- * Four channel channel 16-bit 1D column unsigned convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumnBorder_16u_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:660
   pragma Import (C, nppiFilterColumnBorder_16u_C4R, "nppiFilterColumnBorder_16u_C4R");

  --*
  -- * Four channel 16-bit unsigned 1D column convolution filter with border control, ignoring alpha channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumnBorder_16u_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:685
   pragma Import (C, nppiFilterColumnBorder_16u_AC4R, "nppiFilterColumnBorder_16u_AC4R");

  --*
  -- * Single channel 16-bit 1D column convolution filter with border control.
  -- * 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumnBorder_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:711
   pragma Import (C, nppiFilterColumnBorder_16s_C1R, "nppiFilterColumnBorder_16s_C1R");

  --*
  -- * Three channel 16-bit 1D column convolution filter with border control.
  -- * 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumnBorder_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:737
   pragma Import (C, nppiFilterColumnBorder_16s_C3R, "nppiFilterColumnBorder_16s_C3R");

  --*
  -- * Four channel channel 16-bit 1D column convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumnBorder_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:762
   pragma Import (C, nppiFilterColumnBorder_16s_C4R, "nppiFilterColumnBorder_16s_C4R");

  --*
  -- * Four channel 16-bit 1D column convolution filter with border control, ignoring alpha channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumnBorder_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:787
   pragma Import (C, nppiFilterColumnBorder_16s_AC4R, "nppiFilterColumnBorder_16s_AC4R");

  --*
  -- * Single channel 32-bit float 1D column convolution filter with border control.
  -- * 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumnBorder_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:810
   pragma Import (C, nppiFilterColumnBorder_32f_C1R, "nppiFilterColumnBorder_32f_C1R");

  --*
  -- * Three channel 32-bit float 1D column convolution filter with border control.
  -- * 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumnBorder_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:833
   pragma Import (C, nppiFilterColumnBorder_32f_C3R, "nppiFilterColumnBorder_32f_C3R");

  --*
  -- * Four channel 32-bit float 1D column convolution filter with border control.
  -- * 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumnBorder_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:856
   pragma Import (C, nppiFilterColumnBorder_32f_C4R, "nppiFilterColumnBorder_32f_C4R");

  --*
  -- * Four channel 32-bit float 1D column convolution filter with border control, ignoring alpha channel.
  -- * 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumnBorder_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:879
   pragma Import (C, nppiFilterColumnBorder_32f_AC4R, "nppiFilterColumnBorder_32f_AC4R");

  --* @} FilterColumnBorder  
  --* @name FilterColumn32f
  -- * 
  -- * FilterColumn using floating-point weights.
  -- * 
  -- * @{
  -- *
  --  

  --*
  -- * 8-bit unsigned single-channel 1D column convolution.
  -- * 
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumn32f_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:908
   pragma Import (C, nppiFilterColumn32f_8u_C1R, "nppiFilterColumn32f_8u_C1R");

  --*
  -- * 8-bit unsigned three-channel 1D column convolution.
  -- * 
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumn32f_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:927
   pragma Import (C, nppiFilterColumn32f_8u_C3R, "nppiFilterColumn32f_8u_C3R");

  --*
  -- * 8-bit unsigned four-channel 1D column convolution.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumn32f_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:946
   pragma Import (C, nppiFilterColumn32f_8u_C4R, "nppiFilterColumn32f_8u_C4R");

  --*
  -- * 8-bit unsigned four-channel 1D column convolution ignoring alpha-channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumn32f_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:965
   pragma Import (C, nppiFilterColumn32f_8u_AC4R, "nppiFilterColumn32f_8u_AC4R");

  --*
  -- * 16-bit unsigned single-channel 1D column convolution.
  -- * 
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumn32f_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:984
   pragma Import (C, nppiFilterColumn32f_16u_C1R, "nppiFilterColumn32f_16u_C1R");

  --*
  -- * 16-bit unsigned three-channel 1D column convolution.
  -- * 
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumn32f_16u_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:1003
   pragma Import (C, nppiFilterColumn32f_16u_C3R, "nppiFilterColumn32f_16u_C3R");

  --*
  -- * 16-bit unsigned four-channel 1D column convolution.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumn32f_16u_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:1022
   pragma Import (C, nppiFilterColumn32f_16u_C4R, "nppiFilterColumn32f_16u_C4R");

  --*
  -- * 16-bit unsigned four-channel 1D column convolution ignoring alpha-channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumn32f_16u_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:1041
   pragma Import (C, nppiFilterColumn32f_16u_AC4R, "nppiFilterColumn32f_16u_AC4R");

  --*
  -- * 16-bit single-channel 1D column convolution.
  -- * 
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumn32f_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:1060
   pragma Import (C, nppiFilterColumn32f_16s_C1R, "nppiFilterColumn32f_16s_C1R");

  --*
  -- * 16-bit three-channel 1D column convolution.
  -- * 
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumn32f_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:1079
   pragma Import (C, nppiFilterColumn32f_16s_C3R, "nppiFilterColumn32f_16s_C3R");

  --*
  -- * 16-bit four-channel 1D column convolution.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumn32f_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:1098
   pragma Import (C, nppiFilterColumn32f_16s_C4R, "nppiFilterColumn32f_16s_C4R");

  --*
  -- * 16-bit four-channel 1D column convolution ignoring alpha-channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumn32f_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:1117
   pragma Import (C, nppiFilterColumn32f_16s_AC4R, "nppiFilterColumn32f_16s_AC4R");

  --* @} FilterColumn32f  
  --* @name FilterColumnBorder32f
  -- * General purpose 1D column convolution filter using floating-point weights with border control.
  -- *
  -- * Pixels under the mask are multiplied by the respective weights in the mask
  -- * and the results are summed.  If any portion of the mask overlaps the source
  -- * image boundary the requested border type operation is applied to all mask pixels
  -- * which fall outside of the source image.
  -- *
  -- * Currently only the NPP_BORDER_REPLICATE border type operation is supported.
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned 1D column convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumnBorder32f_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:1156
   pragma Import (C, nppiFilterColumnBorder32f_8u_C1R, "nppiFilterColumnBorder32f_8u_C1R");

  --*
  -- * Three channel 8-bit unsigned 1D column convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumnBorder32f_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:1178
   pragma Import (C, nppiFilterColumnBorder32f_8u_C3R, "nppiFilterColumnBorder32f_8u_C3R");

  --*
  -- * Four channel 8-bit unsigned 1D column convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumnBorder32f_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:1200
   pragma Import (C, nppiFilterColumnBorder32f_8u_C4R, "nppiFilterColumnBorder32f_8u_C4R");

  --*
  -- * Four channel 8-bit unsigned 1D column convolution filter with border control, ignorint alpha channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumnBorder32f_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:1222
   pragma Import (C, nppiFilterColumnBorder32f_8u_AC4R, "nppiFilterColumnBorder32f_8u_AC4R");

  --*
  -- * Single channel 16-bit unsigned 1D column convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumnBorder32f_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:1244
   pragma Import (C, nppiFilterColumnBorder32f_16u_C1R, "nppiFilterColumnBorder32f_16u_C1R");

  --*
  -- * Three channel 16-bit unsigned 1D column convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumnBorder32f_16u_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:1266
   pragma Import (C, nppiFilterColumnBorder32f_16u_C3R, "nppiFilterColumnBorder32f_16u_C3R");

  --*
  -- * Four channel 16-bit unsigned 1D column convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumnBorder32f_16u_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:1288
   pragma Import (C, nppiFilterColumnBorder32f_16u_C4R, "nppiFilterColumnBorder32f_16u_C4R");

  --*
  -- * Four channel 16-bit unsigned 1D column convolution filter with border control, ignoring alpha channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumnBorder32f_16u_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:1310
   pragma Import (C, nppiFilterColumnBorder32f_16u_AC4R, "nppiFilterColumnBorder32f_16u_AC4R");

  --*
  -- * Single channel 16-bit 1D column convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumnBorder32f_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:1332
   pragma Import (C, nppiFilterColumnBorder32f_16s_C1R, "nppiFilterColumnBorder32f_16s_C1R");

  --*
  -- * Three channel 16-bit 1D column convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumnBorder32f_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:1354
   pragma Import (C, nppiFilterColumnBorder32f_16s_C3R, "nppiFilterColumnBorder32f_16s_C3R");

  --*
  -- * Four channel 16-bit 1D column convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumnBorder32f_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:1376
   pragma Import (C, nppiFilterColumnBorder32f_16s_C4R, "nppiFilterColumnBorder32f_16s_C4R");

  --*
  -- * Four channel 16-bit 1D column convolution filter with border control, ignoring alpha channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterColumnBorder32f_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:1398
   pragma Import (C, nppiFilterColumnBorder32f_16s_AC4R, "nppiFilterColumnBorder32f_16s_AC4R");

  --* @} FilterColumnBorder32f  
  --* @name FilterRow
  -- * Apply convolution filter with user specified 1D row of weights.  
  -- * Result pixel is equal to the sum of the products between the kernel
  -- * coefficients (pKernel array) and corresponding neighboring row pixel
  -- * values in the source image defined by nKernelDim and nAnchorX, divided by
  -- * nDivisor. 
  -- * 
  -- * @{
  -- *
  --  

  --*
  -- * 8-bit unsigned single-channel 1D row convolution.
  -- * 
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *                 operation should be divided.  If equal to the sum of
  -- *                 coefficients, this will keep the maximum result value within
  -- *                 full scale.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRow_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:1434
   pragma Import (C, nppiFilterRow_8u_C1R, "nppiFilterRow_8u_C1R");

  --*
  -- * 8-bit unsigned three-channel 1D row convolution.
  -- * 
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *                 operation should be divided.  If equal to the sum of
  -- *                 coefficients, this will keep the maximum result value within
  -- *                 full scale.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRow_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:1457
   pragma Import (C, nppiFilterRow_8u_C3R, "nppiFilterRow_8u_C3R");

  --*
  -- * 8-bit unsigned four-channel 1D row convolution.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *                 operation should be divided.  If equal to the sum of
  -- *                 coefficients, this will keep the maximum result value within
  -- *                 full scale.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRow_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:1480
   pragma Import (C, nppiFilterRow_8u_C4R, "nppiFilterRow_8u_C4R");

  --*
  -- * 8-bit unsigned four-channel 1D row convolution ignoring alpha-channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *                 operation should be divided.  If equal to the sum of
  -- *                 coefficients, this will keep the maximum result value within
  -- *                 full scale.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRow_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:1503
   pragma Import (C, nppiFilterRow_8u_AC4R, "nppiFilterRow_8u_AC4R");

  --*
  -- * 16-bit unsigned single-channel 1D row convolution.
  -- * 
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *                 operation should be divided.  If equal to the sum of
  -- *                 coefficients, this will keep the maximum result value within
  -- *                 full scale.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRow_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:1526
   pragma Import (C, nppiFilterRow_16u_C1R, "nppiFilterRow_16u_C1R");

  --*
  -- * 16-bit unsigned three-channel 1D row convolution.
  -- * 
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *                 operation should be divided.  If equal to the sum of
  -- *                 coefficients, this will keep the maximum result value within
  -- *                 full scale.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRow_16u_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:1549
   pragma Import (C, nppiFilterRow_16u_C3R, "nppiFilterRow_16u_C3R");

  --*
  -- * 16-bit unsigned four-channel 1D row convolution.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *                 operation should be divided.  If equal to the sum of
  -- *                 coefficients, this will keep the maximum result value within
  -- *                 full scale.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRow_16u_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:1572
   pragma Import (C, nppiFilterRow_16u_C4R, "nppiFilterRow_16u_C4R");

  --*
  -- * 16-bit unsigned four-channel 1D row convolution ignoring alpha-channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *                 operation should be divided.  If equal to the sum of
  -- *                 coefficients, this will keep the maximum result value within
  -- *                 full scale.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRow_16u_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:1595
   pragma Import (C, nppiFilterRow_16u_AC4R, "nppiFilterRow_16u_AC4R");

  --*
  -- * 16-bit single-channel 1D row convolution.
  -- * 
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *                 operation should be divided.  If equal to the sum of
  -- *                 coefficients, this will keep the maximum result value within
  -- *                 full scale.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRow_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:1618
   pragma Import (C, nppiFilterRow_16s_C1R, "nppiFilterRow_16s_C1R");

  --*
  -- * 16-bit three-channel 1D row convolution.
  -- * 
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *                 operation should be divided.  If equal to the sum of
  -- *                 coefficients, this will keep the maximum result value within
  -- *                 full scale.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRow_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:1641
   pragma Import (C, nppiFilterRow_16s_C3R, "nppiFilterRow_16s_C3R");

  --*
  -- * 16-bit four-channel 1D row convolution.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *                 operation should be divided.  If equal to the sum of
  -- *                 coefficients, this will keep the maximum result value within
  -- *                 full scale.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRow_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:1664
   pragma Import (C, nppiFilterRow_16s_C4R, "nppiFilterRow_16s_C4R");

  --*
  -- * 16-bit four-channel 1D row convolution ignoring alpha-channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *                 operation should be divided.  If equal to the sum of
  -- *                 coefficients, this will keep the maximum result value within
  -- *                 full scale.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRow_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:1687
   pragma Import (C, nppiFilterRow_16s_AC4R, "nppiFilterRow_16s_AC4R");

  --*
  -- * 32-bit float single-channel 1D row convolution.
  -- * 
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRow_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:1707
   pragma Import (C, nppiFilterRow_32f_C1R, "nppiFilterRow_32f_C1R");

  --*
  -- * 32-bit float three-channel 1D row convolution.
  -- * 
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRow_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:1726
   pragma Import (C, nppiFilterRow_32f_C3R, "nppiFilterRow_32f_C3R");

  --*
  -- * 32-bit float four-channel 1D row convolution.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRow_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:1745
   pragma Import (C, nppiFilterRow_32f_C4R, "nppiFilterRow_32f_C4R");

  --*
  -- * 32-bit float four-channel 1D row convolution ignoring alpha-channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRow_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:1764
   pragma Import (C, nppiFilterRow_32f_AC4R, "nppiFilterRow_32f_AC4R");

  --*
  -- * 64-bit float single-channel 1D row convolution.
  -- * 
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRow_64f_C1R
     (pSrc : access nppdefs_h.Npp64f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp64f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp64f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:1783
   pragma Import (C, nppiFilterRow_64f_C1R, "nppiFilterRow_64f_C1R");

  --* @} FilterRow  
  --* @name FilterRowBorder
  -- * General purpose 1D convolution row filter with border control.
  -- *
  -- * Pixels under the mask are multiplied by the respective weights in the mask
  -- * and the results are summed. Before writing the result pixel the sum is scaled
  -- * back via division by nDivisor. If any portion of the mask overlaps the source
  -- * image boundary the requested border type operation is applied to all mask pixels
  -- * which fall outside of the source image.
  -- *
  -- * Currently only the NPP_BORDER_REPLICATE border type operation is supported.
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned 1D row convolution filter with border control.
  -- * 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRowBorder_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:1827
   pragma Import (C, nppiFilterRowBorder_8u_C1R, "nppiFilterRowBorder_8u_C1R");

  --*
  -- * Three channel 8-bit unsigned 1D row convolution filter with border control.
  -- * 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRowBorder_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:1853
   pragma Import (C, nppiFilterRowBorder_8u_C3R, "nppiFilterRowBorder_8u_C3R");

  --*
  -- * Four channel channel 8-bit unsigned 1D row convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRowBorder_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:1878
   pragma Import (C, nppiFilterRowBorder_8u_C4R, "nppiFilterRowBorder_8u_C4R");

  --*
  -- * Four channel 8-bit unsigned convolution 1D row filter with border control, ignoring alpha channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRowBorder_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:1903
   pragma Import (C, nppiFilterRowBorder_8u_AC4R, "nppiFilterRowBorder_8u_AC4R");

  --*
  -- * Single channel 16-bit unsigned convolution 1D row filter with border control.
  -- * 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRowBorder_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:1929
   pragma Import (C, nppiFilterRowBorder_16u_C1R, "nppiFilterRowBorder_16u_C1R");

  --*
  -- * Three channel 16-bit unsigned 1D row convolution filter with border control.
  -- * 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRowBorder_16u_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:1955
   pragma Import (C, nppiFilterRowBorder_16u_C3R, "nppiFilterRowBorder_16u_C3R");

  --*
  -- * Four channel channel 16-bit 1D row unsigned convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRowBorder_16u_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:1980
   pragma Import (C, nppiFilterRowBorder_16u_C4R, "nppiFilterRowBorder_16u_C4R");

  --*
  -- * Four channel 16-bit unsigned 1D row convolution filter with border control, ignoring alpha channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRowBorder_16u_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:2005
   pragma Import (C, nppiFilterRowBorder_16u_AC4R, "nppiFilterRowBorder_16u_AC4R");

  --*
  -- * Single channel 16-bit 1D row convolution filter with border control.
  -- * 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRowBorder_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:2031
   pragma Import (C, nppiFilterRowBorder_16s_C1R, "nppiFilterRowBorder_16s_C1R");

  --*
  -- * Three channel 16-bit 1D row convolution filter with border control.
  -- * 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRowBorder_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:2057
   pragma Import (C, nppiFilterRowBorder_16s_C3R, "nppiFilterRowBorder_16s_C3R");

  --*
  -- * Four channel channel 16-bit 1D row convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRowBorder_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:2082
   pragma Import (C, nppiFilterRowBorder_16s_C4R, "nppiFilterRowBorder_16s_C4R");

  --*
  -- * Four channel 16-bit 1D row convolution filter with border control, ignoring alpha channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRowBorder_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      nDivisor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:2107
   pragma Import (C, nppiFilterRowBorder_16s_AC4R, "nppiFilterRowBorder_16s_AC4R");

  --*
  -- * Single channel 32-bit float 1D row convolution filter with border control.
  -- * 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRowBorder_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:2130
   pragma Import (C, nppiFilterRowBorder_32f_C1R, "nppiFilterRowBorder_32f_C1R");

  --*
  -- * Three channel 32-bit float 1D row convolution filter with border control.
  -- * 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRowBorder_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:2153
   pragma Import (C, nppiFilterRowBorder_32f_C3R, "nppiFilterRowBorder_32f_C3R");

  --*
  -- * Four channel 32-bit float 1D row convolution filter with border control.
  -- * 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRowBorder_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:2176
   pragma Import (C, nppiFilterRowBorder_32f_C4R, "nppiFilterRowBorder_32f_C4R");

  --*
  -- * Four channel 32-bit float 1D row convolution filter with border control, ignoring alpha channel.
  -- * 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRowBorder_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:2199
   pragma Import (C, nppiFilterRowBorder_32f_AC4R, "nppiFilterRowBorder_32f_AC4R");

  --* @} FilterRowBorder  
  --* @name FilterRow32f
  -- * 
  -- * FilterRow using floating-point weights.
  -- * 
  -- * @{
  -- *
  --  

  --*
  -- * 8-bit unsigned single-channel 1D row convolution.
  -- * 
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRow32f_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:2228
   pragma Import (C, nppiFilterRow32f_8u_C1R, "nppiFilterRow32f_8u_C1R");

  --*
  -- * 8-bit unsigned three-channel 1D row convolution.
  -- * 
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRow32f_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:2247
   pragma Import (C, nppiFilterRow32f_8u_C3R, "nppiFilterRow32f_8u_C3R");

  --*
  -- * 8-bit unsigned four-channel 1D row convolution.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRow32f_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:2266
   pragma Import (C, nppiFilterRow32f_8u_C4R, "nppiFilterRow32f_8u_C4R");

  --*
  -- * 8-bit unsigned four-channel 1D row convolution ignoring alpha-channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRow32f_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:2285
   pragma Import (C, nppiFilterRow32f_8u_AC4R, "nppiFilterRow32f_8u_AC4R");

  --*
  -- * 16-bit unsigned single-channel 1D row convolution.
  -- * 
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRow32f_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:2304
   pragma Import (C, nppiFilterRow32f_16u_C1R, "nppiFilterRow32f_16u_C1R");

  --*
  -- * 16-bit unsigned three-channel 1D row convolution.
  -- * 
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRow32f_16u_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:2323
   pragma Import (C, nppiFilterRow32f_16u_C3R, "nppiFilterRow32f_16u_C3R");

  --*
  -- * 16-bit unsigned four-channel 1D row convolution.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRow32f_16u_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:2342
   pragma Import (C, nppiFilterRow32f_16u_C4R, "nppiFilterRow32f_16u_C4R");

  --*
  -- * 16-bit unsigned four-channel 1D row convolution ignoring alpha-channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRow32f_16u_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:2361
   pragma Import (C, nppiFilterRow32f_16u_AC4R, "nppiFilterRow32f_16u_AC4R");

  --*
  -- * 16-bit single-channel 1D row convolution.
  -- * 
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRow32f_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:2380
   pragma Import (C, nppiFilterRow32f_16s_C1R, "nppiFilterRow32f_16s_C1R");

  --*
  -- * 16-bit three-channel 1D row convolution.
  -- * 
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRow32f_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:2399
   pragma Import (C, nppiFilterRow32f_16s_C3R, "nppiFilterRow32f_16s_C3R");

  --*
  -- * 16-bit four-channel 1D row convolution.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRow32f_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:2418
   pragma Import (C, nppiFilterRow32f_16s_C4R, "nppiFilterRow32f_16s_C4R");

  --*
  -- * 16-bit four-channel 1D row convolution ignoring alpha-channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *                Coefficients are expected to be stored in reverse order.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *                 source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRow32f_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:2437
   pragma Import (C, nppiFilterRow32f_16s_AC4R, "nppiFilterRow32f_16s_AC4R");

  --* @} FilterRow32f  
  --* @name FilterRowBorder32f
  -- * General purpose 1D row convolution filter using floating-point weights with border control.
  -- *
  -- * Pixels under the mask are multiplied by the respective weights in the mask
  -- * and the results are summed.  If any portion of the mask overlaps the source
  -- * image boundary the requested border type operation is applied to all mask pixels
  -- * which fall outside of the source image.
  -- *
  -- * Currently only the NPP_BORDER_REPLICATE border type operation is supported.
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned 1D row convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRowBorder32f_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:2476
   pragma Import (C, nppiFilterRowBorder32f_8u_C1R, "nppiFilterRowBorder32f_8u_C1R");

  --*
  -- * Three channel 8-bit unsigned 1D row convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRowBorder32f_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:2498
   pragma Import (C, nppiFilterRowBorder32f_8u_C3R, "nppiFilterRowBorder32f_8u_C3R");

  --*
  -- * Four channel 8-bit unsigned 1D row convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRowBorder32f_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:2520
   pragma Import (C, nppiFilterRowBorder32f_8u_C4R, "nppiFilterRowBorder32f_8u_C4R");

  --*
  -- * Four channel 8-bit unsigned 1D row convolution filter with border control, ignorint alpha channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRowBorder32f_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:2542
   pragma Import (C, nppiFilterRowBorder32f_8u_AC4R, "nppiFilterRowBorder32f_8u_AC4R");

  --*
  -- * Single channel 16-bit unsigned 1D row convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRowBorder32f_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:2564
   pragma Import (C, nppiFilterRowBorder32f_16u_C1R, "nppiFilterRowBorder32f_16u_C1R");

  --*
  -- * Three channel 16-bit unsigned 1D row convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRowBorder32f_16u_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:2586
   pragma Import (C, nppiFilterRowBorder32f_16u_C3R, "nppiFilterRowBorder32f_16u_C3R");

  --*
  -- * Four channel 16-bit unsigned 1D row convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRowBorder32f_16u_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:2608
   pragma Import (C, nppiFilterRowBorder32f_16u_C4R, "nppiFilterRowBorder32f_16u_C4R");

  --*
  -- * Four channel 16-bit unsigned 1D row convolution filter with border control, ignoring alpha channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRowBorder32f_16u_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:2630
   pragma Import (C, nppiFilterRowBorder32f_16u_AC4R, "nppiFilterRowBorder32f_16u_AC4R");

  --*
  -- * Single channel 16-bit 1D row convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRowBorder32f_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:2652
   pragma Import (C, nppiFilterRowBorder32f_16s_C1R, "nppiFilterRowBorder32f_16s_C1R");

  --*
  -- * Three channel 16-bit 1D row convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRowBorder32f_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:2674
   pragma Import (C, nppiFilterRowBorder32f_16s_C3R, "nppiFilterRowBorder32f_16s_C3R");

  --*
  -- * Four channel 16-bit 1D row convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRowBorder32f_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:2696
   pragma Import (C, nppiFilterRowBorder32f_16s_C4R, "nppiFilterRowBorder32f_16s_C4R");

  --*
  -- * Four channel 16-bit 1D row convolution filter with border control, ignoring alpha channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param nMaskSize Width of the kernel.
  -- * \param nAnchor X offset of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRowBorder32f_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:2718
   pragma Import (C, nppiFilterRowBorder32f_16s_AC4R, "nppiFilterRowBorder32f_16s_AC4R");

  --* @} FilterRowBorder32f  
  --* @} image_1D_linear_filter  
  --* @defgroup image_1D_window_sum 1D Window Sum
  -- *
  -- * @{
  -- *
  --  

  --* @name 1D Window Sum
  -- *  1D mask Window Sum for 8 and 16 bit images.
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * One channel 8-bit unsigned 1D (column) sum to 32f.
  -- *
  -- * Apply Column Window Summation filter over a 1D mask region around each
  -- * source pixel for 1-channel 8 bit/pixel input images with 32-bit floating point
  -- * output.  
  -- * Result 32-bit floating point pixel is equal to the sum of the corresponding and
  -- * neighboring column pixel values in a mask region of the source image defined by
  -- * nMaskSize and nAnchor. 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *        source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSumWindowColumn_8u32f_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:2758
   pragma Import (C, nppiSumWindowColumn_8u32f_C1R, "nppiSumWindowColumn_8u32f_C1R");

  --*
  -- * Three channel 8-bit unsigned 1D (column) sum to 32f.
  -- *
  -- * Apply Column Window Summation filter over a 1D mask region around each
  -- * source pixel for 3-channel 8 bit/pixel input images with 32-bit floating point
  -- * output.  
  -- * Result 32-bit floating point pixel is equal to the sum of the corresponding and
  -- * neighboring column pixel values in a mask region of the source image defined by
  -- * nMaskSize and nAnchor. 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *        source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSumWindowColumn_8u32f_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:2783
   pragma Import (C, nppiSumWindowColumn_8u32f_C3R, "nppiSumWindowColumn_8u32f_C3R");

  --*
  -- * Four channel 8-bit unsigned 1D (column) sum to 32f.
  -- *
  -- * Apply Column Window Summation filter over a 1D mask region around each
  -- * source pixel for 4-channel 8 bit/pixel input images with 32-bit floating point
  -- * output.  
  -- * Result 32-bit floating point pixel is equal to the sum of the corresponding and
  -- * neighboring column pixel values in a mask region of the source image defined by
  -- * nMaskSize and nAnchor. 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *        source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSumWindowColumn_8u32f_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:2808
   pragma Import (C, nppiSumWindowColumn_8u32f_C4R, "nppiSumWindowColumn_8u32f_C4R");

  --*
  -- * One channel 16-bit unsigned 1D (column) sum to 32f.
  -- *
  -- * Apply Column Window Summation filter over a 1D mask region around each
  -- * source pixel for 1-channel 16 bit/pixel input images with 32-bit floating point
  -- * output.  
  -- * Result 32-bit floating point pixel is equal to the sum of the corresponding and
  -- * neighboring column pixel values in a mask region of the source image defined by
  -- * nMaskSize and nAnchor. 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *        source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSumWindowColumn_16u32f_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:2832
   pragma Import (C, nppiSumWindowColumn_16u32f_C1R, "nppiSumWindowColumn_16u32f_C1R");

  --*
  -- * Three channel 16-bit unsigned 1D (column) sum to 32f.
  -- *
  -- * Apply Column Window Summation filter over a 1D mask region around each
  -- * source pixel for 3-channel 16 bit/pixel input images with 32-bit floating point
  -- * output.  
  -- * Result 32-bit floating point pixel is equal to the sum of the corresponding and
  -- * neighboring column pixel values in a mask region of the source image defined by
  -- * nMaskSize and nAnchor. 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *        source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSumWindowColumn_16u32f_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:2856
   pragma Import (C, nppiSumWindowColumn_16u32f_C3R, "nppiSumWindowColumn_16u32f_C3R");

  --*
  -- * Four channel 16-bit unsigned 1D (column) sum to 32f.
  -- *
  -- * Apply Column Window Summation filter over a 1D mask region around each
  -- * source pixel for 4-channel 16 bit/pixel input images with 32-bit floating point
  -- * output.  
  -- * Result 32-bit floating point pixel is equal to the sum of the corresponding and
  -- * neighboring column pixel values in a mask region of the source image defined by
  -- * nMaskSize and nAnchor. 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *        source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSumWindowColumn_16u32f_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:2880
   pragma Import (C, nppiSumWindowColumn_16u32f_C4R, "nppiSumWindowColumn_16u32f_C4R");

  --*
  -- * One channel 16-bit signed 1D (column) sum to 32f.
  -- *
  -- * Apply Column Window Summation filter over a 1D mask region around each
  -- * source pixel for 1-channel 16 bit/pixel input images with 32-bit floating point
  -- * output.  
  -- * Result 32-bit floating point pixel is equal to the sum of the corresponding and
  -- * neighboring column pixel values in a mask region of the source image defined by
  -- * nMaskSize and nAnchor. 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *        source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSumWindowColumn_16s32f_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:2904
   pragma Import (C, nppiSumWindowColumn_16s32f_C1R, "nppiSumWindowColumn_16s32f_C1R");

  --*
  -- * Three channel 16-bit signed 1D (column) sum to 32f.
  -- *
  -- * Apply Column Window Summation filter over a 1D mask region around each
  -- * source pixel for 1-channel 16 bit/pixel input images with 32-bit floating point
  -- * output.  
  -- * Result 32-bit floating point pixel is equal to the sum of the corresponding and
  -- * neighboring column pixel values in a mask region of the source image defined by
  -- * nMaskSize and nAnchor. 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *        source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSumWindowColumn_16s32f_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:2928
   pragma Import (C, nppiSumWindowColumn_16s32f_C3R, "nppiSumWindowColumn_16s32f_C3R");

  --*
  -- * Four channel 16-bit signed 1D (column) sum to 32f.
  -- *
  -- * Apply Column Window Summation filter over a 1D mask region around each
  -- * source pixel for 4-channel 16 bit/pixel input images with 32-bit floating point
  -- * output.  
  -- * Result 32-bit floating point pixel is equal to the sum of the corresponding and
  -- * neighboring column pixel values in a mask region of the source image defined by
  -- * nMaskSize and nAnchor. 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *        source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSumWindowColumn_16s32f_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:2952
   pragma Import (C, nppiSumWindowColumn_16s32f_C4R, "nppiSumWindowColumn_16s32f_C4R");

  --*
  -- * One channel 8-bit unsigned 1D (row) sum to 32f.
  -- *
  -- * Apply Row Window Summation filter over a 1D mask region around each source
  -- * pixel for 1-channel 8-bit pixel input images with 32-bit floating point output.  
  -- * Result 32-bit floating point pixel is equal to the sum of the corresponding and
  -- * neighboring row pixel values in a mask region of the source image defined
  -- * by iKernelDim and iAnchorX. 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *        source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSumWindowRow_8u32f_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:2976
   pragma Import (C, nppiSumWindowRow_8u32f_C1R, "nppiSumWindowRow_8u32f_C1R");

  --*
  -- * Three channel 8-bit unsigned 1D (row) sum to 32f.
  -- *
  -- * Apply Row Window Summation filter over a 1D mask region around each source
  -- * pixel for 3-channel 8-bit pixel input images with 32-bit floating point output.  
  -- * Result 32-bit floating point pixel is equal to the sum of the corresponding and
  -- * neighboring row pixel values in a mask region of the source image defined
  -- * by iKernelDim and iAnchorX. 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *        source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSumWindowRow_8u32f_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:3000
   pragma Import (C, nppiSumWindowRow_8u32f_C3R, "nppiSumWindowRow_8u32f_C3R");

  --*
  -- * Four channel 8-bit unsigned 1D (row) sum to 32f.
  -- *
  -- * Apply Row Window Summation filter over a 1D mask region around each source
  -- * pixel for 4-channel 8-bit pixel input images with 32-bit floating point output.  
  -- * Result 32-bit floating point pixel is equal to the sum of the corresponding and
  -- * neighboring row pixel values in a mask region of the source image defined
  -- * by iKernelDim and iAnchorX. 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *        source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSumWindowRow_8u32f_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:3024
   pragma Import (C, nppiSumWindowRow_8u32f_C4R, "nppiSumWindowRow_8u32f_C4R");

  --*
  -- * One channel 16-bit unsigned 1D (row) sum to 32f.
  -- *
  -- * Apply Row Window Summation filter over a 1D mask region around each source
  -- * pixel for 1-channel 16-bit pixel input images with 32-bit floating point output.  
  -- * Result 32-bit floating point pixel is equal to the sum of the corresponding and
  -- * neighboring row pixel values in a mask region of the source image defined
  -- * by iKernelDim and iAnchorX. 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *        source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSumWindowRow_16u32f_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:3048
   pragma Import (C, nppiSumWindowRow_16u32f_C1R, "nppiSumWindowRow_16u32f_C1R");

  --*
  -- * Three channel 16-bit unsigned 1D (row) sum to 32f.
  -- *
  -- * Apply Row Window Summation filter over a 1D mask region around each source
  -- * pixel for 3-channel 16-bit pixel input images with 32-bit floating point output.  
  -- * Result 32-bit floating point pixel is equal to the sum of the corresponding and
  -- * neighboring row pixel values in a mask region of the source image defined
  -- * by iKernelDim and iAnchorX. 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *        source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSumWindowRow_16u32f_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:3072
   pragma Import (C, nppiSumWindowRow_16u32f_C3R, "nppiSumWindowRow_16u32f_C3R");

  --*
  -- * Four channel 16-bit unsigned 1D (row) sum to 32f.
  -- *
  -- * Apply Row Window Summation filter over a 1D mask region around each source
  -- * pixel for 4-channel 16-bit pixel input images with 32-bit floating point output.  
  -- * Result 32-bit floating point pixel is equal to the sum of the corresponding and
  -- * neighboring row pixel values in a mask region of the source image defined
  -- * by iKernelDim and iAnchorX. 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *        source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSumWindowRow_16u32f_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:3096
   pragma Import (C, nppiSumWindowRow_16u32f_C4R, "nppiSumWindowRow_16u32f_C4R");

  --*
  -- * One channel 16-bit signed 1D (row) sum to 32f.
  -- *
  -- * Apply Row Window Summation filter over a 1D mask region around each source
  -- * pixel for 1-channel 16-bit pixel input images with 32-bit floating point output.  
  -- * Result 32-bit floating point pixel is equal to the sum of the corresponding and
  -- * neighboring row pixel values in a mask region of the source image defined
  -- * by iKernelDim and iAnchorX. 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *        source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSumWindowRow_16s32f_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:3120
   pragma Import (C, nppiSumWindowRow_16s32f_C1R, "nppiSumWindowRow_16s32f_C1R");

  --*
  -- * Three channel 16-bit signed 1D (row) sum to 32f.
  -- *
  -- * Apply Row Window Summation filter over a 1D mask region around each source
  -- * pixel for 3-channel 16-bit pixel input images with 32-bit floating point output.  
  -- * Result 32-bit floating point pixel is equal to the sum of the corresponding and
  -- * neighboring row pixel values in a mask region of the source image defined
  -- * by iKernelDim and iAnchorX. 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *        source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSumWindowRow_16s32f_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:3143
   pragma Import (C, nppiSumWindowRow_16s32f_C3R, "nppiSumWindowRow_16s32f_C3R");

  --*
  -- * Four channel 16-bit signed 1D (row) sum to 32f.
  -- *
  -- * Apply Row Window Summation filter over a 1D mask region around each source
  -- * pixel for 4-channel 16-bit pixel input images with 32-bit floating point output.  
  -- * Result 32-bit floating point pixel is equal to the sum of the corresponding and
  -- * neighboring row pixel values in a mask region of the source image defined
  -- * by iKernelDim and iAnchorX. 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *        source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSumWindowRow_16s32f_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:3167
   pragma Import (C, nppiSumWindowRow_16s32f_C4R, "nppiSumWindowRow_16s32f_C4R");

  --* @}  
  --* @} image_1D_window_sum  
  --* @defgroup image_1D_window_sum_border 1D Window Sum with Border Control
  -- *
  -- * @{
  -- *
  --  

  --* @name 1D Window Sum Border
  -- * 1D mask Window Sum for 8 and 16 bit images with border control. 
  -- * If any portion of the mask overlaps the source image boundary the requested border type operation 
  -- * is applied to all mask pixels which fall outside of the source image.
  -- *
  -- * Currently only the NPP_BORDER_REPLICATE border type operation is supported.
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * One channel 8-bit unsigned 1D (column) sum to 32f with border control.
  -- *
  -- * Apply Column Window Summation filter over a 1D mask region around each
  -- * source pixel for 1-channel 8 bit/pixel input images with 32-bit floating point
  -- * output.  
  -- * Result 32-bit floating point pixel is equal to the sum of the corresponding and
  -- * neighboring column pixel values in a mask region of the source image defined by
  -- * nMaskSize and nAnchor. 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *        source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSumWindowColumnBorder_8u32f_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:3214
   pragma Import (C, nppiSumWindowColumnBorder_8u32f_C1R, "nppiSumWindowColumnBorder_8u32f_C1R");

  --*
  -- * Three channel 8-bit unsigned 1D (column) sum to 32f with border control.
  -- *
  -- * Apply Column Window Summation filter over a 1D mask region around each
  -- * source pixel for 3-channel 8 bit/pixel input images with 32-bit floating point
  -- * output.  
  -- * Result 32-bit floating point pixel is equal to the sum of the corresponding and
  -- * neighboring column pixel values in a mask region of the source image defined by
  -- * nMaskSize and nAnchor. 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *        source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSumWindowColumnBorder_8u32f_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:3242
   pragma Import (C, nppiSumWindowColumnBorder_8u32f_C3R, "nppiSumWindowColumnBorder_8u32f_C3R");

  --*
  -- * Four channel 8-bit unsigned 1D (column) sum to 32f with border control.
  -- *
  -- * Apply Column Window Summation filter over a 1D mask region around each
  -- * source pixel for 4-channel 8 bit/pixel input images with 32-bit floating point
  -- * output.  
  -- * Result 32-bit floating point pixel is equal to the sum of the corresponding and
  -- * neighboring column pixel values in a mask region of the source image defined by
  -- * nMaskSize and nAnchor. 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *        source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSumWindowColumnBorder_8u32f_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:3270
   pragma Import (C, nppiSumWindowColumnBorder_8u32f_C4R, "nppiSumWindowColumnBorder_8u32f_C4R");

  --*
  -- * One channel 16-bit unsigned 1D (column) sum to 32f with border control.
  -- *
  -- * Apply Column Window Summation filter over a 1D mask region around each
  -- * source pixel for 1-channel 16 bit/pixel input images with 32-bit floating point
  -- * output.  
  -- * Result 32-bit floating point pixel is equal to the sum of the corresponding and
  -- * neighboring column pixel values in a mask region of the source image defined by
  -- * nMaskSize and nAnchor. 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *        source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSumWindowColumnBorder_16u32f_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:3297
   pragma Import (C, nppiSumWindowColumnBorder_16u32f_C1R, "nppiSumWindowColumnBorder_16u32f_C1R");

  --*
  -- * Three channel 16-bit unsigned 1D (column) sum to 32f with border control.
  -- *
  -- * Apply Column Window Summation filter over a 1D mask region around each
  -- * source pixel for 3-channel 16 bit/pixel input images with 32-bit floating point
  -- * output.  
  -- * Result 32-bit floating point pixel is equal to the sum of the corresponding and
  -- * neighboring column pixel values in a mask region of the source image defined by
  -- * nMaskSize and nAnchor. 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *        source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSumWindowColumnBorder_16u32f_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:3324
   pragma Import (C, nppiSumWindowColumnBorder_16u32f_C3R, "nppiSumWindowColumnBorder_16u32f_C3R");

  --*
  -- * Four channel 16-bit unsigned 1D (column) sum to 32f with border control.
  -- *
  -- * Apply Column Window Summation filter over a 1D mask region around each
  -- * source pixel for 4-channel 16 bit/pixel input images with 32-bit floating point
  -- * output.  
  -- * Result 32-bit floating point pixel is equal to the sum of the corresponding and
  -- * neighboring column pixel values in a mask region of the source image defined by
  -- * nMaskSize and nAnchor. 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *        source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSumWindowColumnBorder_16u32f_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:3351
   pragma Import (C, nppiSumWindowColumnBorder_16u32f_C4R, "nppiSumWindowColumnBorder_16u32f_C4R");

  --*
  -- * One channel 16-bit signed 1D (column) sum to 32f with border control.
  -- *
  -- * Apply Column Window Summation filter over a 1D mask region around each
  -- * source pixel for 1-channel 16 bit/pixel input images with 32-bit floating point
  -- * output.  
  -- * Result 32-bit floating point pixel is equal to the sum of the corresponding and
  -- * neighboring column pixel values in a mask region of the source image defined by
  -- * nMaskSize and nAnchor. 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *        source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSumWindowColumnBorder_16s32f_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:3378
   pragma Import (C, nppiSumWindowColumnBorder_16s32f_C1R, "nppiSumWindowColumnBorder_16s32f_C1R");

  --*
  -- * Three channel 16-bit signed 1D (column) sum to 32f with border control.
  -- *
  -- * Apply Column Window Summation filter over a 1D mask region around each
  -- * source pixel for 1-channel 16 bit/pixel input images with 32-bit floating point
  -- * output.  
  -- * Result 32-bit floating point pixel is equal to the sum of the corresponding and
  -- * neighboring column pixel values in a mask region of the source image defined by
  -- * nMaskSize and nAnchor. 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *        source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSumWindowColumnBorder_16s32f_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:3405
   pragma Import (C, nppiSumWindowColumnBorder_16s32f_C3R, "nppiSumWindowColumnBorder_16s32f_C3R");

  --*
  -- * Four channel 16-bit signed 1D (column) sum to 32f with border control.
  -- *
  -- * Apply Column Window Summation filter over a 1D mask region around each
  -- * source pixel for 4-channel 16 bit/pixel input images with 32-bit floating point
  -- * output.  
  -- * Result 32-bit floating point pixel is equal to the sum of the corresponding and
  -- * neighboring column pixel values in a mask region of the source image defined by
  -- * nMaskSize and nAnchor. 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor Y offset of the kernel origin frame of reference relative to the
  -- *        source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSumWindowColumnBorder_16s32f_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:3432
   pragma Import (C, nppiSumWindowColumnBorder_16s32f_C4R, "nppiSumWindowColumnBorder_16s32f_C4R");

  --*
  -- * One channel 8-bit unsigned 1D (row) sum to 32f with border control.
  -- *
  -- * Apply Row Window Summation filter over a 1D mask region around each source
  -- * pixel for 1-channel 8-bit pixel input images with 32-bit floating point output.  
  -- * Result 32-bit floating point pixel is equal to the sum of the corresponding and
  -- * neighboring row pixel values in a mask region of the source image defined
  -- * by iKernelDim and iAnchorX. 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *        source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSumWindowRowBorder_8u32f_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:3459
   pragma Import (C, nppiSumWindowRowBorder_8u32f_C1R, "nppiSumWindowRowBorder_8u32f_C1R");

  --*
  -- * Three channel 8-bit unsigned 1D (row) sum to 32f with border control.
  -- *
  -- * Apply Row Window Summation filter over a 1D mask region around each source
  -- * pixel for 3-channel 8-bit pixel input images with 32-bit floating point output.  
  -- * Result 32-bit floating point pixel is equal to the sum of the corresponding and
  -- * neighboring row pixel values in a mask region of the source image defined
  -- * by iKernelDim and iAnchorX. 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *        source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSumWindowRowBorder_8u32f_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:3486
   pragma Import (C, nppiSumWindowRowBorder_8u32f_C3R, "nppiSumWindowRowBorder_8u32f_C3R");

  --*
  -- * Four channel 8-bit unsigned 1D (row) sum to 32f with border control.
  -- *
  -- * Apply Row Window Summation filter over a 1D mask region around each source
  -- * pixel for 4-channel 8-bit pixel input images with 32-bit floating point output.  
  -- * Result 32-bit floating point pixel is equal to the sum of the corresponding and
  -- * neighboring row pixel values in a mask region of the source image defined
  -- * by iKernelDim and iAnchorX. 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *        source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSumWindowRowBorder_8u32f_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:3513
   pragma Import (C, nppiSumWindowRowBorder_8u32f_C4R, "nppiSumWindowRowBorder_8u32f_C4R");

  --*
  -- * One channel 16-bit unsigned 1D (row) sum to 32f with border control.
  -- *
  -- * Apply Row Window Summation filter over a 1D mask region around each source
  -- * pixel for 1-channel 16-bit pixel input images with 32-bit floating point output.  
  -- * Result 32-bit floating point pixel is equal to the sum of the corresponding and
  -- * neighboring row pixel values in a mask region of the source image defined
  -- * by iKernelDim and iAnchorX. 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *        source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSumWindowRowBorder_16u32f_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:3540
   pragma Import (C, nppiSumWindowRowBorder_16u32f_C1R, "nppiSumWindowRowBorder_16u32f_C1R");

  --*
  -- * Three channel 16-bit unsigned 1D (row) sum to 32f with border control.
  -- *
  -- * Apply Row Window Summation filter over a 1D mask region around each source
  -- * pixel for 3-channel 16-bit pixel input images with 32-bit floating point output.  
  -- * Result 32-bit floating point pixel is equal to the sum of the corresponding and
  -- * neighboring row pixel values in a mask region of the source image defined
  -- * by iKernelDim and iAnchorX. 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *        source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSumWindowRowBorder_16u32f_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:3567
   pragma Import (C, nppiSumWindowRowBorder_16u32f_C3R, "nppiSumWindowRowBorder_16u32f_C3R");

  --*
  -- * Four channel 16-bit unsigned 1D (row) sum to 32f with border control.
  -- *
  -- * Apply Row Window Summation filter over a 1D mask region around each source
  -- * pixel for 4-channel 16-bit pixel input images with 32-bit floating point output.  
  -- * Result 32-bit floating point pixel is equal to the sum of the corresponding and
  -- * neighboring row pixel values in a mask region of the source image defined
  -- * by iKernelDim and iAnchorX. 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *        source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSumWindowRowBorder_16u32f_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:3594
   pragma Import (C, nppiSumWindowRowBorder_16u32f_C4R, "nppiSumWindowRowBorder_16u32f_C4R");

  --*
  -- * One channel 16-bit signed 1D (row) sum to 32f with border control.
  -- *
  -- * Apply Row Window Summation filter over a 1D mask region around each source
  -- * pixel for 1-channel 16-bit pixel input images with 32-bit floating point output.  
  -- * Result 32-bit floating point pixel is equal to the sum of the corresponding and
  -- * neighboring row pixel values in a mask region of the source image defined
  -- * by iKernelDim and iAnchorX. 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *        source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSumWindowRowBorder_16s32f_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:3621
   pragma Import (C, nppiSumWindowRowBorder_16s32f_C1R, "nppiSumWindowRowBorder_16s32f_C1R");

  --*
  -- * Three channel 16-bit signed 1D (row) sum to 32f with border control.
  -- *
  -- * Apply Row Window Summation filter over a 1D mask region around each source
  -- * pixel for 3-channel 16-bit pixel input images with 32-bit floating point output.  
  -- * Result 32-bit floating point pixel is equal to the sum of the corresponding and
  -- * neighboring row pixel values in a mask region of the source image defined
  -- * by iKernelDim and iAnchorX. 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *        source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSumWindowRowBorder_16s32f_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:3647
   pragma Import (C, nppiSumWindowRowBorder_16s32f_C3R, "nppiSumWindowRowBorder_16s32f_C3R");

  --*
  -- * Four channel 16-bit signed 1D (row) sum to 32f with border control.
  -- *
  -- * Apply Row Window Summation filter over a 1D mask region around each source
  -- * pixel for 4-channel 16-bit pixel input images with 32-bit floating point output.  
  -- * Result 32-bit floating point pixel is equal to the sum of the corresponding and
  -- * neighboring row pixel values in a mask region of the source image defined
  -- * by iKernelDim and iAnchorX. 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oROI \ref roi_specification.
  -- * \param nMaskSize Length of the linear kernel array.
  -- * \param nAnchor X offset of the kernel origin frame of reference relative to the
  -- *        source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiSumWindowRowBorder_16s32f_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oROI : nppdefs_h.NppiSize;
      nMaskSize : nppdefs_h.Npp32s;
      nAnchor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:3674
   pragma Import (C, nppiSumWindowRowBorder_16s32f_C4R, "nppiSumWindowRowBorder_16s32f_C4R");

  --* @}  
  --* @} image_1D_window_sum_border  
  --* @defgroup image_convolution Convolution
  -- *
  -- * @{
  -- *
  --  

  --* @name Filter
  -- * General purpose 2D convolution filter.
  -- *
  -- * Pixels under the mask are multiplied by the respective weights in the mask
  -- * and the results are summed. Before writing the result pixel the sum is scaled
  -- * back via division by nDivisor.
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned convolution filter.
  -- * 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      nDivisor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:3718
   pragma Import (C, nppiFilter_8u_C1R, "nppiFilter_8u_C1R");

  --*
  -- * Three channel 8-bit unsigned convolution filter.
  -- * 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      nDivisor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:3741
   pragma Import (C, nppiFilter_8u_C3R, "nppiFilter_8u_C3R");

  --*
  -- * Four channel channel 8-bit unsigned convolution filter.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      nDivisor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:3763
   pragma Import (C, nppiFilter_8u_C4R, "nppiFilter_8u_C4R");

  --*
  -- * Four channel 8-bit unsigned convolution filter, ignoring alpha channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      nDivisor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:3785
   pragma Import (C, nppiFilter_8u_AC4R, "nppiFilter_8u_AC4R");

  --*
  -- * Single channel 16-bit unsigned convolution filter.
  -- * 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      nDivisor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:3808
   pragma Import (C, nppiFilter_16u_C1R, "nppiFilter_16u_C1R");

  --*
  -- * Three channel 16-bit unsigned convolution filter.
  -- * 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter_16u_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      nDivisor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:3831
   pragma Import (C, nppiFilter_16u_C3R, "nppiFilter_16u_C3R");

  --*
  -- * Four channel channel 16-bit unsigned convolution filter.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter_16u_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      nDivisor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:3853
   pragma Import (C, nppiFilter_16u_C4R, "nppiFilter_16u_C4R");

  --*
  -- * Four channel 16-bit unsigned convolution filter, ignoring alpha channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter_16u_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      nDivisor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:3875
   pragma Import (C, nppiFilter_16u_AC4R, "nppiFilter_16u_AC4R");

  --*
  -- * Single channel 16-bit convolution filter.
  -- * 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      nDivisor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:3898
   pragma Import (C, nppiFilter_16s_C1R, "nppiFilter_16s_C1R");

  --*
  -- * Three channel 16-bit convolution filter.
  -- * 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      nDivisor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:3921
   pragma Import (C, nppiFilter_16s_C3R, "nppiFilter_16s_C3R");

  --*
  -- * Four channel channel 16-bit convolution filter.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      nDivisor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:3943
   pragma Import (C, nppiFilter_16s_C4R, "nppiFilter_16s_C4R");

  --*
  -- * Four channel 16-bit convolution filter, ignoring alpha channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      nDivisor : nppdefs_h.Npp32s) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:3965
   pragma Import (C, nppiFilter_16s_AC4R, "nppiFilter_16s_AC4R");

  --*
  -- * Single channel 32-bit float convolution filter.
  -- * 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:3985
   pragma Import (C, nppiFilter_32f_C1R, "nppiFilter_32f_C1R");

  --*
  -- * Two channel 32-bit float convolution filter.
  -- * 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter_32f_C2R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4005
   pragma Import (C, nppiFilter_32f_C2R, "nppiFilter_32f_C2R");

  --*
  -- * Three channel 32-bit float convolution filter.
  -- * 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4025
   pragma Import (C, nppiFilter_32f_C3R, "nppiFilter_32f_C3R");

  --*
  -- * Four channel 32-bit float convolution filter.
  -- * 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4045
   pragma Import (C, nppiFilter_32f_C4R, "nppiFilter_32f_C4R");

  --*
  -- * Four channel 32-bit float convolution filter, ignoring alpha channel.
  -- * 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4065
   pragma Import (C, nppiFilter_32f_AC4R, "nppiFilter_32f_AC4R");

  --*
  -- * Single channel 64-bit float convolution filter.
  -- * 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter_64f_C1R
     (pSrc : access nppdefs_h.Npp64f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp64f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp64f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4085
   pragma Import (C, nppiFilter_64f_C1R, "nppiFilter_64f_C1R");

  --* @} Filter  
  --* @name Filter32f
  -- * General purpose 2D convolution filter using floating-point weights.
  -- *
  -- * Pixels under the mask are multiplied by the respective weights in the mask
  -- * and the results are summed. 
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned convolution filter.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter32f_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4118
   pragma Import (C, nppiFilter32f_8u_C1R, "nppiFilter32f_8u_C1R");

  --*
  -- * Two channel 8-bit unsigned convolution filter.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter32f_8u_C2R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4137
   pragma Import (C, nppiFilter32f_8u_C2R, "nppiFilter32f_8u_C2R");

  --*
  -- * Three channel 8-bit unsigned convolution filter.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter32f_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4156
   pragma Import (C, nppiFilter32f_8u_C3R, "nppiFilter32f_8u_C3R");

  --*
  -- * Four channel 8-bit unsigned convolution filter.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter32f_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4175
   pragma Import (C, nppiFilter32f_8u_C4R, "nppiFilter32f_8u_C4R");

  --*
  -- * Four channel 8-bit unsigned convolution filter, ignorint alpha channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter32f_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4194
   pragma Import (C, nppiFilter32f_8u_AC4R, "nppiFilter32f_8u_AC4R");

  --*
  -- * Single channel 8-bit signed convolution filter.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter32f_8s_C1R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      pDst : access nppdefs_h.Npp8s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4213
   pragma Import (C, nppiFilter32f_8s_C1R, "nppiFilter32f_8s_C1R");

  --*
  -- * Two channel 8-bit signed convolution filter.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter32f_8s_C2R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      pDst : access nppdefs_h.Npp8s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4232
   pragma Import (C, nppiFilter32f_8s_C2R, "nppiFilter32f_8s_C2R");

  --*
  -- * Three channel 8-bit signed convolution filter.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter32f_8s_C3R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      pDst : access nppdefs_h.Npp8s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4251
   pragma Import (C, nppiFilter32f_8s_C3R, "nppiFilter32f_8s_C3R");

  --*
  -- * Four channel 8-bit signed convolution filter.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter32f_8s_C4R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      pDst : access nppdefs_h.Npp8s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4270
   pragma Import (C, nppiFilter32f_8s_C4R, "nppiFilter32f_8s_C4R");

  --*
  -- * Four channel 8-bit signed convolution filter, ignoring alpha channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter32f_8s_AC4R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      pDst : access nppdefs_h.Npp8s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4289
   pragma Import (C, nppiFilter32f_8s_AC4R, "nppiFilter32f_8s_AC4R");

  --*
  -- * Single channel 16-bit unsigned convolution filter.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter32f_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4308
   pragma Import (C, nppiFilter32f_16u_C1R, "nppiFilter32f_16u_C1R");

  --*
  -- * Three channel 16-bit unsigned convolution filter.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter32f_16u_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4327
   pragma Import (C, nppiFilter32f_16u_C3R, "nppiFilter32f_16u_C3R");

  --*
  -- * Four channel 16-bit unsigned convolution filter.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter32f_16u_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4346
   pragma Import (C, nppiFilter32f_16u_C4R, "nppiFilter32f_16u_C4R");

  --*
  -- * Four channel 16-bit unsigned convolution filter, ignoring alpha channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter32f_16u_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4365
   pragma Import (C, nppiFilter32f_16u_AC4R, "nppiFilter32f_16u_AC4R");

  --*
  -- * Single channel 16-bit convolution filter.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter32f_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4384
   pragma Import (C, nppiFilter32f_16s_C1R, "nppiFilter32f_16s_C1R");

  --*
  -- * Three channel 16-bit convolution filter.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter32f_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4403
   pragma Import (C, nppiFilter32f_16s_C3R, "nppiFilter32f_16s_C3R");

  --*
  -- * Four channel 16-bit convolution filter.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter32f_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4422
   pragma Import (C, nppiFilter32f_16s_C4R, "nppiFilter32f_16s_C4R");

  --*
  -- * Four channel 16-bit convolution filter, ignoring alpha channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter32f_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4441
   pragma Import (C, nppiFilter32f_16s_AC4R, "nppiFilter32f_16s_AC4R");

  --*
  -- * Single channel 32-bit convolution filter.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter32f_32s_C1R
     (pSrc : access nppdefs_h.Npp32s;
      nSrcStep : int;
      pDst : access nppdefs_h.Npp32s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4461
   pragma Import (C, nppiFilter32f_32s_C1R, "nppiFilter32f_32s_C1R");

  --*
  -- * Three channel 32-bit convolution filter.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter32f_32s_C3R
     (pSrc : access nppdefs_h.Npp32s;
      nSrcStep : int;
      pDst : access nppdefs_h.Npp32s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4480
   pragma Import (C, nppiFilter32f_32s_C3R, "nppiFilter32f_32s_C3R");

  --*
  -- * Four channel 32-bit convolution filter.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter32f_32s_C4R
     (pSrc : access nppdefs_h.Npp32s;
      nSrcStep : int;
      pDst : access nppdefs_h.Npp32s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4499
   pragma Import (C, nppiFilter32f_32s_C4R, "nppiFilter32f_32s_C4R");

  --*
  -- * Four channel 32-bit convolution filter, ignoring alpha channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter32f_32s_AC4R
     (pSrc : access nppdefs_h.Npp32s;
      nSrcStep : int;
      pDst : access nppdefs_h.Npp32s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4518
   pragma Import (C, nppiFilter32f_32s_AC4R, "nppiFilter32f_32s_AC4R");

  --*
  -- * Single channel 8-bit unsigned to 16-bit signed convolution filter.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter32f_8u16s_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4538
   pragma Import (C, nppiFilter32f_8u16s_C1R, "nppiFilter32f_8u16s_C1R");

  --*
  -- * Three channel 8-bit unsigned to 16-bit signed convolution filter.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter32f_8u16s_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4557
   pragma Import (C, nppiFilter32f_8u16s_C3R, "nppiFilter32f_8u16s_C3R");

  --*
  -- * Four channel 8-bit unsigned to 16-bit signed convolution filter.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter32f_8u16s_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4576
   pragma Import (C, nppiFilter32f_8u16s_C4R, "nppiFilter32f_8u16s_C4R");

  --*
  -- * Four channel 8-bit unsigned to 16-bit signed convolution filter, ignoring alpha channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter32f_8u16s_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4595
   pragma Import (C, nppiFilter32f_8u16s_AC4R, "nppiFilter32f_8u16s_AC4R");

  --*
  -- * Single channel 8-bit to 16-bit signed convolution filter.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter32f_8s16s_C1R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4614
   pragma Import (C, nppiFilter32f_8s16s_C1R, "nppiFilter32f_8s16s_C1R");

  --*
  -- * Three channel 8-bit to 16-bit signed convolution filter.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter32f_8s16s_C3R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4633
   pragma Import (C, nppiFilter32f_8s16s_C3R, "nppiFilter32f_8s16s_C3R");

  --*
  -- * Four channel 8-bit to 16-bit signed convolution filter.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter32f_8s16s_C4R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4652
   pragma Import (C, nppiFilter32f_8s16s_C4R, "nppiFilter32f_8s16s_C4R");

  --*
  -- * Four channel 8-bit to 16-bit signed convolution filter, ignoring alpha channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilter32f_8s16s_AC4R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4671
   pragma Import (C, nppiFilter32f_8s16s_AC4R, "nppiFilter32f_8s16s_AC4R");

  --* @} Filter32f  
  --* @name FilterBorder
  -- * General purpose 2D convolution filter with border control.
  -- *
  -- * Pixels under the mask are multiplied by the respective weights in the mask
  -- * and the results are summed. Before writing the result pixel the sum is scaled
  -- * back via division by nDivisor. If any portion of the mask overlaps the source
  -- * image boundary the requested border type operation is applied to all mask pixels
  -- * which fall outside of the source image.
  -- *
  -- * Currently only the NPP_BORDER_REPLICATE border type operation is supported.
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned convolution filter with border control.
  -- * 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      nDivisor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4715
   pragma Import (C, nppiFilterBorder_8u_C1R, "nppiFilterBorder_8u_C1R");

  --*
  -- * Three channel 8-bit unsigned convolution filter with border control.
  -- * 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      nDivisor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4741
   pragma Import (C, nppiFilterBorder_8u_C3R, "nppiFilterBorder_8u_C3R");

  --*
  -- * Four channel channel 8-bit unsigned convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      nDivisor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4766
   pragma Import (C, nppiFilterBorder_8u_C4R, "nppiFilterBorder_8u_C4R");

  --*
  -- * Four channel 8-bit unsigned convolution filter with border control, ignoring alpha channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      nDivisor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4791
   pragma Import (C, nppiFilterBorder_8u_AC4R, "nppiFilterBorder_8u_AC4R");

  --*
  -- * Single channel 16-bit unsigned convolution filter with border control.
  -- * 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      nDivisor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4817
   pragma Import (C, nppiFilterBorder_16u_C1R, "nppiFilterBorder_16u_C1R");

  --*
  -- * Three channel 16-bit unsigned convolution filter with border control.
  -- * 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder_16u_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      nDivisor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4843
   pragma Import (C, nppiFilterBorder_16u_C3R, "nppiFilterBorder_16u_C3R");

  --*
  -- * Four channel channel 16-bit unsigned convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder_16u_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      nDivisor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4868
   pragma Import (C, nppiFilterBorder_16u_C4R, "nppiFilterBorder_16u_C4R");

  --*
  -- * Four channel 16-bit unsigned convolution filter with border control, ignoring alpha channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder_16u_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      nDivisor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4893
   pragma Import (C, nppiFilterBorder_16u_AC4R, "nppiFilterBorder_16u_AC4R");

  --*
  -- * Single channel 16-bit convolution filter with border control.
  -- * 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      nDivisor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4919
   pragma Import (C, nppiFilterBorder_16s_C1R, "nppiFilterBorder_16s_C1R");

  --*
  -- * Three channel 16-bit convolution filter with border control.
  -- * 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      nDivisor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4945
   pragma Import (C, nppiFilterBorder_16s_C3R, "nppiFilterBorder_16s_C3R");

  --*
  -- * Four channel channel 16-bit convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      nDivisor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4970
   pragma Import (C, nppiFilterBorder_16s_C4R, "nppiFilterBorder_16s_C4R");

  --*
  -- * Four channel 16-bit convolution filter with border control, ignoring alpha channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param nDivisor The factor by which the convolved summation from the Filter
  -- *        operation should be divided.  If equal to the sum of coefficients,
  -- *        this will keep the maximum result value within full scale.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32s;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      nDivisor : nppdefs_h.Npp32s;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:4995
   pragma Import (C, nppiFilterBorder_16s_AC4R, "nppiFilterBorder_16s_AC4R");

  --*
  -- * Single channel 32-bit float convolution filter with border control.
  -- * 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:5018
   pragma Import (C, nppiFilterBorder_32f_C1R, "nppiFilterBorder_32f_C1R");

  --*
  -- * Two channel 32-bit float convolution filter with border control.
  -- * 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder_32f_C2R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:5041
   pragma Import (C, nppiFilterBorder_32f_C2R, "nppiFilterBorder_32f_C2R");

  --*
  -- * Three channel 32-bit float convolution filter with border control.
  -- * 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:5064
   pragma Import (C, nppiFilterBorder_32f_C3R, "nppiFilterBorder_32f_C3R");

  --*
  -- * Four channel 32-bit float convolution filter with border control.
  -- * 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:5087
   pragma Import (C, nppiFilterBorder_32f_C4R, "nppiFilterBorder_32f_C4R");

  --*
  -- * Four channel 32-bit float convolution filter with border control, ignoring alpha channel.
  -- * 
  -- *
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:5110
   pragma Import (C, nppiFilterBorder_32f_AC4R, "nppiFilterBorder_32f_AC4R");

  --* @} FilterBorder  
  --* @name FilterBorder32f
  -- * General purpose 2D convolution filter using floating-point weights with border control.
  -- *
  -- * Pixels under the mask are multiplied by the respective weights in the mask
  -- * and the results are summed. Before writing the result pixel the sum is scaled
  -- * back via division by nDivisor. If any portion of the mask overlaps the source
  -- * image boundary the requested border type operation is applied to all mask pixels
  -- * which fall outside of the source image.
  -- *
  -- * Currently only the NPP_BORDER_REPLICATE border type operation is supported.
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder32f_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:5150
   pragma Import (C, nppiFilterBorder32f_8u_C1R, "nppiFilterBorder32f_8u_C1R");

  --*
  -- * Two channel 8-bit unsigned convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder32f_8u_C2R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:5172
   pragma Import (C, nppiFilterBorder32f_8u_C2R, "nppiFilterBorder32f_8u_C2R");

  --*
  -- * Three channel 8-bit unsigned convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder32f_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:5194
   pragma Import (C, nppiFilterBorder32f_8u_C3R, "nppiFilterBorder32f_8u_C3R");

  --*
  -- * Four channel 8-bit unsigned convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder32f_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:5216
   pragma Import (C, nppiFilterBorder32f_8u_C4R, "nppiFilterBorder32f_8u_C4R");

  --*
  -- * Four channel 8-bit unsigned convolution filter with border control, ignorint alpha channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder32f_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:5238
   pragma Import (C, nppiFilterBorder32f_8u_AC4R, "nppiFilterBorder32f_8u_AC4R");

  --*
  -- * Single channel 8-bit signed convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder32f_8s_C1R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:5260
   pragma Import (C, nppiFilterBorder32f_8s_C1R, "nppiFilterBorder32f_8s_C1R");

  --*
  -- * Two channel 8-bit signed convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder32f_8s_C2R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:5282
   pragma Import (C, nppiFilterBorder32f_8s_C2R, "nppiFilterBorder32f_8s_C2R");

  --*
  -- * Three channel 8-bit signed convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder32f_8s_C3R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:5304
   pragma Import (C, nppiFilterBorder32f_8s_C3R, "nppiFilterBorder32f_8s_C3R");

  --*
  -- * Four channel 8-bit signed convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder32f_8s_C4R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:5326
   pragma Import (C, nppiFilterBorder32f_8s_C4R, "nppiFilterBorder32f_8s_C4R");

  --*
  -- * Four channel 8-bit signed convolution filter with border control, ignoring alpha channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder32f_8s_AC4R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:5348
   pragma Import (C, nppiFilterBorder32f_8s_AC4R, "nppiFilterBorder32f_8s_AC4R");

  --*
  -- * Single channel 16-bit unsigned convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder32f_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:5370
   pragma Import (C, nppiFilterBorder32f_16u_C1R, "nppiFilterBorder32f_16u_C1R");

  --*
  -- * Three channel 16-bit unsigned convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder32f_16u_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:5392
   pragma Import (C, nppiFilterBorder32f_16u_C3R, "nppiFilterBorder32f_16u_C3R");

  --*
  -- * Four channel 16-bit unsigned convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder32f_16u_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:5414
   pragma Import (C, nppiFilterBorder32f_16u_C4R, "nppiFilterBorder32f_16u_C4R");

  --*
  -- * Four channel 16-bit unsigned convolution filter with border control, ignoring alpha channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder32f_16u_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:5436
   pragma Import (C, nppiFilterBorder32f_16u_AC4R, "nppiFilterBorder32f_16u_AC4R");

  --*
  -- * Single channel 16-bit convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder32f_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:5458
   pragma Import (C, nppiFilterBorder32f_16s_C1R, "nppiFilterBorder32f_16s_C1R");

  --*
  -- * Three channel 16-bit convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder32f_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:5480
   pragma Import (C, nppiFilterBorder32f_16s_C3R, "nppiFilterBorder32f_16s_C3R");

  --*
  -- * Four channel 16-bit convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder32f_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:5502
   pragma Import (C, nppiFilterBorder32f_16s_C4R, "nppiFilterBorder32f_16s_C4R");

  --*
  -- * Four channel 16-bit convolution filter with border control, ignoring alpha channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder32f_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:5524
   pragma Import (C, nppiFilterBorder32f_16s_AC4R, "nppiFilterBorder32f_16s_AC4R");

  --*
  -- * Single channel 32-bit convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder32f_32s_C1R
     (pSrc : access nppdefs_h.Npp32s;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:5547
   pragma Import (C, nppiFilterBorder32f_32s_C1R, "nppiFilterBorder32f_32s_C1R");

  --*
  -- * Three channel 32-bit convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder32f_32s_C3R
     (pSrc : access nppdefs_h.Npp32s;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:5569
   pragma Import (C, nppiFilterBorder32f_32s_C3R, "nppiFilterBorder32f_32s_C3R");

  --*
  -- * Four channel 32-bit convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder32f_32s_C4R
     (pSrc : access nppdefs_h.Npp32s;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:5591
   pragma Import (C, nppiFilterBorder32f_32s_C4R, "nppiFilterBorder32f_32s_C4R");

  --*
  -- * Four channel 32-bit convolution filter with border control, ignoring alpha channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder32f_32s_AC4R
     (pSrc : access nppdefs_h.Npp32s;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:5613
   pragma Import (C, nppiFilterBorder32f_32s_AC4R, "nppiFilterBorder32f_32s_AC4R");

  --*
  -- * Single channel 8-bit unsigned to 16-bit signed convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder32f_8u16s_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:5636
   pragma Import (C, nppiFilterBorder32f_8u16s_C1R, "nppiFilterBorder32f_8u16s_C1R");

  --*
  -- * Three channel 8-bit unsigned to 16-bit signed convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder32f_8u16s_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:5658
   pragma Import (C, nppiFilterBorder32f_8u16s_C3R, "nppiFilterBorder32f_8u16s_C3R");

  --*
  -- * Four channel 8-bit unsigned to 16-bit signed convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder32f_8u16s_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:5680
   pragma Import (C, nppiFilterBorder32f_8u16s_C4R, "nppiFilterBorder32f_8u16s_C4R");

  --*
  -- * Four channel 8-bit unsigned to 16-bit signed convolution filter with border control, ignoring alpha channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder32f_8u16s_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:5702
   pragma Import (C, nppiFilterBorder32f_8u16s_AC4R, "nppiFilterBorder32f_8u16s_AC4R");

  --*
  -- * Single channel 8-bit to 16-bit signed convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder32f_8s16s_C1R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:5724
   pragma Import (C, nppiFilterBorder32f_8s16s_C1R, "nppiFilterBorder32f_8s16s_C1R");

  --*
  -- * Three channel 8-bit to 16-bit signed convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder32f_8s16s_C3R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:5746
   pragma Import (C, nppiFilterBorder32f_8s16s_C3R, "nppiFilterBorder32f_8s16s_C3R");

  --*
  -- * Four channel 8-bit to 16-bit signed convolution filter with border control.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder32f_8s16s_C4R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:5768
   pragma Import (C, nppiFilterBorder32f_8s16s_C4R, "nppiFilterBorder32f_8s16s_C4R");

  --*
  -- * Four channel 8-bit to 16-bit signed convolution filter with border control, ignoring alpha channel.
  -- * 
  -- * \param pSrc  \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param pKernel Pointer to the start address of the kernel coefficient array.
  -- *        Coeffcients are expected to be stored in reverse order.
  -- * \param oKernelSize Width and Height of the rectangular kernel.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBorder32f_8s16s_AC4R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      pKernel : access nppdefs_h.Npp32f;
      oKernelSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:5790
   pragma Import (C, nppiFilterBorder32f_8s16s_AC4R, "nppiFilterBorder32f_8s16s_AC4R");

  --* @} FilterBorder32f  
  --* @} image_convolution  
  --* @defgroup image_2D_fixed_linear_filters 2D Fixed Linear Filters
  -- *
  -- * @{
  -- *
  --  

  --* @name FilterBox
  -- *
  -- * Computes the average pixel values of the pixels under a rectangular mask.
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned box filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Avg operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference relative to
  -- *        the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBox_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:5827
   pragma Import (C, nppiFilterBox_8u_C1R, "nppiFilterBox_8u_C1R");

  --*
  -- * Three channel 8-bit unsigned box filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Avg operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference relative to
  -- *        the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBox_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:5845
   pragma Import (C, nppiFilterBox_8u_C3R, "nppiFilterBox_8u_C3R");

  --*
  -- * Four channel 8-bit unsigned box filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Avg operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference relative to
  -- *        the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBox_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:5863
   pragma Import (C, nppiFilterBox_8u_C4R, "nppiFilterBox_8u_C4R");

  --*
  -- * Four channel 8-bit unsigned box filter, ignorting alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Avg operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference relative to
  -- *        the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBox_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:5881
   pragma Import (C, nppiFilterBox_8u_AC4R, "nppiFilterBox_8u_AC4R");

  --*
  -- * Single channel 16-bit unsigned box filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Avg operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference relative to
  -- *        the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBox_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:5899
   pragma Import (C, nppiFilterBox_16u_C1R, "nppiFilterBox_16u_C1R");

  --*
  -- * Three channel 16-bit unsigned box filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Avg operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference relative to
  -- *        the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBox_16u_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:5917
   pragma Import (C, nppiFilterBox_16u_C3R, "nppiFilterBox_16u_C3R");

  --*
  -- * Four channel 16-bit unsigned box filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Avg operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference relative to
  -- *        the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBox_16u_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:5935
   pragma Import (C, nppiFilterBox_16u_C4R, "nppiFilterBox_16u_C4R");

  --*
  -- * Four channel 16-bit unsigned box filter, ignorting alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Avg operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference relative to
  -- *        the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBox_16u_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:5953
   pragma Import (C, nppiFilterBox_16u_AC4R, "nppiFilterBox_16u_AC4R");

  --*
  -- * Single channel 16-bit box filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Avg operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference relative to
  -- *        the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBox_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:5971
   pragma Import (C, nppiFilterBox_16s_C1R, "nppiFilterBox_16s_C1R");

  --*
  -- * Three channel 16-bit box filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Avg operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference relative to
  -- *        the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBox_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:5989
   pragma Import (C, nppiFilterBox_16s_C3R, "nppiFilterBox_16s_C3R");

  --*
  -- * Four channel 16-bit box filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Avg operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference relative to
  -- *        the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBox_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6007
   pragma Import (C, nppiFilterBox_16s_C4R, "nppiFilterBox_16s_C4R");

  --*
  -- * Four channel 16-bit box filter, ignorting alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Avg operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference relative to
  -- *        the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBox_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6025
   pragma Import (C, nppiFilterBox_16s_AC4R, "nppiFilterBox_16s_AC4R");

  --*
  -- * Single channel 32-bit floating-point box filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Avg operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference relative to
  -- *        the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBox_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6043
   pragma Import (C, nppiFilterBox_32f_C1R, "nppiFilterBox_32f_C1R");

  --*
  -- * Three channel 32-bit floating-point box filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Avg operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference relative to
  -- *        the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBox_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6061
   pragma Import (C, nppiFilterBox_32f_C3R, "nppiFilterBox_32f_C3R");

  --*
  -- * Four channel 32-bit floating-point box filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Avg operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference relative to
  -- *        the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBox_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6079
   pragma Import (C, nppiFilterBox_32f_C4R, "nppiFilterBox_32f_C4R");

  --*
  -- * Four channel 32-bit floating-point box filter, ignorting alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Avg operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference relative to
  -- *        the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBox_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6097
   pragma Import (C, nppiFilterBox_32f_AC4R, "nppiFilterBox_32f_AC4R");

  --*
  -- * Single channel 64-bit floating-point box filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Avg operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference relative to
  -- *        the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBox_64f_C1R
     (pSrc : access nppdefs_h.Npp64f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp64f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6115
   pragma Import (C, nppiFilterBox_64f_C1R, "nppiFilterBox_64f_C1R");

  --* @} FilterBox  
  --* @name FilterBoxBorder
  -- *
  -- * Computes the average pixel values of the pixels under a rectangular mask with border control.
  -- * If any portion of the mask overlaps the source image boundary the requested 
  -- * border type operation is applied to all mask pixels which fall outside of the source image.
  -- *
  -- * Currently only the NPP_BORDER_REPLICATE border type operation is supported. *
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned box filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Avg operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference relative to
  -- *        the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBoxBorder_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6150
   pragma Import (C, nppiFilterBoxBorder_8u_C1R, "nppiFilterBoxBorder_8u_C1R");

  --*
  -- * Three channel 8-bit unsigned box filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Avg operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference relative to
  -- *        the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBoxBorder_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6171
   pragma Import (C, nppiFilterBoxBorder_8u_C3R, "nppiFilterBoxBorder_8u_C3R");

  --*
  -- * Four channel 8-bit unsigned box filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Avg operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference relative to
  -- *        the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBoxBorder_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6192
   pragma Import (C, nppiFilterBoxBorder_8u_C4R, "nppiFilterBoxBorder_8u_C4R");

  --*
  -- * Four channel 8-bit unsigned box filter with border control, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Avg operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference relative to
  -- *        the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBoxBorder_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6213
   pragma Import (C, nppiFilterBoxBorder_8u_AC4R, "nppiFilterBoxBorder_8u_AC4R");

  --*
  -- * Single channel 16-bit unsigned box filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Avg operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference relative to
  -- *        the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBoxBorder_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6234
   pragma Import (C, nppiFilterBoxBorder_16u_C1R, "nppiFilterBoxBorder_16u_C1R");

  --*
  -- * Three channel 16-bit unsigned box filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Avg operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference relative to
  -- *        the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBoxBorder_16u_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6255
   pragma Import (C, nppiFilterBoxBorder_16u_C3R, "nppiFilterBoxBorder_16u_C3R");

  --*
  -- * Four channel 16-bit unsigned box filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Avg operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference relative to
  -- *        the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBoxBorder_16u_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6276
   pragma Import (C, nppiFilterBoxBorder_16u_C4R, "nppiFilterBoxBorder_16u_C4R");

  --*
  -- * Four channel 16-bit unsigned box filter with border control, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Avg operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference relative to
  -- *        the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBoxBorder_16u_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6297
   pragma Import (C, nppiFilterBoxBorder_16u_AC4R, "nppiFilterBoxBorder_16u_AC4R");

  --*
  -- * Single channel 16-bit box filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Avg operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference relative to
  -- *        the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBoxBorder_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6318
   pragma Import (C, nppiFilterBoxBorder_16s_C1R, "nppiFilterBoxBorder_16s_C1R");

  --*
  -- * Three channel 16-bit box filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Avg operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference relative to
  -- *        the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBoxBorder_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6339
   pragma Import (C, nppiFilterBoxBorder_16s_C3R, "nppiFilterBoxBorder_16s_C3R");

  --*
  -- * Four channel 16-bit box filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Avg operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference relative to
  -- *        the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBoxBorder_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6360
   pragma Import (C, nppiFilterBoxBorder_16s_C4R, "nppiFilterBoxBorder_16s_C4R");

  --*
  -- * Four channel 16-bit box filter with border control, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Avg operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference relative to
  -- *        the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBoxBorder_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6381
   pragma Import (C, nppiFilterBoxBorder_16s_AC4R, "nppiFilterBoxBorder_16s_AC4R");

  --*
  -- * Single channel 32-bit floating-point box filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Avg operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference relative to
  -- *        the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBoxBorder_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6402
   pragma Import (C, nppiFilterBoxBorder_32f_C1R, "nppiFilterBoxBorder_32f_C1R");

  --*
  -- * Three channel 32-bit floating-point box filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Avg operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference relative to
  -- *        the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBoxBorder_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6423
   pragma Import (C, nppiFilterBoxBorder_32f_C3R, "nppiFilterBoxBorder_32f_C3R");

  --*
  -- * Four channel 32-bit floating-point box filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Avg operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference relative to
  -- *        the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBoxBorder_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6444
   pragma Import (C, nppiFilterBoxBorder_32f_C4R, "nppiFilterBoxBorder_32f_C4R");

  --*
  -- * Four channel 32-bit floating-point box filter with border control, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Avg operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference relative to
  -- *        the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBoxBorder_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6465
   pragma Import (C, nppiFilterBoxBorder_32f_AC4R, "nppiFilterBoxBorder_32f_AC4R");

  --* @} FilterBoxBorder  
  --* @} image_2D_fixed_linear_filters  
  --* @defgroup image_rank_filters Rank Filters
  -- *
  -- * @{
  -- *
  --  

  --* @name ImageMax Filter
  -- *
  -- * Result pixel value is the maximum of pixel values under the rectangular
  -- * mask region.
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned maximum filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMax_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6502
   pragma Import (C, nppiFilterMax_8u_C1R, "nppiFilterMax_8u_C1R");

  --*
  -- * Three channel 8-bit unsigned maximum filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMax_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6520
   pragma Import (C, nppiFilterMax_8u_C3R, "nppiFilterMax_8u_C3R");

  --*
  -- * Four channel 8-bit unsigned maximum filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMax_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6538
   pragma Import (C, nppiFilterMax_8u_C4R, "nppiFilterMax_8u_C4R");

  --*
  -- * Four channel 8-bit unsigned maximum filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMax_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6556
   pragma Import (C, nppiFilterMax_8u_AC4R, "nppiFilterMax_8u_AC4R");

  --*
  -- * Single channel 16-bit unsigned maximum filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMax_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6574
   pragma Import (C, nppiFilterMax_16u_C1R, "nppiFilterMax_16u_C1R");

  --*
  -- * Three channel 16-bit unsigned maximum filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMax_16u_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6592
   pragma Import (C, nppiFilterMax_16u_C3R, "nppiFilterMax_16u_C3R");

  --*
  -- * Four channel 16-bit unsigned maximum filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMax_16u_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6610
   pragma Import (C, nppiFilterMax_16u_C4R, "nppiFilterMax_16u_C4R");

  --*
  -- * Four channel 16-bit unsigned maximum filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMax_16u_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6628
   pragma Import (C, nppiFilterMax_16u_AC4R, "nppiFilterMax_16u_AC4R");

  --*
  -- * Single channel 16-bit signed maximum filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMax_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6646
   pragma Import (C, nppiFilterMax_16s_C1R, "nppiFilterMax_16s_C1R");

  --*
  -- * Three channel 16-bit signed maximum filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMax_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6664
   pragma Import (C, nppiFilterMax_16s_C3R, "nppiFilterMax_16s_C3R");

  --*
  -- * Four channel 16-bit signed maximum filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMax_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6682
   pragma Import (C, nppiFilterMax_16s_C4R, "nppiFilterMax_16s_C4R");

  --*
  -- * Four channel 16-bit signed maximum filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMax_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6700
   pragma Import (C, nppiFilterMax_16s_AC4R, "nppiFilterMax_16s_AC4R");

  --*
  -- * Single channel 32-bit floating-point maximum filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMax_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6718
   pragma Import (C, nppiFilterMax_32f_C1R, "nppiFilterMax_32f_C1R");

  --*
  -- * Three channel 32-bit floating-point maximum filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMax_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6736
   pragma Import (C, nppiFilterMax_32f_C3R, "nppiFilterMax_32f_C3R");

  --*
  -- * Four channel 32-bit floating-point maximum filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMax_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6754
   pragma Import (C, nppiFilterMax_32f_C4R, "nppiFilterMax_32f_C4R");

  --*
  -- * Four channel 32-bit floating-point maximum filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMax_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6772
   pragma Import (C, nppiFilterMax_32f_AC4R, "nppiFilterMax_32f_AC4R");

  --* @} FilterMax  
  --* @name ImageMaxBorder Filter
  -- *
  -- * Result pixel value is the maximum of pixel values under the rectangular
  -- * mask region. If any portion of the mask overlaps the source
  -- * image boundary the requested border type operation is applied to all mask pixels
  -- * which fall outside of the source image.
  -- *
  -- * Currently only the NPP_BORDER_REPLICATE border type operation is supported.
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned maximum filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMaxBorder_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6808
   pragma Import (C, nppiFilterMaxBorder_8u_C1R, "nppiFilterMaxBorder_8u_C1R");

  --*
  -- * Three channel 8-bit unsigned maximum filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMaxBorder_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6829
   pragma Import (C, nppiFilterMaxBorder_8u_C3R, "nppiFilterMaxBorder_8u_C3R");

  --*
  -- * Four channel 8-bit unsigned maximum filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMaxBorder_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6850
   pragma Import (C, nppiFilterMaxBorder_8u_C4R, "nppiFilterMaxBorder_8u_C4R");

  --*
  -- * Four channel 8-bit unsigned maximum filter with border control, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMaxBorder_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6871
   pragma Import (C, nppiFilterMaxBorder_8u_AC4R, "nppiFilterMaxBorder_8u_AC4R");

  --*
  -- * Single channel 16-bit unsigned maximum filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMaxBorder_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6892
   pragma Import (C, nppiFilterMaxBorder_16u_C1R, "nppiFilterMaxBorder_16u_C1R");

  --*
  -- * Three channel 16-bit unsigned maximum filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMaxBorder_16u_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6913
   pragma Import (C, nppiFilterMaxBorder_16u_C3R, "nppiFilterMaxBorder_16u_C3R");

  --*
  -- * Four channel 16-bit unsigned maximum filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMaxBorder_16u_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6934
   pragma Import (C, nppiFilterMaxBorder_16u_C4R, "nppiFilterMaxBorder_16u_C4R");

  --*
  -- * Four channel 16-bit unsigned maximum filter with border control, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMaxBorder_16u_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6955
   pragma Import (C, nppiFilterMaxBorder_16u_AC4R, "nppiFilterMaxBorder_16u_AC4R");

  --*
  -- * Single channel 16-bit signed maximum filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMaxBorder_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6976
   pragma Import (C, nppiFilterMaxBorder_16s_C1R, "nppiFilterMaxBorder_16s_C1R");

  --*
  -- * Three channel 16-bit signed maximum filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMaxBorder_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:6997
   pragma Import (C, nppiFilterMaxBorder_16s_C3R, "nppiFilterMaxBorder_16s_C3R");

  --*
  -- * Four channel 16-bit signed maximum filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMaxBorder_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7018
   pragma Import (C, nppiFilterMaxBorder_16s_C4R, "nppiFilterMaxBorder_16s_C4R");

  --*
  -- * Four channel 16-bit signed maximum filter with border control, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMaxBorder_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7039
   pragma Import (C, nppiFilterMaxBorder_16s_AC4R, "nppiFilterMaxBorder_16s_AC4R");

  --*
  -- * Single channel 32-bit floating-point maximum filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMaxBorder_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7060
   pragma Import (C, nppiFilterMaxBorder_32f_C1R, "nppiFilterMaxBorder_32f_C1R");

  --*
  -- * Three channel 32-bit floating-point maximum filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMaxBorder_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7081
   pragma Import (C, nppiFilterMaxBorder_32f_C3R, "nppiFilterMaxBorder_32f_C3R");

  --*
  -- * Four channel 32-bit floating-point maximum filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMaxBorder_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7102
   pragma Import (C, nppiFilterMaxBorder_32f_C4R, "nppiFilterMaxBorder_32f_C4R");

  --*
  -- * Four channel 32-bit floating-point maximum filter with border control, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMaxBorder_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7123
   pragma Import (C, nppiFilterMaxBorder_32f_AC4R, "nppiFilterMaxBorder_32f_AC4R");

  --* @} FilterMaxBorder  
  --* @name ImageMin Filter
  -- *
  -- * Result pixel value is the minimum of pixel values under the rectangular
  -- * mask region.
  -- *
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned minimum filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMin_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7153
   pragma Import (C, nppiFilterMin_8u_C1R, "nppiFilterMin_8u_C1R");

  --*
  -- * Three channel 8-bit unsigned minimum filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMin_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7171
   pragma Import (C, nppiFilterMin_8u_C3R, "nppiFilterMin_8u_C3R");

  --*
  -- * Four channel 8-bit unsigned minimum filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMin_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7189
   pragma Import (C, nppiFilterMin_8u_C4R, "nppiFilterMin_8u_C4R");

  --*
  -- * Four channel 8-bit unsigned minimum filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMin_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7207
   pragma Import (C, nppiFilterMin_8u_AC4R, "nppiFilterMin_8u_AC4R");

  --*
  -- * Single channel 16-bit unsigned minimum filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMin_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7225
   pragma Import (C, nppiFilterMin_16u_C1R, "nppiFilterMin_16u_C1R");

  --*
  -- * Three channel 16-bit unsigned minimum filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMin_16u_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7243
   pragma Import (C, nppiFilterMin_16u_C3R, "nppiFilterMin_16u_C3R");

  --*
  -- * Four channel 16-bit unsigned minimum filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMin_16u_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7261
   pragma Import (C, nppiFilterMin_16u_C4R, "nppiFilterMin_16u_C4R");

  --*
  -- * Four channel 16-bit unsigned minimum filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMin_16u_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7279
   pragma Import (C, nppiFilterMin_16u_AC4R, "nppiFilterMin_16u_AC4R");

  --*
  -- * Single channel 16-bit signed minimum filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMin_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7297
   pragma Import (C, nppiFilterMin_16s_C1R, "nppiFilterMin_16s_C1R");

  --*
  -- * Three channel 16-bit signed minimum filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMin_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7315
   pragma Import (C, nppiFilterMin_16s_C3R, "nppiFilterMin_16s_C3R");

  --*
  -- * Four channel 16-bit signed minimum filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMin_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7333
   pragma Import (C, nppiFilterMin_16s_C4R, "nppiFilterMin_16s_C4R");

  --*
  -- * Four channel 16-bit signed minimum filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMin_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7351
   pragma Import (C, nppiFilterMin_16s_AC4R, "nppiFilterMin_16s_AC4R");

  --*
  -- * Single channel 32-bit floating-point minimum filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMin_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7370
   pragma Import (C, nppiFilterMin_32f_C1R, "nppiFilterMin_32f_C1R");

  --*
  -- * Three channel 32-bit floating-point minimum filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMin_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7388
   pragma Import (C, nppiFilterMin_32f_C3R, "nppiFilterMin_32f_C3R");

  --*
  -- * Four channel 32-bit floating-point minimum filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMin_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7406
   pragma Import (C, nppiFilterMin_32f_C4R, "nppiFilterMin_32f_C4R");

  --*
  -- * Four channel 32-bit floating-point minimum filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Max operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMin_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7424
   pragma Import (C, nppiFilterMin_32f_AC4R, "nppiFilterMin_32f_AC4R");

  --* @} FilterMin  
  --* @name ImageMinBorder Filter
  -- *
  -- * Result pixel value is the minimum of pixel values under the rectangular
  -- * mask region. If any portion of the mask overlaps the source
  -- * image boundary the requested border type operation is applied to all mask pixels
  -- * which fall outside of the source image.
  -- *
  -- * Currently only the NPP_BORDER_REPLICATE border type operation is supported.
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned minimum filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Min operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMinBorder_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7460
   pragma Import (C, nppiFilterMinBorder_8u_C1R, "nppiFilterMinBorder_8u_C1R");

  --*
  -- * Three channel 8-bit unsigned minimum filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Min operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMinBorder_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7481
   pragma Import (C, nppiFilterMinBorder_8u_C3R, "nppiFilterMinBorder_8u_C3R");

  --*
  -- * Four channel 8-bit unsigned minimum filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Min operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMinBorder_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7502
   pragma Import (C, nppiFilterMinBorder_8u_C4R, "nppiFilterMinBorder_8u_C4R");

  --*
  -- * Four channel 8-bit unsigned minimum filter with border control, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Min operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMinBorder_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7523
   pragma Import (C, nppiFilterMinBorder_8u_AC4R, "nppiFilterMinBorder_8u_AC4R");

  --*
  -- * Single channel 16-bit unsigned minimum filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Min operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMinBorder_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7544
   pragma Import (C, nppiFilterMinBorder_16u_C1R, "nppiFilterMinBorder_16u_C1R");

  --*
  -- * Three channel 16-bit unsigned minimum filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Min operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMinBorder_16u_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7565
   pragma Import (C, nppiFilterMinBorder_16u_C3R, "nppiFilterMinBorder_16u_C3R");

  --*
  -- * Four channel 16-bit unsigned minimum filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Min operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMinBorder_16u_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7586
   pragma Import (C, nppiFilterMinBorder_16u_C4R, "nppiFilterMinBorder_16u_C4R");

  --*
  -- * Four channel 16-bit unsigned minimum filter with border control, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Min operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMinBorder_16u_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7607
   pragma Import (C, nppiFilterMinBorder_16u_AC4R, "nppiFilterMinBorder_16u_AC4R");

  --*
  -- * Single channel 16-bit signed minimum filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Min operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMinBorder_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7628
   pragma Import (C, nppiFilterMinBorder_16s_C1R, "nppiFilterMinBorder_16s_C1R");

  --*
  -- * Three channel 16-bit signed minimum filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Min operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMinBorder_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7649
   pragma Import (C, nppiFilterMinBorder_16s_C3R, "nppiFilterMinBorder_16s_C3R");

  --*
  -- * Four channel 16-bit signed minimum filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Min operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMinBorder_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7670
   pragma Import (C, nppiFilterMinBorder_16s_C4R, "nppiFilterMinBorder_16s_C4R");

  --*
  -- * Four channel 16-bit signed minimum filter with border control, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Min operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMinBorder_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7691
   pragma Import (C, nppiFilterMinBorder_16s_AC4R, "nppiFilterMinBorder_16s_AC4R");

  --*
  -- * Single channel 32-bit floating-point minimum filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Min operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMinBorder_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7712
   pragma Import (C, nppiFilterMinBorder_32f_C1R, "nppiFilterMinBorder_32f_C1R");

  --*
  -- * Three channel 32-bit floating-point minimum filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Min operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMinBorder_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7733
   pragma Import (C, nppiFilterMinBorder_32f_C3R, "nppiFilterMinBorder_32f_C3R");

  --*
  -- * Four channel 32-bit floating-point minimum filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Min operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMinBorder_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7754
   pragma Import (C, nppiFilterMinBorder_32f_C4R, "nppiFilterMinBorder_32f_C4R");

  --*
  -- * Four channel 32-bit floating-point minimum filter with border control, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Min operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMinBorder_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7775
   pragma Import (C, nppiFilterMinBorder_32f_AC4R, "nppiFilterMinBorder_32f_AC4R");

  --* @} FilterMinBorder  
  --* @name ImageMedian Filter
  -- *
  -- * Result pixel value is the median of pixel values under the rectangular
  -- * mask region.
  -- *
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned median filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Median operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param pBuffer Pointer to the user-allocated scratch buffer required for the Median operation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMedian_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      pBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7806
   pragma Import (C, nppiFilterMedian_8u_C1R, "nppiFilterMedian_8u_C1R");

  --*
  -- * Three channel 8-bit unsigned median filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Median operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param pBuffer Pointer to the user-allocated scratch buffer required for the Median operation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMedian_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      pBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7825
   pragma Import (C, nppiFilterMedian_8u_C3R, "nppiFilterMedian_8u_C3R");

  --*
  -- * Four channel 8-bit unsigned median filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Median operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param pBuffer Pointer to the user-allocated scratch buffer required for the Median operation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMedian_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      pBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7844
   pragma Import (C, nppiFilterMedian_8u_C4R, "nppiFilterMedian_8u_C4R");

  --*
  -- * Four channel 8-bit unsigned median filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Median operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param pBuffer Pointer to the user-allocated scratch buffer required for the Median operation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMedian_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      pBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7863
   pragma Import (C, nppiFilterMedian_8u_AC4R, "nppiFilterMedian_8u_AC4R");

  --*
  -- * Single channel 16-bit unsigned median filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Median operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param pBuffer Pointer to the user-allocated scratch buffer required for the Median operation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMedian_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      pBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7882
   pragma Import (C, nppiFilterMedian_16u_C1R, "nppiFilterMedian_16u_C1R");

  --*
  -- * Three channel 16-bit unsigned median filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Median operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param pBuffer Pointer to the user-allocated scratch buffer required for the Median operation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMedian_16u_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      pBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7901
   pragma Import (C, nppiFilterMedian_16u_C3R, "nppiFilterMedian_16u_C3R");

  --*
  -- * Four channel 16-bit unsigned median filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Median operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param pBuffer Pointer to the user-allocated scratch buffer required for the Median operation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMedian_16u_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      pBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7920
   pragma Import (C, nppiFilterMedian_16u_C4R, "nppiFilterMedian_16u_C4R");

  --*
  -- * Four channel 16-bit unsigned median filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Median operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param pBuffer Pointer to the user-allocated scratch buffer required for the Median operation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMedian_16u_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      pBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7939
   pragma Import (C, nppiFilterMedian_16u_AC4R, "nppiFilterMedian_16u_AC4R");

  --*
  -- * Single channel 16-bit signed median filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Median operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param pBuffer Pointer to the user-allocated scratch buffer required for the Median operation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMedian_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      pBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7958
   pragma Import (C, nppiFilterMedian_16s_C1R, "nppiFilterMedian_16s_C1R");

  --*
  -- * Three channel 16-bit signed median filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Median operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param pBuffer Pointer to the user-allocated scratch buffer required for the Median operation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMedian_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      pBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7977
   pragma Import (C, nppiFilterMedian_16s_C3R, "nppiFilterMedian_16s_C3R");

  --*
  -- * Four channel 16-bit signed median filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Median operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param pBuffer Pointer to the user-allocated scratch buffer required for the Median operation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMedian_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      pBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:7996
   pragma Import (C, nppiFilterMedian_16s_C4R, "nppiFilterMedian_16s_C4R");

  --*
  -- * Four channel 16-bit signed median filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Median operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param pBuffer Pointer to the user-allocated scratch buffer required for the Median operation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMedian_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      pBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8015
   pragma Import (C, nppiFilterMedian_16s_AC4R, "nppiFilterMedian_16s_AC4R");

  --*
  -- * Single channel 32-bit floating-point median filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Median operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param pBuffer Pointer to the user-allocated scratch buffer required for the Median operation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMedian_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      pBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8035
   pragma Import (C, nppiFilterMedian_32f_C1R, "nppiFilterMedian_32f_C1R");

  --*
  -- * Three channel 32-bit floating-point median filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Median operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param pBuffer Pointer to the user-allocated scratch buffer required for the Median operation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMedian_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      pBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8054
   pragma Import (C, nppiFilterMedian_32f_C3R, "nppiFilterMedian_32f_C3R");

  --*
  -- * Four channel 32-bit floating-point median filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Median operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param pBuffer Pointer to the user-allocated scratch buffer required for the Median operation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMedian_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      pBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8073
   pragma Import (C, nppiFilterMedian_32f_C4R, "nppiFilterMedian_32f_C4R");

  --*
  -- * Four channel 32-bit floating-point median filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local
  -- *        Median operation.
  -- * \param oAnchor X and Y offsets of the kernel origin frame of reference
  -- *        relative to the source pixel.
  -- * \param pBuffer Pointer to the user-allocated scratch buffer required for the Median operation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterMedian_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      oAnchor : nppdefs_h.NppiPoint;
      pBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8092
   pragma Import (C, nppiFilterMedian_32f_AC4R, "nppiFilterMedian_32f_AC4R");

  --*
  -- * Single channel 8-bit unsigned median filter scratch memory size.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local Median operation.
  -- * \param nBufferSize Pointer to the size of the scratch buffer required for the Median operation.
  -- * \return \ref image_data_error_codes
  --  

   function nppiFilterMedianGetBufferSize_8u_C1R
     (oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      nBufferSize : access nppdefs_h.Npp32u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8109
   pragma Import (C, nppiFilterMedianGetBufferSize_8u_C1R, "nppiFilterMedianGetBufferSize_8u_C1R");

  --*
  -- * Three channel 8-bit unsigned median filter scratch memory size.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local Median operation.
  -- * \param nBufferSize Pointer to the size of the scratch buffer required for the Median operation.
  -- * \return \ref image_data_error_codes
  --  

   function nppiFilterMedianGetBufferSize_8u_C3R
     (oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      nBufferSize : access nppdefs_h.Npp32u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8119
   pragma Import (C, nppiFilterMedianGetBufferSize_8u_C3R, "nppiFilterMedianGetBufferSize_8u_C3R");

  --*
  -- * Four channel 8-bit unsigned median filter scratch memory size.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local Median operation.
  -- * \param nBufferSize Pointer to the size of the scratch buffer required for the Median operation.
  -- * \return \ref image_data_error_codes
  --  

   function nppiFilterMedianGetBufferSize_8u_C4R
     (oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      nBufferSize : access nppdefs_h.Npp32u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8129
   pragma Import (C, nppiFilterMedianGetBufferSize_8u_C4R, "nppiFilterMedianGetBufferSize_8u_C4R");

  --*
  -- * Four channel 8-bit unsigned median filter, ignoring alpha channel.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local Median operation.
  -- * \param nBufferSize Pointer to the size of the scratch buffer required for the Median operation.
  -- * \return \ref image_data_error_codes
  --  

   function nppiFilterMedianGetBufferSize_8u_AC4R
     (oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      nBufferSize : access nppdefs_h.Npp32u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8139
   pragma Import (C, nppiFilterMedianGetBufferSize_8u_AC4R, "nppiFilterMedianGetBufferSize_8u_AC4R");

  --*
  -- * Single channel 16-bit unsigned median filter scratch memory size.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local Median operation.
  -- * \param nBufferSize Pointer to the size of the scratch buffer required for the Median operation.
  -- * \return \ref image_data_error_codes
  --  

   function nppiFilterMedianGetBufferSize_16u_C1R
     (oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      nBufferSize : access nppdefs_h.Npp32u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8149
   pragma Import (C, nppiFilterMedianGetBufferSize_16u_C1R, "nppiFilterMedianGetBufferSize_16u_C1R");

  --*
  -- * Three channel 16-bit unsigned median filter scratch memory size.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local Median operation.
  -- * \param nBufferSize Pointer to the size of the scratch buffer required for the Median operation.
  -- * \return \ref image_data_error_codes
  --  

   function nppiFilterMedianGetBufferSize_16u_C3R
     (oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      nBufferSize : access nppdefs_h.Npp32u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8159
   pragma Import (C, nppiFilterMedianGetBufferSize_16u_C3R, "nppiFilterMedianGetBufferSize_16u_C3R");

  --*
  -- * Four channel 16-bit unsigned median filter scratch memory size.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local Median operation.
  -- * \param nBufferSize Pointer to the size of the scratch buffer required for the Median operation.
  -- * \return \ref image_data_error_codes
  --  

   function nppiFilterMedianGetBufferSize_16u_C4R
     (oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      nBufferSize : access nppdefs_h.Npp32u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8169
   pragma Import (C, nppiFilterMedianGetBufferSize_16u_C4R, "nppiFilterMedianGetBufferSize_16u_C4R");

  --*
  -- * Four channel 16-bit unsigned median filter, ignoring alpha channel.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local Median operation.
  -- * \param nBufferSize Pointer to the size of the scratch buffer required for the Median operation.
  -- * \return \ref image_data_error_codes
  --  

   function nppiFilterMedianGetBufferSize_16u_AC4R
     (oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      nBufferSize : access nppdefs_h.Npp32u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8179
   pragma Import (C, nppiFilterMedianGetBufferSize_16u_AC4R, "nppiFilterMedianGetBufferSize_16u_AC4R");

  --*
  -- * Single channel 16-bit signed median filter scratch memory size.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local Median operation.
  -- * \param nBufferSize Pointer to the size of the scratch buffer required for the Median operation.
  -- * \return \ref image_data_error_codes
  --  

   function nppiFilterMedianGetBufferSize_16s_C1R
     (oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      nBufferSize : access nppdefs_h.Npp32u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8189
   pragma Import (C, nppiFilterMedianGetBufferSize_16s_C1R, "nppiFilterMedianGetBufferSize_16s_C1R");

  --*
  -- * Three channel 16-bit signed median filter scratch memory size.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local Median operation.
  -- * \param nBufferSize Pointer to the size of the scratch buffer required for the Median operation.
  -- * \return \ref image_data_error_codes
  --  

   function nppiFilterMedianGetBufferSize_16s_C3R
     (oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      nBufferSize : access nppdefs_h.Npp32u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8199
   pragma Import (C, nppiFilterMedianGetBufferSize_16s_C3R, "nppiFilterMedianGetBufferSize_16s_C3R");

  --*
  -- * Four channel 16-bit signed median filter scratch memory size.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local Median operation.
  -- * \param nBufferSize Pointer to the size of the scratch buffer required for the Median operation.
  -- * \return \ref image_data_error_codes
  --  

   function nppiFilterMedianGetBufferSize_16s_C4R
     (oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      nBufferSize : access nppdefs_h.Npp32u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8209
   pragma Import (C, nppiFilterMedianGetBufferSize_16s_C4R, "nppiFilterMedianGetBufferSize_16s_C4R");

  --*
  -- * Four channel 16-bit signed median filter, ignoring alpha channel.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local Median operation.
  -- * \param nBufferSize Pointer to the size of the scratch buffer required for the Median operation.
  -- * \return \ref image_data_error_codes
  --  

   function nppiFilterMedianGetBufferSize_16s_AC4R
     (oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      nBufferSize : access nppdefs_h.Npp32u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8219
   pragma Import (C, nppiFilterMedianGetBufferSize_16s_AC4R, "nppiFilterMedianGetBufferSize_16s_AC4R");

  --*
  -- * Single channel 32-bit floating-point median filter scratch memory size.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local Median operation.
  -- * \param nBufferSize Pointer to the size of the scratch buffer required for the Median operation.
  -- * \return \ref image_data_error_codes
  --  

   function nppiFilterMedianGetBufferSize_32f_C1R
     (oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      nBufferSize : access nppdefs_h.Npp32u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8230
   pragma Import (C, nppiFilterMedianGetBufferSize_32f_C1R, "nppiFilterMedianGetBufferSize_32f_C1R");

  --*
  -- * Three channel 32-bit floating-point median filter scratch memory size.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local Median operation.
  -- * \param nBufferSize Pointer to the size of the scratch buffer required for the Median operation.
  -- * \return \ref image_data_error_codes
  --  

   function nppiFilterMedianGetBufferSize_32f_C3R
     (oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      nBufferSize : access nppdefs_h.Npp32u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8240
   pragma Import (C, nppiFilterMedianGetBufferSize_32f_C3R, "nppiFilterMedianGetBufferSize_32f_C3R");

  --*
  -- * Four channel 32-bit floating-point median filter scratch memory size.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local Median operation.
  -- * \param nBufferSize Pointer to the size of the scratch buffer required for the Median operation.
  -- * \return \ref image_data_error_codes
  --  

   function nppiFilterMedianGetBufferSize_32f_C4R
     (oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      nBufferSize : access nppdefs_h.Npp32u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8250
   pragma Import (C, nppiFilterMedianGetBufferSize_32f_C4R, "nppiFilterMedianGetBufferSize_32f_C4R");

  --*
  -- * Four channel 32-bit floating-point median filter, ignoring alpha channel.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param oMaskSize Width and Height of the neighborhood region for the local Median operation.
  -- * \param nBufferSize Pointer to the size of the scratch buffer required for the Median operation.
  -- * \return \ref image_data_error_codes
  --  

   function nppiFilterMedianGetBufferSize_32f_AC4R
     (oSizeROI : nppdefs_h.NppiSize;
      oMaskSize : nppdefs_h.NppiSize;
      nBufferSize : access nppdefs_h.Npp32u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8260
   pragma Import (C, nppiFilterMedianGetBufferSize_32f_AC4R, "nppiFilterMedianGetBufferSize_32f_AC4R");

  --* @} FilterMedian  
  --* @} image_rank_filters  
  --* @defgroup fixed_filters Fixed Filters
  -- *
  -- * Fixed filters perform linear filtering operations (such as convolutions) with predefined kernels
  -- * of fixed sizes.  Note that this section also contains a few dynamic kernel filters, namely GaussAdvanced and Bilateral.
  -- * 
  -- * Some of the fixed filters have versions with border control.   For these functions, if any portion 
  -- * of the mask overlaps the source image boundary the requested border type operation is applied to 
  -- * all mask pixels which fall outside of the source image.
  -- *
  -- * Currently only the NPP_BORDER_REPLICATE border type operation is supported for these functions.
  -- *
  -- * @{
  -- *
  --  

  --* @name FilterPrewittHoriz 
  -- *
  -- * Filters the image using a horizontal Prewitt filter kernel:
  -- *
  -- * \f[
  -- *  \left( \begin{array}{rrr}
  -- *    1 &  1 &  1 \ *    0 &  0 &  0 \ *   -1 & -1 & -1 \ *  \end{array} \right)
  --ight)
  -- * \f]
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned horizontal Prewitt filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittHoriz_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8311
   pragma Import (C, nppiFilterPrewittHoriz_8u_C1R, "nppiFilterPrewittHoriz_8u_C1R");

  --*
  -- * Three channel 8-bit unsigned horizontal Prewitt filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittHoriz_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8324
   pragma Import (C, nppiFilterPrewittHoriz_8u_C3R, "nppiFilterPrewittHoriz_8u_C3R");

  --*
  -- * Four channel 8-bit unsigned horizontal Prewitt filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittHoriz_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8337
   pragma Import (C, nppiFilterPrewittHoriz_8u_C4R, "nppiFilterPrewittHoriz_8u_C4R");

  --*
  -- * Four channel 8-bit unsigned horizontal Prewitt filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittHoriz_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8350
   pragma Import (C, nppiFilterPrewittHoriz_8u_AC4R, "nppiFilterPrewittHoriz_8u_AC4R");

  --*
  -- * Single channel 16-bit signed horizontal Prewitt filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittHoriz_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8363
   pragma Import (C, nppiFilterPrewittHoriz_16s_C1R, "nppiFilterPrewittHoriz_16s_C1R");

  --*
  -- * Three channel 16-bit signed horizontal Prewitt filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittHoriz_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8376
   pragma Import (C, nppiFilterPrewittHoriz_16s_C3R, "nppiFilterPrewittHoriz_16s_C3R");

  --*
  -- * Four channel 16-bit signed horizontal Prewitt filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittHoriz_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8389
   pragma Import (C, nppiFilterPrewittHoriz_16s_C4R, "nppiFilterPrewittHoriz_16s_C4R");

  --*
  -- * Four channel 16-bit signed horizontal Prewitt filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittHoriz_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8402
   pragma Import (C, nppiFilterPrewittHoriz_16s_AC4R, "nppiFilterPrewittHoriz_16s_AC4R");

  --*
  -- * Single channel 32-bit floating-point horizontal Prewitt filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittHoriz_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8415
   pragma Import (C, nppiFilterPrewittHoriz_32f_C1R, "nppiFilterPrewittHoriz_32f_C1R");

  --*
  -- * Three channel 32-bit floating-point horizontal Prewitt filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittHoriz_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8428
   pragma Import (C, nppiFilterPrewittHoriz_32f_C3R, "nppiFilterPrewittHoriz_32f_C3R");

  --*
  -- * Four channel 32-bit floating-point horizontal Prewitt filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittHoriz_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8441
   pragma Import (C, nppiFilterPrewittHoriz_32f_C4R, "nppiFilterPrewittHoriz_32f_C4R");

  --*
  -- * Four channel 32-bit floating-point horizontal Prewitt filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittHoriz_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8454
   pragma Import (C, nppiFilterPrewittHoriz_32f_AC4R, "nppiFilterPrewittHoriz_32f_AC4R");

  --* @} FilterPrewittHoriz  
  --* @name FilterPrewittHorizBorder 
  -- *
  -- * Filters the image using a horizontal Prewitt filter kernel with border control. If any portion of the mask overlaps the source
  -- * image boundary the requested border type operation is applied to all mask pixels
  -- * which fall outside of the source image.
  -- *
  -- * Currently only the NPP_BORDER_REPLICATE border type operation is supported.
  -- *
  -- * \f[
  -- *  \left( \begin{array}{rrr}
  -- *    1 &  1 &  1 \ *    0 &  0 &  0 \ *   -1 & -1 & -1 \ *  \end{array} \right)
  --ight)
  -- * \f]
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned horizontal Prewitt filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittHorizBorder_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8492
   pragma Import (C, nppiFilterPrewittHorizBorder_8u_C1R, "nppiFilterPrewittHorizBorder_8u_C1R");

  --*
  -- * Three channel 8-bit unsigned horizontal Prewitt filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittHorizBorder_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8508
   pragma Import (C, nppiFilterPrewittHorizBorder_8u_C3R, "nppiFilterPrewittHorizBorder_8u_C3R");

  --*
  -- * Four channel 8-bit unsigned horizontal Prewitt filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittHorizBorder_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8524
   pragma Import (C, nppiFilterPrewittHorizBorder_8u_C4R, "nppiFilterPrewittHorizBorder_8u_C4R");

  --*
  -- * Four channel 8-bit unsigned horizontal Prewitt filter with border control, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittHorizBorder_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8540
   pragma Import (C, nppiFilterPrewittHorizBorder_8u_AC4R, "nppiFilterPrewittHorizBorder_8u_AC4R");

  --*
  -- * Single channel 16-bit signed horizontal Prewitt filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittHorizBorder_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8556
   pragma Import (C, nppiFilterPrewittHorizBorder_16s_C1R, "nppiFilterPrewittHorizBorder_16s_C1R");

  --*
  -- * Three channel 16-bit signed horizontal Prewitt filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittHorizBorder_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8572
   pragma Import (C, nppiFilterPrewittHorizBorder_16s_C3R, "nppiFilterPrewittHorizBorder_16s_C3R");

  --*
  -- * Four channel 16-bit signed horizontal Prewitt filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittHorizBorder_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8588
   pragma Import (C, nppiFilterPrewittHorizBorder_16s_C4R, "nppiFilterPrewittHorizBorder_16s_C4R");

  --*
  -- * Four channel 16-bit signed horizontal Prewitt filter with border control, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittHorizBorder_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8604
   pragma Import (C, nppiFilterPrewittHorizBorder_16s_AC4R, "nppiFilterPrewittHorizBorder_16s_AC4R");

  --*
  -- * Single channel 32-bit floating-point horizontal Prewitt filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittHorizBorder_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8620
   pragma Import (C, nppiFilterPrewittHorizBorder_32f_C1R, "nppiFilterPrewittHorizBorder_32f_C1R");

  --*
  -- * Three channel 32-bit floating-point horizontal Prewitt filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittHorizBorder_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8636
   pragma Import (C, nppiFilterPrewittHorizBorder_32f_C3R, "nppiFilterPrewittHorizBorder_32f_C3R");

  --*
  -- * Four channel 32-bit floating-point horizontal Prewitt filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittHorizBorder_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8652
   pragma Import (C, nppiFilterPrewittHorizBorder_32f_C4R, "nppiFilterPrewittHorizBorder_32f_C4R");

  --*
  -- * Four channel 32-bit floating-point horizontal Prewitt filter with border control, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittHorizBorder_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8668
   pragma Import (C, nppiFilterPrewittHorizBorder_32f_AC4R, "nppiFilterPrewittHorizBorder_32f_AC4R");

  --* @} FilterPrewittHorizBorder  
  --* @name FilterPrewittVert 
  -- *
  -- * Filters the image using a vertical Prewitt filter kernel:
  -- *
  -- * \f[
  -- *  \left( \begin{array}{rrr}
  -- *   -1 & 0 & 1 \ *   -1 & 0 & 1 \ *   -1 & 0 & 1 \ *  \end{array} \right)
  --ight)
  -- * \f]
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned vertical Prewitt filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittVert_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8699
   pragma Import (C, nppiFilterPrewittVert_8u_C1R, "nppiFilterPrewittVert_8u_C1R");

  --*
  -- * Three channel 8-bit unsigned vertical Prewitt filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittVert_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8712
   pragma Import (C, nppiFilterPrewittVert_8u_C3R, "nppiFilterPrewittVert_8u_C3R");

  --*
  -- * Four channel 8-bit unsigned vertical Prewitt filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittVert_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8725
   pragma Import (C, nppiFilterPrewittVert_8u_C4R, "nppiFilterPrewittVert_8u_C4R");

  --*
  -- * Four channel 8-bit unsigned vertical Prewitt filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittVert_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8738
   pragma Import (C, nppiFilterPrewittVert_8u_AC4R, "nppiFilterPrewittVert_8u_AC4R");

  --*
  -- * Single channel 16-bit signed vertical Prewitt filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittVert_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8751
   pragma Import (C, nppiFilterPrewittVert_16s_C1R, "nppiFilterPrewittVert_16s_C1R");

  --*
  -- * Three channel 16-bit signed vertical Prewitt filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittVert_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8764
   pragma Import (C, nppiFilterPrewittVert_16s_C3R, "nppiFilterPrewittVert_16s_C3R");

  --*
  -- * Four channel 16-bit signed vertical Prewitt filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittVert_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8777
   pragma Import (C, nppiFilterPrewittVert_16s_C4R, "nppiFilterPrewittVert_16s_C4R");

  --*
  -- * Four channel 16-bit signed vertical Prewitt filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittVert_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8790
   pragma Import (C, nppiFilterPrewittVert_16s_AC4R, "nppiFilterPrewittVert_16s_AC4R");

  --*
  -- * Single channel 32-bit floating-point vertical Prewitt filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittVert_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8803
   pragma Import (C, nppiFilterPrewittVert_32f_C1R, "nppiFilterPrewittVert_32f_C1R");

  --*
  -- * Three channel 32-bit floating-point vertical Prewitt filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittVert_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8816
   pragma Import (C, nppiFilterPrewittVert_32f_C3R, "nppiFilterPrewittVert_32f_C3R");

  --*
  -- * Four channel 32-bit floating-point vertical Prewitt filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittVert_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8829
   pragma Import (C, nppiFilterPrewittVert_32f_C4R, "nppiFilterPrewittVert_32f_C4R");

  --*
  -- * Four channel 32-bit floating-point vertical Prewitt filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittVert_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8842
   pragma Import (C, nppiFilterPrewittVert_32f_AC4R, "nppiFilterPrewittVert_32f_AC4R");

  --* @} FilterPrewittVert  
  --* @name FilterPrewittVertBorder 
  -- *
  -- * Filters the image using a vertical Prewitt filter kernel with border control. If any portion of the mask overlaps the source
  -- * image boundary the requested border type operation is applied to all mask pixels
  -- * which fall outside of the source image.
  -- *
  -- * Currently only the NPP_BORDER_REPLICATE border type operation is supported.
  -- *
  -- * \f[
  -- *  \left( \begin{array}{rrr}
  -- *   -1 & 0 & 1 \ *   -1 & 0 & 1 \ *   -1 & 0 & 1 \ *  \end{array} \right);
  --ght);
  -- * \f]
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned vertical Prewitt filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittVertBorder_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8880
   pragma Import (C, nppiFilterPrewittVertBorder_8u_C1R, "nppiFilterPrewittVertBorder_8u_C1R");

  --*
  -- * Three channel 8-bit unsigned vertical Prewitt filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittVertBorder_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8896
   pragma Import (C, nppiFilterPrewittVertBorder_8u_C3R, "nppiFilterPrewittVertBorder_8u_C3R");

  --*
  -- * Four channel 8-bit unsigned vertical Prewitt filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittVertBorder_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8912
   pragma Import (C, nppiFilterPrewittVertBorder_8u_C4R, "nppiFilterPrewittVertBorder_8u_C4R");

  --*
  -- * Four channel 8-bit unsigned vertical Prewitt filter with border control, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittVertBorder_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8928
   pragma Import (C, nppiFilterPrewittVertBorder_8u_AC4R, "nppiFilterPrewittVertBorder_8u_AC4R");

  --*
  -- * Single channel 16-bit signed vertical Prewitt filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittVertBorder_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8944
   pragma Import (C, nppiFilterPrewittVertBorder_16s_C1R, "nppiFilterPrewittVertBorder_16s_C1R");

  --*
  -- * Three channel 16-bit signed vertical Prewitt filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittVertBorder_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8960
   pragma Import (C, nppiFilterPrewittVertBorder_16s_C3R, "nppiFilterPrewittVertBorder_16s_C3R");

  --*
  -- * Four channel 16-bit signed vertical Prewitt filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittVertBorder_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8976
   pragma Import (C, nppiFilterPrewittVertBorder_16s_C4R, "nppiFilterPrewittVertBorder_16s_C4R");

  --*
  -- * Four channel 16-bit signed vertical Prewitt filter with border control, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittVertBorder_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:8992
   pragma Import (C, nppiFilterPrewittVertBorder_16s_AC4R, "nppiFilterPrewittVertBorder_16s_AC4R");

  --*
  -- * Single channel 32-bit floating-point vertical Prewitt filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittVertBorder_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9008
   pragma Import (C, nppiFilterPrewittVertBorder_32f_C1R, "nppiFilterPrewittVertBorder_32f_C1R");

  --*
  -- * Three channel 32-bit floating-point vertical Prewitt filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittVertBorder_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9024
   pragma Import (C, nppiFilterPrewittVertBorder_32f_C3R, "nppiFilterPrewittVertBorder_32f_C3R");

  --*
  -- * Four channel 32-bit floating-point vertical Prewitt filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittVertBorder_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9040
   pragma Import (C, nppiFilterPrewittVertBorder_32f_C4R, "nppiFilterPrewittVertBorder_32f_C4R");

  --*
  -- * Four channel 32-bit floating-point vertical Prewitt filter with border control, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterPrewittVertBorder_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9056
   pragma Import (C, nppiFilterPrewittVertBorder_32f_AC4R, "nppiFilterPrewittVertBorder_32f_AC4R");

  --* @} FilterPrewittVertBorder  
  --* @name FilterScharrHoriz 
  -- *
  -- * Filters the image using a horizontal Scharr filter kernel:
  -- *
  -- * \f[
  -- *  \left( \begin{array}{rrr}
  -- *    3 &  10 &  3 \ *    0 &   0 &  0 \ *   -3 & -10 & -3 \ *  \end{array} \right)
  --ight)
  -- * \f]
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned to 16-bit signed horizontal Scharr filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterScharrHoriz_8u16s_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9088
   pragma Import (C, nppiFilterScharrHoriz_8u16s_C1R, "nppiFilterScharrHoriz_8u16s_C1R");

  --*
  -- * Single channel 8-bit signed to 16-bit signed horizontal Scharr filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterScharrHoriz_8s16s_C1R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9101
   pragma Import (C, nppiFilterScharrHoriz_8s16s_C1R, "nppiFilterScharrHoriz_8s16s_C1R");

  --*
  -- * Single channel 32-bit floating-point horizontal Scharr filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterScharrHoriz_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9114
   pragma Import (C, nppiFilterScharrHoriz_32f_C1R, "nppiFilterScharrHoriz_32f_C1R");

  --* @} FilterScharrHoriz  
  --* @name FilterScharrVert 
  -- *
  -- * Filters the image using a vertical Scharr filter kernel:
  -- *
  -- * \f[
  -- *  \left( \begin{array}{rrr}
  -- *     3 &   0 &  -3 \ *    10 &   0 & -10 \ *     3 &   0 &  -3 \ *  \end{array} \right)
  --ight)
  -- * \f]
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned to 16-bit signed vertical Scharr filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterScharrVert_8u16s_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9145
   pragma Import (C, nppiFilterScharrVert_8u16s_C1R, "nppiFilterScharrVert_8u16s_C1R");

  --*
  -- * Single channel 8-bit signed to 16-bit signed vertical Scharr filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterScharrVert_8s16s_C1R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9158
   pragma Import (C, nppiFilterScharrVert_8s16s_C1R, "nppiFilterScharrVert_8s16s_C1R");

  --*
  -- * Single channel 32-bit floating-point vertical Scharr filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterScharrVert_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9171
   pragma Import (C, nppiFilterScharrVert_32f_C1R, "nppiFilterScharrVert_32f_C1R");

  --* @} FilterScharrVert  
  --* @name FilterScharrHorizBorder 
  -- *
  -- * Filters the image using a horizontal Scharr filter kernel with border control:
  -- *
  -- * \f[
  -- *  \left( \begin{array}{rrr}
  -- *    3 &  10 &  3 \ *    0 &   0 &  0 \ *   -3 & -10 & -3 \ *  \end{array} \right)
  --ight)
  -- * \f]
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned to 16-bit signed horizontal Scharr filter kernel with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterScharrHorizBorder_8u16s_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9205
   pragma Import (C, nppiFilterScharrHorizBorder_8u16s_C1R, "nppiFilterScharrHorizBorder_8u16s_C1R");

  --*
  -- * Single channel 8-bit signed to 16-bit signed horizontal Scharr filter kernel with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterScharrHorizBorder_8s16s_C1R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9221
   pragma Import (C, nppiFilterScharrHorizBorder_8s16s_C1R, "nppiFilterScharrHorizBorder_8s16s_C1R");

  --*
  -- * Single channel 32-bit floating-point horizontal Scharr filter kernel with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterScharrHorizBorder_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9237
   pragma Import (C, nppiFilterScharrHorizBorder_32f_C1R, "nppiFilterScharrHorizBorder_32f_C1R");

  --* @} FilterScharrHorizBorder  
  --* @name FilterScharrVertBorder 
  -- *
  -- * Filters the image using a vertical Scharr filter kernel kernel with border control:
  -- *
  -- * \f[
  -- *  \left( \begin{array}{rrr}
  -- *     3 &   0 &  -3 \ *    10 &   0 & -10 \ *     3 &   0 &  -3 \ *  \end{array} \right)
  --ight)
  -- * \f]
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned to 16-bit signed vertical Scharr filter kernel with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterScharrVertBorder_8u16s_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9271
   pragma Import (C, nppiFilterScharrVertBorder_8u16s_C1R, "nppiFilterScharrVertBorder_8u16s_C1R");

  --*
  -- * Single channel 8-bit signed to 16-bit signed vertical Scharr filter kernel with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterScharrVertBorder_8s16s_C1R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9287
   pragma Import (C, nppiFilterScharrVertBorder_8s16s_C1R, "nppiFilterScharrVertBorder_8s16s_C1R");

  --*
  -- * Single channel 32-bit floating-point vertical Scharr filter kernel with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterScharrVertBorder_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9303
   pragma Import (C, nppiFilterScharrVertBorder_32f_C1R, "nppiFilterScharrVertBorder_32f_C1R");

  --* @} FilterScharrVertBorder  
  --* @name FilterSobelHoriz 
  -- *              
  -- * Filters the image using a horizontal Sobel filter kernel:
  -- *
  -- * \f[
  -- *  \left( \begin{array}{rrr}
  -- *    1 &  2 &  1 \ *    0 &  0 &  0 \ *   -1 & -2 & -1 \ *  \end{array} \right)
  --ight)
  -- *  \left( \begin{array}{rrrrr}
  -- *    1  &  4 &   6 &  4 &  1 \ *    2  &  8 &  12 &  8 &  2 \ *    0  &  0 &   0 &  0 &  0 \ *    -2 & -8 & -12 & -8 & -2 \ *    -1 & -4 &  -6 & -4 & -1 \ *  \end{array} \right)
  --} \right)
  -- * \f]
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned horizontal Sobel filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelHoriz_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9342
   pragma Import (C, nppiFilterSobelHoriz_8u_C1R, "nppiFilterSobelHoriz_8u_C1R");

  --*
  -- * Three channel 8-bit unsigned horizontal Sobel filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelHoriz_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9355
   pragma Import (C, nppiFilterSobelHoriz_8u_C3R, "nppiFilterSobelHoriz_8u_C3R");

  --*
  -- * Four channel 8-bit unsigned horizontal Sobel filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelHoriz_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9368
   pragma Import (C, nppiFilterSobelHoriz_8u_C4R, "nppiFilterSobelHoriz_8u_C4R");

  --*
  -- * Four channel 16-bit signed horizontal Sobel filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelHoriz_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9381
   pragma Import (C, nppiFilterSobelHoriz_8u_AC4R, "nppiFilterSobelHoriz_8u_AC4R");

  --*
  -- * Single channel 16-bit signed horizontal Sobel filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelHoriz_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9394
   pragma Import (C, nppiFilterSobelHoriz_16s_C1R, "nppiFilterSobelHoriz_16s_C1R");

  --*
  -- * Three channel 16-bit signed horizontal Sobel filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelHoriz_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9407
   pragma Import (C, nppiFilterSobelHoriz_16s_C3R, "nppiFilterSobelHoriz_16s_C3R");

  --*
  -- * Four channel 16-bit signed horizontal Sobel filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelHoriz_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9420
   pragma Import (C, nppiFilterSobelHoriz_16s_C4R, "nppiFilterSobelHoriz_16s_C4R");

  --*
  -- * Four channel 8-bit unsigned horizontal Sobel filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelHoriz_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9433
   pragma Import (C, nppiFilterSobelHoriz_16s_AC4R, "nppiFilterSobelHoriz_16s_AC4R");

  --*
  -- * Single channel 32-bit floating-point horizontal Sobel filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelHoriz_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9446
   pragma Import (C, nppiFilterSobelHoriz_32f_C1R, "nppiFilterSobelHoriz_32f_C1R");

  --*
  -- * Three channel 32-bit floating-point horizontal Sobel filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelHoriz_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9459
   pragma Import (C, nppiFilterSobelHoriz_32f_C3R, "nppiFilterSobelHoriz_32f_C3R");

  --*
  -- * Four channel 32-bit floating-point horizontal Sobel filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelHoriz_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9472
   pragma Import (C, nppiFilterSobelHoriz_32f_C4R, "nppiFilterSobelHoriz_32f_C4R");

  --*
  -- * Four channel 32-bit floating-point horizontal Sobel filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelHoriz_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9485
   pragma Import (C, nppiFilterSobelHoriz_32f_AC4R, "nppiFilterSobelHoriz_32f_AC4R");

  --*
  -- * Single channel 8-bit unsigned to 16-bit signed horizontal Sobel filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelHoriz_8u16s_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9499
   pragma Import (C, nppiFilterSobelHoriz_8u16s_C1R, "nppiFilterSobelHoriz_8u16s_C1R");

  --*
  -- * Single channel 8-bit signed to 16-bit signed horizontal Sobel filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelHoriz_8s16s_C1R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9514
   pragma Import (C, nppiFilterSobelHoriz_8s16s_C1R, "nppiFilterSobelHoriz_8s16s_C1R");

  --*
  -- * Single channel 32-bit floating-point horizontal Sobel filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelHorizMask_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9529
   pragma Import (C, nppiFilterSobelHorizMask_32f_C1R, "nppiFilterSobelHorizMask_32f_C1R");

  --* @} FilterSobelHoriz  
  --* @name FilterSobelVert 
  -- *
  -- * Filters the image using a vertical Sobel filter kernel:
  -- *
  -- * \f[
  -- *  \left( \begin{array}{rrr}
  -- *    -1 & 0 & 1 \ *    -2 & 0 & 2 \ *    -1 & 0 & 1 \ *  \end{array} \right)
  --ight)
  -- *  \left( \begin{array}{rrrrr}
  -- *    -1 &  -2 & 0 &  2 & 1 \ *    -4 &  -8 & 0 &  8 & 4 \ *    -6 & -12 & 0 & 12 & 6 \ *    -4 &  -8 & 0 &  8 & 4 \ *    -1 &  -2 & 0 &  2 & 1 \ *  \end{array} \right)
  --} \right)
  -- * \f]
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned vertical Sobel filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelVert_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9569
   pragma Import (C, nppiFilterSobelVert_8u_C1R, "nppiFilterSobelVert_8u_C1R");

  --*
  -- * Three channel 8-bit unsigned vertical Sobel filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelVert_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9582
   pragma Import (C, nppiFilterSobelVert_8u_C3R, "nppiFilterSobelVert_8u_C3R");

  --*
  -- * Four channel 8-bit unsigned vertical Sobel filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelVert_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9595
   pragma Import (C, nppiFilterSobelVert_8u_C4R, "nppiFilterSobelVert_8u_C4R");

  --*
  -- * Four channel 16-bit signed vertical Sobel filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelVert_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9608
   pragma Import (C, nppiFilterSobelVert_8u_AC4R, "nppiFilterSobelVert_8u_AC4R");

  --*
  -- * Single channel 16-bit signed vertical Sobel filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelVert_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9621
   pragma Import (C, nppiFilterSobelVert_16s_C1R, "nppiFilterSobelVert_16s_C1R");

  --*
  -- * Three channel 16-bit signed vertical Sobel filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelVert_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9634
   pragma Import (C, nppiFilterSobelVert_16s_C3R, "nppiFilterSobelVert_16s_C3R");

  --*
  -- * Four channel 16-bit signed vertical Sobel filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelVert_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9647
   pragma Import (C, nppiFilterSobelVert_16s_C4R, "nppiFilterSobelVert_16s_C4R");

  --*
  -- * Four channel 8-bit unsigned vertical Sobel filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelVert_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9660
   pragma Import (C, nppiFilterSobelVert_16s_AC4R, "nppiFilterSobelVert_16s_AC4R");

  --*
  -- * Single channel 32-bit floating-point vertical Sobel filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelVert_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9673
   pragma Import (C, nppiFilterSobelVert_32f_C1R, "nppiFilterSobelVert_32f_C1R");

  --*
  -- * Three channel 32-bit floating-point vertical Sobel filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelVert_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9686
   pragma Import (C, nppiFilterSobelVert_32f_C3R, "nppiFilterSobelVert_32f_C3R");

  --*
  -- * Four channel 32-bit floating-point vertical Sobel filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelVert_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9699
   pragma Import (C, nppiFilterSobelVert_32f_C4R, "nppiFilterSobelVert_32f_C4R");

  --*
  -- * Four channel 32-bit floating-point vertical Sobel filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelVert_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9712
   pragma Import (C, nppiFilterSobelVert_32f_AC4R, "nppiFilterSobelVert_32f_AC4R");

  --*
  -- * Single channel 8-bit unsigned to 16-bit signed vertical Sobel filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelVert_8u16s_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9726
   pragma Import (C, nppiFilterSobelVert_8u16s_C1R, "nppiFilterSobelVert_8u16s_C1R");

  --*
  -- * Single channel 8-bit signed to 16-bit signed vertical Sobel filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelVert_8s16s_C1R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9741
   pragma Import (C, nppiFilterSobelVert_8s16s_C1R, "nppiFilterSobelVert_8s16s_C1R");

  --*
  -- * Single channel 32-bit floating-point vertical Sobel filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelVertMask_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9756
   pragma Import (C, nppiFilterSobelVertMask_32f_C1R, "nppiFilterSobelVertMask_32f_C1R");

  --* @} FilterSobelVert  
  --* @name FilterSobelHorizSecond
  -- *
  -- * Filters the image using a second derivative, horizontal Sobel filter kernel:
  -- *
  -- * \f[
  -- *  \left( \begin{array}{rrr}
  -- *     1 &   2 &   1 \ *    -2 &  -4 &  -2 \ *     1 &   2 &   1 \ *  \end{array} \right)
  --ight)
  -- *  \left( \begin{array}{rrrrr}
  -- *     1  &  4 &   6 &  4 &  1 \ *     0  &  0 &   0 &  0 &  0 \ *    -2  & -8 & -12 & -8 & -2 \ *     0  &  0 &   0 &  0 &  0 \ *     1  &  4 &   6 &  4 &  1 \ *  \end{array} \right)
  --} \right)
  -- * \f]
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned to 16-bit signed second derivative, horizontal Sobel filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelHorizSecond_8u16s_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9797
   pragma Import (C, nppiFilterSobelHorizSecond_8u16s_C1R, "nppiFilterSobelHorizSecond_8u16s_C1R");

  --*
  -- * Single channel 8-bit signed to 16-bit signed second derivative, horizontal Sobel filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelHorizSecond_8s16s_C1R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9812
   pragma Import (C, nppiFilterSobelHorizSecond_8s16s_C1R, "nppiFilterSobelHorizSecond_8s16s_C1R");

  --*
  -- * Single channel 32-bit floating-point second derivative, horizontal Sobel filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelHorizSecond_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9826
   pragma Import (C, nppiFilterSobelHorizSecond_32f_C1R, "nppiFilterSobelHorizSecond_32f_C1R");

  --* @} FilterSobelHorizSecond  
  --* @name FilterSobelVertSecond
  -- *
  -- * Filters the image using a second derivative, vertical Sobel filter kernel:
  -- *
  -- * \f[
  -- *  \left( \begin{array}{rrr}
  --     *    1 & -2 & 1 \     *    2 & -4 & 2 \     *    1 & -2 & 1 \ *  \end{array} \right)
  --ight)
  -- *  \left( \begin{array}{rrrrr}
  -- *     1 & 0 &  -2 & 0 & 1 \ *     4 & 0 &  -8 & 0 & 4 \ *     6 & 0 & -12 & 0 & 6 \ *     4 & 0 &  -8 & 0 & 4 \ *     1 & 0 &  -2 & 0 & 1 \ *  \end{array} \right)
  --} \right)
  -- * \f]
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned to 16-bit signed second derivative, vertical Sobel filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelVertSecond_8u16s_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9866
   pragma Import (C, nppiFilterSobelVertSecond_8u16s_C1R, "nppiFilterSobelVertSecond_8u16s_C1R");

  --*
  -- * Single channel 8-bit signed to 16-bit signed second derivative, vertical Sobel filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelVertSecond_8s16s_C1R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9881
   pragma Import (C, nppiFilterSobelVertSecond_8s16s_C1R, "nppiFilterSobelVertSecond_8s16s_C1R");

  --*
  -- * Single channel 32-bit floating-point second derivative, vertical Sobel filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelVertSecond_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9895
   pragma Import (C, nppiFilterSobelVertSecond_32f_C1R, "nppiFilterSobelVertSecond_32f_C1R");

  --* @} FilterSobelVertSecond  
  --* @name FilterSobelCross
  -- *
  -- * Filters the image using a second cross derivative Sobel filter kernel:
  -- *
  -- * \f[
  -- *  \left( \begin{array}{rrr}
  -- *    -1 & 0 &  1 \ *     0 & 0 &  0 \ *     1 & 0 & -1 \ *  \end{array} \right)
  --ight)
  -- *  \left( \begin{array}{rrrrr}
  -- *    -1 & -2 & 0 &  2 &  1 \ *    -2 & -4 & 0 &  4 &  2 \ *     0 &  0 & 0 &  0 &  0 \ *     2 &  4 & 0 & -4 & -2 \ *     1 &  2 & 0 & -2 & -1 \ *  \end{array} \right)
  --} \right)
  -- * \f]
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned to 16-bit signed second cross derivative Sobel filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelCross_8u16s_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9935
   pragma Import (C, nppiFilterSobelCross_8u16s_C1R, "nppiFilterSobelCross_8u16s_C1R");

  --*
  -- * Single channel 8-bit signed to 16-bit signed second cross derivative Sobel filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelCross_8s16s_C1R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9950
   pragma Import (C, nppiFilterSobelCross_8s16s_C1R, "nppiFilterSobelCross_8s16s_C1R");

  --*
  -- * Single channel 32-bit floating-point second cross derivative Sobel filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelCross_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:9964
   pragma Import (C, nppiFilterSobelCross_32f_C1R, "nppiFilterSobelCross_32f_C1R");

  --* @} FilterSobelCross  
  --* @name FilterSobelHorizBorder 
  -- *
  -- * Filters the image using a horizontal Sobel filter kernel with border control:
  -- *
  -- * \f[
  -- *  \left( \begin{array}{rrr}
  -- *    1 &  2 &  1 \ *    0 &  0 &  0 \ *   -1 & -2 & -1 \ *  \end{array} \right)
  --ight)
  -- *  \left( \begin{array}{rrrrr}
  -- *    1  &  4 &   6 &  4 &  1 \ *    2  &  8 &  12 &  8 &  2 \ *    0  &  0 &   0 &  0 &  0 \ *    -2 & -8 & -12 & -8 & -2 \ *    -1 & -4 &  -6 & -4 & -1 \ *  \end{array} \right)
  --} \right)
  -- * \f]
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned horizontal Sobel filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelHorizBorder_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10007
   pragma Import (C, nppiFilterSobelHorizBorder_8u_C1R, "nppiFilterSobelHorizBorder_8u_C1R");

  --*
  -- * Three channel 8-bit unsigned horizontal Sobel filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelHorizBorder_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10023
   pragma Import (C, nppiFilterSobelHorizBorder_8u_C3R, "nppiFilterSobelHorizBorder_8u_C3R");

  --*
  -- * Four channel 8-bit unsigned horizontal Sobel filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelHorizBorder_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10039
   pragma Import (C, nppiFilterSobelHorizBorder_8u_C4R, "nppiFilterSobelHorizBorder_8u_C4R");

  --*
  -- * Four channel 16-bit signed horizontal Sobel filter with border control, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelHorizBorder_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10055
   pragma Import (C, nppiFilterSobelHorizBorder_8u_AC4R, "nppiFilterSobelHorizBorder_8u_AC4R");

  --*
  -- * Single channel 16-bit signed horizontal Sobel filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelHorizBorder_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10071
   pragma Import (C, nppiFilterSobelHorizBorder_16s_C1R, "nppiFilterSobelHorizBorder_16s_C1R");

  --*
  -- * Three channel 16-bit signed horizontal Sobel filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelHorizBorder_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10087
   pragma Import (C, nppiFilterSobelHorizBorder_16s_C3R, "nppiFilterSobelHorizBorder_16s_C3R");

  --*
  -- * Four channel 16-bit signed horizontal Sobel filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelHorizBorder_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10103
   pragma Import (C, nppiFilterSobelHorizBorder_16s_C4R, "nppiFilterSobelHorizBorder_16s_C4R");

  --*
  -- * Four channel 8-bit unsigned horizontal Sobel filter with border control, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelHorizBorder_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10119
   pragma Import (C, nppiFilterSobelHorizBorder_16s_AC4R, "nppiFilterSobelHorizBorder_16s_AC4R");

  --*
  -- * Single channel 32-bit floating-point horizontal Sobel filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelHorizBorder_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10135
   pragma Import (C, nppiFilterSobelHorizBorder_32f_C1R, "nppiFilterSobelHorizBorder_32f_C1R");

  --*
  -- * Three channel 32-bit floating-point horizontal Sobel filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelHorizBorder_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10151
   pragma Import (C, nppiFilterSobelHorizBorder_32f_C3R, "nppiFilterSobelHorizBorder_32f_C3R");

  --*
  -- * Four channel 32-bit floating-point horizontal Sobel filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelHorizBorder_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10167
   pragma Import (C, nppiFilterSobelHorizBorder_32f_C4R, "nppiFilterSobelHorizBorder_32f_C4R");

  --*
  -- * Four channel 32-bit floating-point horizontal Sobel filter with border control, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelHorizBorder_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10183
   pragma Import (C, nppiFilterSobelHorizBorder_32f_AC4R, "nppiFilterSobelHorizBorder_32f_AC4R");

  --*
  -- * Single channel 8-bit unsigned to 16-bit signed horizontal Sobel filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelHorizBorder_8u16s_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10200
   pragma Import (C, nppiFilterSobelHorizBorder_8u16s_C1R, "nppiFilterSobelHorizBorder_8u16s_C1R");

  --*
  -- * Single channel 8-bit signed to 16-bit signed horizontal Sobel filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelHorizBorder_8s16s_C1R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10218
   pragma Import (C, nppiFilterSobelHorizBorder_8s16s_C1R, "nppiFilterSobelHorizBorder_8s16s_C1R");

  --*
  -- * Single channel 32-bit floating-point horizontal Sobel filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelHorizMaskBorder_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10236
   pragma Import (C, nppiFilterSobelHorizMaskBorder_32f_C1R, "nppiFilterSobelHorizMaskBorder_32f_C1R");

  --* @} FilterSobelHorizBorder  
  --* @name FilterSobelVertBorder 
  -- *
  -- * Filters the image using a vertical Sobel filter kernel with border control:
  -- *
  -- * \f[
  -- *  \left( \begin{array}{rrr}
  -- *    -1 & 0 & 1 \ *    -2 & 0 & 2 \ *    -1 & 0 & 1 \ *  \end{array} \right)
  --ight)
  -- *  \left( \begin{array}{rrrrr}
  -- *    -1 &  -2 & 0 &  2 & 1 \ *    -4 &  -8 & 0 &  8 & 4 \ *    -6 & -12 & 0 & 12 & 6 \ *    -4 &  -8 & 0 &  8 & 4 \ *    -1 &  -2 & 0 &  2 & 1 \ *  \end{array} \right)
  --} \right)
  -- * \f]
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned vertical Sobel filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelVertBorder_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10279
   pragma Import (C, nppiFilterSobelVertBorder_8u_C1R, "nppiFilterSobelVertBorder_8u_C1R");

  --*
  -- * Three channel 8-bit unsigned vertical Sobel filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelVertBorder_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10295
   pragma Import (C, nppiFilterSobelVertBorder_8u_C3R, "nppiFilterSobelVertBorder_8u_C3R");

  --*
  -- * Four channel 8-bit unsigned vertical Sobel filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelVertBorder_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10311
   pragma Import (C, nppiFilterSobelVertBorder_8u_C4R, "nppiFilterSobelVertBorder_8u_C4R");

  --*
  -- * Four channel 16-bit signed vertical Sobel filter with border control, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelVertBorder_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10327
   pragma Import (C, nppiFilterSobelVertBorder_8u_AC4R, "nppiFilterSobelVertBorder_8u_AC4R");

  --*
  -- * Single channel 16-bit signed vertical Sobel filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelVertBorder_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10343
   pragma Import (C, nppiFilterSobelVertBorder_16s_C1R, "nppiFilterSobelVertBorder_16s_C1R");

  --*
  -- * Three channel 16-bit signed vertical Sobel filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelVertBorder_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10359
   pragma Import (C, nppiFilterSobelVertBorder_16s_C3R, "nppiFilterSobelVertBorder_16s_C3R");

  --*
  -- * Four channel 16-bit signed vertical Sobel filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelVertBorder_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10375
   pragma Import (C, nppiFilterSobelVertBorder_16s_C4R, "nppiFilterSobelVertBorder_16s_C4R");

  --*
  -- * Four channel 8-bit unsigned vertical Sobel filter with border control, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelVertBorder_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10391
   pragma Import (C, nppiFilterSobelVertBorder_16s_AC4R, "nppiFilterSobelVertBorder_16s_AC4R");

  --*
  -- * Single channel 32-bit floating-point vertical Sobel filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelVertBorder_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10407
   pragma Import (C, nppiFilterSobelVertBorder_32f_C1R, "nppiFilterSobelVertBorder_32f_C1R");

  --*
  -- * Three channel 32-bit floating-point vertical Sobel filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelVertBorder_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10423
   pragma Import (C, nppiFilterSobelVertBorder_32f_C3R, "nppiFilterSobelVertBorder_32f_C3R");

  --*
  -- * Four channel 32-bit floating-point vertical Sobel filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelVertBorder_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10439
   pragma Import (C, nppiFilterSobelVertBorder_32f_C4R, "nppiFilterSobelVertBorder_32f_C4R");

  --*
  -- * Four channel 32-bit floating-point vertical Sobel filter with border control, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelVertBorder_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10455
   pragma Import (C, nppiFilterSobelVertBorder_32f_AC4R, "nppiFilterSobelVertBorder_32f_AC4R");

  --*
  -- * Single channel 8-bit unsigned to 16-bit signed vertical Sobel filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelVertBorder_8u16s_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10472
   pragma Import (C, nppiFilterSobelVertBorder_8u16s_C1R, "nppiFilterSobelVertBorder_8u16s_C1R");

  --*
  -- * Single channel 8-bit signed to 16-bit signed vertical Sobel filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelVertBorder_8s16s_C1R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10490
   pragma Import (C, nppiFilterSobelVertBorder_8s16s_C1R, "nppiFilterSobelVertBorder_8s16s_C1R");

  --*
  -- * Single channel 32-bit floating-point vertical Sobel filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelVertMaskBorder_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10508
   pragma Import (C, nppiFilterSobelVertMaskBorder_32f_C1R, "nppiFilterSobelVertMaskBorder_32f_C1R");

  --* @} FilterSobelVertBorder  
  --* @name FilterSobelHorizSecondBorder
  -- *
  -- * Filters the image using a second derivative, horizontal Sobel filter kernel with border control:
  -- *
  -- * \f[
  -- *  \left( \begin{array}{rrr}
  -- *     1 &   2 &   1 \ *    -2 &  -4 &  -2 \ *     1 &   2 &   1 \ *  \end{array} \right)
  --ight)
  -- *  \left( \begin{array}{rrrrr}
  -- *     1  &  4 &   6 &  4 &  1 \ *     0  &  0 &   0 &  0 &  0 \ *    -2  & -8 & -12 & -8 & -2 \ *     0  &  0 &   0 &  0 &  0 \ *     1  &  4 &   6 &  4 &  1 \ *  \end{array} \right)
  --} \right)
  -- * \f]
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned to 16-bit signed second derivative, horizontal Sobel filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelHorizSecondBorder_8u16s_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10552
   pragma Import (C, nppiFilterSobelHorizSecondBorder_8u16s_C1R, "nppiFilterSobelHorizSecondBorder_8u16s_C1R");

  --*
  -- * Single channel 8-bit signed to 16-bit signed second derivative, horizontal Sobel filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelHorizSecondBorder_8s16s_C1R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10570
   pragma Import (C, nppiFilterSobelHorizSecondBorder_8s16s_C1R, "nppiFilterSobelHorizSecondBorder_8s16s_C1R");

  --*
  -- * Single channel 32-bit floating-point second derivative, horizontal Sobel filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelHorizSecondBorder_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10587
   pragma Import (C, nppiFilterSobelHorizSecondBorder_32f_C1R, "nppiFilterSobelHorizSecondBorder_32f_C1R");

  --* @} FilterSobelHorizSecondBorder  
  --* @name FilterSobelVertSecondBorder
  -- *
  -- * Filters the image using a second derivative, vertical Sobel filter kernel with border control:
  -- *
  -- * \f[
  -- *  \left( \begin{array}{rrr}
  --     *    1 & -2 & 1 \     *    2 & -4 & 2 \     *    1 & -2 & 1 \ *  \end{array} \right)
  --ight)
  -- *  \left( \begin{array}{rrrrr}
  -- *     1 & 0 &  -2 & 0 & 1 \ *     4 & 0 &  -8 & 0 & 4 \ *     6 & 0 & -12 & 0 & 6 \ *     4 & 0 &  -8 & 0 & 4 \ *     1 & 0 &  -2 & 0 & 1 \ *  \end{array} \right)
  --} \right)
  -- * \f]
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned to 16-bit signed second derivative, vertical Sobel filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelVertSecondBorder_8u16s_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10630
   pragma Import (C, nppiFilterSobelVertSecondBorder_8u16s_C1R, "nppiFilterSobelVertSecondBorder_8u16s_C1R");

  --*
  -- * Single channel 8-bit signed to 16-bit signed second derivative, vertical Sobel filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelVertSecondBorder_8s16s_C1R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10648
   pragma Import (C, nppiFilterSobelVertSecondBorder_8s16s_C1R, "nppiFilterSobelVertSecondBorder_8s16s_C1R");

  --*
  -- * Single channel 32-bit floating-point second derivative, vertical Sobel filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelVertSecondBorder_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10665
   pragma Import (C, nppiFilterSobelVertSecondBorder_32f_C1R, "nppiFilterSobelVertSecondBorder_32f_C1R");

  --* @} FilterSobelVertSecondBorder  
  --* @name FilterSobelCrossBorder
  -- *
  -- * Filters the image using a second cross derivative Sobel filter kernel with border control:
  -- *
  -- * \f[
  -- *  \left( \begin{array}{rrr}
  -- *    -1 & 0 &  1 \ *     0 & 0 &  0 \ *     1 & 0 & -1 \ *  \end{array} \right)
  --ight)
  -- *  \left( \begin{array}{rrrrr}
  -- *    -1 & -2 & 0 &  2 &  1 \ *    -2 & -4 & 0 &  4 &  2 \ *     0 &  0 & 0 &  0 &  0 \ *     2 &  4 & 0 & -4 & -2 \ *     1 &  2 & 0 & -2 & -1 \ *  \end{array} \right)
  --} \right)
  -- * \f]
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned to 16-bit signed second cross derivative Sobel filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelCrossBorder_8u16s_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10708
   pragma Import (C, nppiFilterSobelCrossBorder_8u16s_C1R, "nppiFilterSobelCrossBorder_8u16s_C1R");

  --*
  -- * Single channel 8-bit signed to 16-bit signed second cross derivative Sobel filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelCrossBorder_8s16s_C1R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10726
   pragma Import (C, nppiFilterSobelCrossBorder_8s16s_C1R, "nppiFilterSobelCrossBorder_8s16s_C1R");

  --*
  -- * Single channel 32-bit floating-point second cross derivative Sobel filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSobelCrossBorder_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10743
   pragma Import (C, nppiFilterSobelCrossBorder_32f_C1R, "nppiFilterSobelCrossBorder_32f_C1R");

  --* @} FilterSobelCrossBorder  
  --* @name FilterRobertsDown
  -- *
  -- * Filters the image using a horizontal Roberts filter kernel:
  -- *
  -- * \f[
  -- *  \left( \begin{array}{rrr}
  -- *   0 & 0 &  0 \ *   0 & 1 &  0 \ *   0 & 0 & -1 \ *  \end{array} \right)
  --ight)
  -- * \f]
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned horizontal Roberts filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsDown_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10775
   pragma Import (C, nppiFilterRobertsDown_8u_C1R, "nppiFilterRobertsDown_8u_C1R");

  --*
  -- * Three channel 8-bit unsigned horizontal Roberts filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsDown_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10788
   pragma Import (C, nppiFilterRobertsDown_8u_C3R, "nppiFilterRobertsDown_8u_C3R");

  --*
  -- * Four channel 8-bit unsigned horizontal Roberts filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsDown_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10801
   pragma Import (C, nppiFilterRobertsDown_8u_C4R, "nppiFilterRobertsDown_8u_C4R");

  --*
  -- * Four channel 8-bit unsigned horizontal Roberts filter, ignoring alpha-channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsDown_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10814
   pragma Import (C, nppiFilterRobertsDown_8u_AC4R, "nppiFilterRobertsDown_8u_AC4R");

  --*
  -- * Single channel 16-bit signed horizontal Roberts filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsDown_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10827
   pragma Import (C, nppiFilterRobertsDown_16s_C1R, "nppiFilterRobertsDown_16s_C1R");

  --*
  -- * Three channel 16-bit signed horizontal Roberts filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsDown_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10840
   pragma Import (C, nppiFilterRobertsDown_16s_C3R, "nppiFilterRobertsDown_16s_C3R");

  --*
  -- * Four channel 16-bit signed horizontal Roberts filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsDown_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10853
   pragma Import (C, nppiFilterRobertsDown_16s_C4R, "nppiFilterRobertsDown_16s_C4R");

  --*
  -- * Four channel 16-bit signed horizontal Roberts filter, ignoring alpha-channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsDown_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10866
   pragma Import (C, nppiFilterRobertsDown_16s_AC4R, "nppiFilterRobertsDown_16s_AC4R");

  --*
  -- * Single channel 32-bit floating-point horizontal Roberts filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsDown_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10879
   pragma Import (C, nppiFilterRobertsDown_32f_C1R, "nppiFilterRobertsDown_32f_C1R");

  --*
  -- * Three channel 32-bit floating-point horizontal Roberts filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsDown_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10892
   pragma Import (C, nppiFilterRobertsDown_32f_C3R, "nppiFilterRobertsDown_32f_C3R");

  --*
  -- * Four channel 32-bit floating-point horizontal Roberts filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsDown_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10905
   pragma Import (C, nppiFilterRobertsDown_32f_C4R, "nppiFilterRobertsDown_32f_C4R");

  --*
  -- * Four channel 32-bit floating-point horizontal Roberts filter, ignoring alpha-channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsDown_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10918
   pragma Import (C, nppiFilterRobertsDown_32f_AC4R, "nppiFilterRobertsDown_32f_AC4R");

  --* @} FilterRobertsDown  
  --* @name FilterRobertsDownBorder
  -- *
  -- * Filters the image using a horizontal Roberts filter kernel with border control.  If any portion of the mask overlaps the source
  -- * image boundary the requested border type operation is applied to all mask pixels
  -- * which fall outside of the source image.
  -- *
  -- * Currently only the NPP_BORDER_REPLICATE border type operation is supported.
  -- *
  -- * \f[
  -- *  \left( \begin{array}{rrr}
  -- *   0 & 0 &  0 \ *   0 & 1 &  0 \ *   0 & 0 & -1 \ *  \end{array} \right)
  --ight)
  -- * \f]
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned horizontal Roberts filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsDownBorder_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10956
   pragma Import (C, nppiFilterRobertsDownBorder_8u_C1R, "nppiFilterRobertsDownBorder_8u_C1R");

  --*
  -- * Three channel 8-bit unsigned horizontal Roberts filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsDownBorder_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10972
   pragma Import (C, nppiFilterRobertsDownBorder_8u_C3R, "nppiFilterRobertsDownBorder_8u_C3R");

  --*
  -- * Four channel 8-bit unsigned horizontal Roberts filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsDownBorder_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:10988
   pragma Import (C, nppiFilterRobertsDownBorder_8u_C4R, "nppiFilterRobertsDownBorder_8u_C4R");

  --*
  -- * Four channel 8-bit unsigned horizontal Roberts filter with border control, ignoring alpha-channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsDownBorder_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11004
   pragma Import (C, nppiFilterRobertsDownBorder_8u_AC4R, "nppiFilterRobertsDownBorder_8u_AC4R");

  --*
  -- * Single channel 16-bit signed horizontal Roberts filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsDownBorder_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11020
   pragma Import (C, nppiFilterRobertsDownBorder_16s_C1R, "nppiFilterRobertsDownBorder_16s_C1R");

  --*
  -- * Three channel 16-bit signed horizontal Roberts filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsDownBorder_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11036
   pragma Import (C, nppiFilterRobertsDownBorder_16s_C3R, "nppiFilterRobertsDownBorder_16s_C3R");

  --*
  -- * Four channel 16-bit signed horizontal Roberts filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsDownBorder_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11052
   pragma Import (C, nppiFilterRobertsDownBorder_16s_C4R, "nppiFilterRobertsDownBorder_16s_C4R");

  --*
  -- * Four channel 16-bit signed horizontal Roberts filter with border control, ignoring alpha-channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsDownBorder_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11068
   pragma Import (C, nppiFilterRobertsDownBorder_16s_AC4R, "nppiFilterRobertsDownBorder_16s_AC4R");

  --*
  -- * Single channel 32-bit floating-point horizontal Roberts filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsDownBorder_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11084
   pragma Import (C, nppiFilterRobertsDownBorder_32f_C1R, "nppiFilterRobertsDownBorder_32f_C1R");

  --*
  -- * Three channel 32-bit floating-point horizontal Roberts filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsDownBorder_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11100
   pragma Import (C, nppiFilterRobertsDownBorder_32f_C3R, "nppiFilterRobertsDownBorder_32f_C3R");

  --*
  -- * Four channel 32-bit floating-point horizontal Roberts filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsDownBorder_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11116
   pragma Import (C, nppiFilterRobertsDownBorder_32f_C4R, "nppiFilterRobertsDownBorder_32f_C4R");

  --*
  -- * Four channel 32-bit floating-point horizontal Roberts filter with border control, ignoring alpha-channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsDownBorder_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11132
   pragma Import (C, nppiFilterRobertsDownBorder_32f_AC4R, "nppiFilterRobertsDownBorder_32f_AC4R");

  --* @} FilterRobertsDownBorder  
  --* @name FilterRobertsUp
  -- *
  -- * Filters the image using a vertical Roberts filter kernel:
  -- *
  -- * \f[
  -- *  \left( \begin{array}{rrr}
  -- *   0 & 0 &  0 \ *   0 & 1 &  0 \ *  -1 & 0 &  0 \ *  \end{array} \right)
  --ight)
  -- * \f]
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned vertical Roberts filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsUp_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11163
   pragma Import (C, nppiFilterRobertsUp_8u_C1R, "nppiFilterRobertsUp_8u_C1R");

  --*
  -- * Three channel 8-bit unsigned vertical Roberts filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsUp_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11176
   pragma Import (C, nppiFilterRobertsUp_8u_C3R, "nppiFilterRobertsUp_8u_C3R");

  --*
  -- * Four channel 8-bit unsigned vertical Roberts filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsUp_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11189
   pragma Import (C, nppiFilterRobertsUp_8u_C4R, "nppiFilterRobertsUp_8u_C4R");

  --*
  -- * Four channel 8-bit unsigned vertical Roberts filter, ignoring alpha-channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsUp_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11202
   pragma Import (C, nppiFilterRobertsUp_8u_AC4R, "nppiFilterRobertsUp_8u_AC4R");

  --*
  -- * Single channel 16-bit signed vertical Roberts filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsUp_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11215
   pragma Import (C, nppiFilterRobertsUp_16s_C1R, "nppiFilterRobertsUp_16s_C1R");

  --*
  -- * Three channel 16-bit signed vertical Roberts filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsUp_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11228
   pragma Import (C, nppiFilterRobertsUp_16s_C3R, "nppiFilterRobertsUp_16s_C3R");

  --*
  -- * Four channel 16-bit signed vertical Roberts filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsUp_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11241
   pragma Import (C, nppiFilterRobertsUp_16s_C4R, "nppiFilterRobertsUp_16s_C4R");

  --*
  -- * Four channel 16-bit signed vertical Roberts filter, ignoring alpha-channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsUp_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11254
   pragma Import (C, nppiFilterRobertsUp_16s_AC4R, "nppiFilterRobertsUp_16s_AC4R");

  --*
  -- * Single channel 32-bit floating-point vertical Roberts filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsUp_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11267
   pragma Import (C, nppiFilterRobertsUp_32f_C1R, "nppiFilterRobertsUp_32f_C1R");

  --*
  -- * Three channel 32-bit floating-point vertical Roberts filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsUp_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11280
   pragma Import (C, nppiFilterRobertsUp_32f_C3R, "nppiFilterRobertsUp_32f_C3R");

  --*
  -- * Four channel 32-bit floating-point vertical Roberts filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsUp_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11293
   pragma Import (C, nppiFilterRobertsUp_32f_C4R, "nppiFilterRobertsUp_32f_C4R");

  --*
  -- * Four channel 32-bit floating-point vertical Roberts filter, ignoring alpha-channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsUp_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11306
   pragma Import (C, nppiFilterRobertsUp_32f_AC4R, "nppiFilterRobertsUp_32f_AC4R");

  --* @} FilterRobertsUp  
  --* @name FilterRobertsUpBorder
  -- *
  -- * Filters the image using a vertical Roberts filter kernel with border control.  If any portion of the mask overlaps the source
  -- * image boundary the requested border type operation is applied to all mask pixels
  -- * which fall outside of the source image.
  -- *
  -- * Currently only the NPP_BORDER_REPLICATE border type operation is supported.
  -- *
  -- * \f[
  -- *  \left( \begin{array}{rrr}
  -- *   0 & 0 &  0 \ *   0 & 1 &  0 \ *  -1 & 0 &  0 \ *  \end{array} \right)
  --ight)
  -- * \f]
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned vertical Roberts filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsUpBorder_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11344
   pragma Import (C, nppiFilterRobertsUpBorder_8u_C1R, "nppiFilterRobertsUpBorder_8u_C1R");

  --*
  -- * Three channel 8-bit unsigned vertical Roberts filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsUpBorder_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11360
   pragma Import (C, nppiFilterRobertsUpBorder_8u_C3R, "nppiFilterRobertsUpBorder_8u_C3R");

  --*
  -- * Four channel 8-bit unsigned vertical Roberts filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsUpBorder_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11376
   pragma Import (C, nppiFilterRobertsUpBorder_8u_C4R, "nppiFilterRobertsUpBorder_8u_C4R");

  --*
  -- * Four channel 8-bit unsigned vertical Roberts filter with border control, ignoring alpha-channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsUpBorder_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11392
   pragma Import (C, nppiFilterRobertsUpBorder_8u_AC4R, "nppiFilterRobertsUpBorder_8u_AC4R");

  --*
  -- * Single channel 16-bit signed vertical Roberts filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsUpBorder_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11408
   pragma Import (C, nppiFilterRobertsUpBorder_16s_C1R, "nppiFilterRobertsUpBorder_16s_C1R");

  --*
  -- * Three channel 16-bit signed vertical Roberts filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsUpBorder_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11424
   pragma Import (C, nppiFilterRobertsUpBorder_16s_C3R, "nppiFilterRobertsUpBorder_16s_C3R");

  --*
  -- * Four channel 16-bit signed vertical Roberts filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsUpBorder_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11440
   pragma Import (C, nppiFilterRobertsUpBorder_16s_C4R, "nppiFilterRobertsUpBorder_16s_C4R");

  --*
  -- * Four channel 16-bit signed vertical Roberts filter with border control, ignoring alpha-channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsUpBorder_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11456
   pragma Import (C, nppiFilterRobertsUpBorder_16s_AC4R, "nppiFilterRobertsUpBorder_16s_AC4R");

  --*
  -- * Single channel 32-bit floating-point vertical Roberts filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsUpBorder_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11472
   pragma Import (C, nppiFilterRobertsUpBorder_32f_C1R, "nppiFilterRobertsUpBorder_32f_C1R");

  --*
  -- * Three channel 32-bit floating-point vertical Roberts filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsUpBorder_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11488
   pragma Import (C, nppiFilterRobertsUpBorder_32f_C3R, "nppiFilterRobertsUpBorder_32f_C3R");

  --*
  -- * Four channel 32-bit floating-point vertical Roberts filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsUpBorder_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11504
   pragma Import (C, nppiFilterRobertsUpBorder_32f_C4R, "nppiFilterRobertsUpBorder_32f_C4R");

  --*
  -- * Four channel 32-bit floating-point vertical Roberts filter with border control, ignoring alpha-channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterRobertsUpBorder_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11520
   pragma Import (C, nppiFilterRobertsUpBorder_32f_AC4R, "nppiFilterRobertsUpBorder_32f_AC4R");

  --* @} FilterRobertsUpBorder  
  --* @name FilterLaplace
  -- *
  -- * Filters the image using a Laplacian filter kernel:
  -- *
  -- * \f[
  -- *  \left( \begin{array}{rrr}
  -- *   -1 & -1 & -1 \ *   -1 &  8 & -1 \ *   -1 & -1 & -1 \ *  \end{array} \right)
  --ight)
  --  *  \left( \begin{array}{rrrrr}
  -- *   -1 & -3 & -4 & -3 & -1 \ *   -3 &  0 &  6 &  0 & -3 \ *   -4 &  6 & 20 &  6 & -4 \ *   -3 &  0 &  6 &  0 & -3 \ *   -1 & -3 & -4 & -3 & -1 \ *  \end{array} \right)
  --} \right)
  -- * \f]
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned Laplace filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLaplace_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11561
   pragma Import (C, nppiFilterLaplace_8u_C1R, "nppiFilterLaplace_8u_C1R");

  --*
  -- * Three channel 8-bit unsigned Laplace filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLaplace_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11576
   pragma Import (C, nppiFilterLaplace_8u_C3R, "nppiFilterLaplace_8u_C3R");

  --*
  -- * Four channel 8-bit unsigned Laplace filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLaplace_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11591
   pragma Import (C, nppiFilterLaplace_8u_C4R, "nppiFilterLaplace_8u_C4R");

  --*
  -- * Four channel 8-bit unsigned Laplace filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLaplace_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11606
   pragma Import (C, nppiFilterLaplace_8u_AC4R, "nppiFilterLaplace_8u_AC4R");

  --*
  -- * Single channel 16-bit signed Laplace filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLaplace_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11621
   pragma Import (C, nppiFilterLaplace_16s_C1R, "nppiFilterLaplace_16s_C1R");

  --*
  -- * Three channel 16-bit signed Laplace filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLaplace_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11636
   pragma Import (C, nppiFilterLaplace_16s_C3R, "nppiFilterLaplace_16s_C3R");

  --*
  -- * Four channel 16-bit signed Laplace filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLaplace_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11651
   pragma Import (C, nppiFilterLaplace_16s_C4R, "nppiFilterLaplace_16s_C4R");

  --*
  -- * Four channel 16-bit signed Laplace filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLaplace_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11666
   pragma Import (C, nppiFilterLaplace_16s_AC4R, "nppiFilterLaplace_16s_AC4R");

  --*
  -- * Single channel 32-bit floating-point Laplace filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLaplace_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11681
   pragma Import (C, nppiFilterLaplace_32f_C1R, "nppiFilterLaplace_32f_C1R");

  --*
  -- * Three channel 32-bit floating-point Laplace filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLaplace_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11696
   pragma Import (C, nppiFilterLaplace_32f_C3R, "nppiFilterLaplace_32f_C3R");

  --*
  -- * Four channel 32-bit floating-point Laplace filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLaplace_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11711
   pragma Import (C, nppiFilterLaplace_32f_C4R, "nppiFilterLaplace_32f_C4R");

  --*
  -- * Four channel 32-bit floating-point Laplace filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLaplace_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11726
   pragma Import (C, nppiFilterLaplace_32f_AC4R, "nppiFilterLaplace_32f_AC4R");

  --*
  -- * Single channel 8-bit unsigned to 16-bit signed Laplace filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLaplace_8u16s_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11741
   pragma Import (C, nppiFilterLaplace_8u16s_C1R, "nppiFilterLaplace_8u16s_C1R");

  --*
  -- * Single channel 8-bit signed to 16-bit signed Laplace filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLaplace_8s16s_C1R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11756
   pragma Import (C, nppiFilterLaplace_8s16s_C1R, "nppiFilterLaplace_8s16s_C1R");

  --* @} FilterLaplace  
  --* @name FilterLaplaceBorder
  -- *
  -- * Filters the image using a Laplacian filter kernel with border control. If any portion of the mask overlaps the source
  -- * image boundary the requested border type operation is applied to all mask pixels
  -- * which fall outside of the source image.
  -- *
  -- * Currently only the NPP_BORDER_REPLICATE border type operation is supported.
  -- *
  -- * \f[
  -- *  \left( \begin{array}{rrr}
  -- *   -1 & -1 & -1 \ *   -1 &  8 & -1 \ *   -1 & -1 & -1 \ *  \end{array} \right)
  --ight)
  --  *  \left( \begin{array}{rrrrr}
  -- *   -1 & -3 & -4 & -3 & -1 \ *   -3 &  0 &  6 &  0 & -3 \ *   -4 &  6 & 20 &  6 & -4 \ *   -3 &  0 &  6 &  0 & -3 \ *   -1 & -3 & -4 & -3 & -1 \ *  \end{array} \right)
  --} \right)
  -- * \f]
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned Laplace filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLaplaceBorder_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11804
   pragma Import (C, nppiFilterLaplaceBorder_8u_C1R, "nppiFilterLaplaceBorder_8u_C1R");

  --*
  -- * Three channel 8-bit unsigned Laplace filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLaplaceBorder_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11822
   pragma Import (C, nppiFilterLaplaceBorder_8u_C3R, "nppiFilterLaplaceBorder_8u_C3R");

  --*
  -- * Four channel 8-bit unsigned Laplace filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLaplaceBorder_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11840
   pragma Import (C, nppiFilterLaplaceBorder_8u_C4R, "nppiFilterLaplaceBorder_8u_C4R");

  --*
  -- * Four channel 8-bit unsigned Laplace filter with border control, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLaplaceBorder_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11858
   pragma Import (C, nppiFilterLaplaceBorder_8u_AC4R, "nppiFilterLaplaceBorder_8u_AC4R");

  --*
  -- * Single channel 16-bit signed Laplace filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLaplaceBorder_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11876
   pragma Import (C, nppiFilterLaplaceBorder_16s_C1R, "nppiFilterLaplaceBorder_16s_C1R");

  --*
  -- * Three channel 16-bit signed Laplace filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLaplaceBorder_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11894
   pragma Import (C, nppiFilterLaplaceBorder_16s_C3R, "nppiFilterLaplaceBorder_16s_C3R");

  --*
  -- * Four channel 16-bit signed Laplace filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLaplaceBorder_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11912
   pragma Import (C, nppiFilterLaplaceBorder_16s_C4R, "nppiFilterLaplaceBorder_16s_C4R");

  --*
  -- * Four channel 16-bit signed Laplace filter with border control, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLaplaceBorder_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11930
   pragma Import (C, nppiFilterLaplaceBorder_16s_AC4R, "nppiFilterLaplaceBorder_16s_AC4R");

  --*
  -- * Single channel 32-bit floating-point Laplace filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLaplaceBorder_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11948
   pragma Import (C, nppiFilterLaplaceBorder_32f_C1R, "nppiFilterLaplaceBorder_32f_C1R");

  --*
  -- * Three channel 32-bit floating-point Laplace filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLaplaceBorder_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11966
   pragma Import (C, nppiFilterLaplaceBorder_32f_C3R, "nppiFilterLaplaceBorder_32f_C3R");

  --*
  -- * Four channel 32-bit floating-point Laplace filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLaplaceBorder_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:11984
   pragma Import (C, nppiFilterLaplaceBorder_32f_C4R, "nppiFilterLaplaceBorder_32f_C4R");

  --*
  -- * Four channel 32-bit floating-point Laplace filter with border control, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLaplaceBorder_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12002
   pragma Import (C, nppiFilterLaplaceBorder_32f_AC4R, "nppiFilterLaplaceBorder_32f_AC4R");

  --*
  -- * Single channel 8-bit unsigned to 16-bit signed Laplace filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLaplaceBorder_8u16s_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12020
   pragma Import (C, nppiFilterLaplaceBorder_8u16s_C1R, "nppiFilterLaplaceBorder_8u16s_C1R");

  --*
  -- * Single channel 8-bit signed to 16-bit signed Laplace filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLaplaceBorder_8s16s_C1R
     (pSrc : access nppdefs_h.Npp8s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12038
   pragma Import (C, nppiFilterLaplaceBorder_8s16s_C1R, "nppiFilterLaplaceBorder_8s16s_C1R");

  --* @} FilterLaplaceBorder  
  --* @name FilterGauss
  -- *
  -- * Filters the image using a Gaussian filter kernel:
  -- *
  -- * Note that all FilterGauss functions currently support mask sizes up to 15x15.
  -- *
  -- * \f[
  -- *  \left( \begin{array}{rrr}
  -- *      1/16  & 2/16  & 1/16 \ *      2/16  & 4/16  & 2/16 \ *      1/16  & 2/16  & 1/16 \ *  \end{array} \right)
  --ight)
  -- *  \left( \begin{array}{rrrrr}
  -- *       2/571 &  7/571 &  12/571 &  7/571 &  2/571 \ *       7/571 & 31/571 &  52/571 & 31/571 &  7/571 \ *      12/571 & 52/571 & 127/571 & 52/571 & 12/571 \ *       7/571 & 31/571 &  52/571 & 31/571 &  7/571 \ *       2/571 &  7/571 &  12/571 &  7/571 &  2/571 \ *  \end{array} \right)
  --} \right)
  -- * \f]
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned Gauss filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGauss_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12080
   pragma Import (C, nppiFilterGauss_8u_C1R, "nppiFilterGauss_8u_C1R");

  --*
  -- * Three channel 8-bit unsigned Gauss filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGauss_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12095
   pragma Import (C, nppiFilterGauss_8u_C3R, "nppiFilterGauss_8u_C3R");

  --*
  -- * Four channel 8-bit unsigned Gauss filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGauss_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12110
   pragma Import (C, nppiFilterGauss_8u_C4R, "nppiFilterGauss_8u_C4R");

  --*
  -- * Four channel 8-bit unsigned Gauss filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGauss_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12125
   pragma Import (C, nppiFilterGauss_8u_AC4R, "nppiFilterGauss_8u_AC4R");

  --*
  -- * Single channel 16-bit unsigned Gauss filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGauss_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12140
   pragma Import (C, nppiFilterGauss_16u_C1R, "nppiFilterGauss_16u_C1R");

  --*
  -- * Three channel 16-bit unsigned Gauss filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGauss_16u_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12155
   pragma Import (C, nppiFilterGauss_16u_C3R, "nppiFilterGauss_16u_C3R");

  --*
  -- * Four channel 16-bit unsigned Gauss filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGauss_16u_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12170
   pragma Import (C, nppiFilterGauss_16u_C4R, "nppiFilterGauss_16u_C4R");

  --*
  -- * Four channel 16-bit unsigned Gauss filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGauss_16u_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12185
   pragma Import (C, nppiFilterGauss_16u_AC4R, "nppiFilterGauss_16u_AC4R");

  --*
  -- * Single channel 16-bit signed Gauss filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGauss_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12200
   pragma Import (C, nppiFilterGauss_16s_C1R, "nppiFilterGauss_16s_C1R");

  --*
  -- * Three channel 16-bit signed Gauss filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGauss_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12215
   pragma Import (C, nppiFilterGauss_16s_C3R, "nppiFilterGauss_16s_C3R");

  --*
  -- * Four channel 16-bit signed Gauss filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGauss_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12230
   pragma Import (C, nppiFilterGauss_16s_C4R, "nppiFilterGauss_16s_C4R");

  --*
  -- * Four channel 16-bit signed Gauss filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGauss_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12245
   pragma Import (C, nppiFilterGauss_16s_AC4R, "nppiFilterGauss_16s_AC4R");

  --*
  -- * Single channel 32-bit floating-point Gauss filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGauss_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12260
   pragma Import (C, nppiFilterGauss_32f_C1R, "nppiFilterGauss_32f_C1R");

  --*
  -- * Three channel 32-bit floating-point Gauss filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGauss_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12275
   pragma Import (C, nppiFilterGauss_32f_C3R, "nppiFilterGauss_32f_C3R");

  --*
  -- * Four channel 32-bit floating-point Gauss filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGauss_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12290
   pragma Import (C, nppiFilterGauss_32f_C4R, "nppiFilterGauss_32f_C4R");

  --*
  -- * Four channel 32-bit floating-point Gauss filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGauss_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12305
   pragma Import (C, nppiFilterGauss_32f_AC4R, "nppiFilterGauss_32f_AC4R");

  --* @} FilterGauss  
  --* @name FilterGaussAdvanced
  -- *
  -- * Filters the image using a separable Gaussian filter kernel with user supplied floating point coefficients:
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned Gauss filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nFilterTaps The number of filter taps where nFilterTaps =  2 * ((int)((float)ceil(radius) + 0.5F) ) + 1.
  -- * \param pKernel Pointer to an array of nFilterTaps kernel coefficients which sum to 1.0F. 
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussAdvanced_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nFilterTaps : int;
      pKernel : access nppdefs_h.Npp32f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12331
   pragma Import (C, nppiFilterGaussAdvanced_8u_C1R, "nppiFilterGaussAdvanced_8u_C1R");

  --*
  -- * Three channel 8-bit unsigned Gauss filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nFilterTaps The number of filter taps where nFilterTaps =  2 * ((int)((float)ceil(radius) + 0.5F) ) + 1.
  -- * \param pKernel Pointer to an array of nFilterTaps kernel coefficients which sum to 1.0F. 
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussAdvanced_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nFilterTaps : int;
      pKernel : access nppdefs_h.Npp32f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12347
   pragma Import (C, nppiFilterGaussAdvanced_8u_C3R, "nppiFilterGaussAdvanced_8u_C3R");

  --*
  -- * Four channel 8-bit unsigned Gauss filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nFilterTaps The number of filter taps where nFilterTaps =  2 * ((int)((float)ceil(radius) + 0.5F) ) + 1.
  -- * \param pKernel Pointer to an array of nFilterTaps kernel coefficients which sum to 1.0F. 
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussAdvanced_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nFilterTaps : int;
      pKernel : access nppdefs_h.Npp32f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12363
   pragma Import (C, nppiFilterGaussAdvanced_8u_C4R, "nppiFilterGaussAdvanced_8u_C4R");

  --*
  -- * Four channel 8-bit unsigned Gauss filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nFilterTaps The number of filter taps where nFilterTaps =  2 * ((int)((float)ceil(radius) + 0.5F) ) + 1.
  -- * \param pKernel Pointer to an array of nFilterTaps kernel coefficients which sum to 1.0F. 
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussAdvanced_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nFilterTaps : int;
      pKernel : access nppdefs_h.Npp32f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12379
   pragma Import (C, nppiFilterGaussAdvanced_8u_AC4R, "nppiFilterGaussAdvanced_8u_AC4R");

  --*
  -- * Single channel 16-bit unsigned Gauss filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nFilterTaps The number of filter taps where nFilterTaps =  2 * ((int)((float)ceil(radius) + 0.5F) ) + 1.
  -- * \param pKernel Pointer to an array of nFilterTaps kernel coefficients which sum to 1.0F. 
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussAdvanced_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nFilterTaps : int;
      pKernel : access nppdefs_h.Npp32f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12395
   pragma Import (C, nppiFilterGaussAdvanced_16u_C1R, "nppiFilterGaussAdvanced_16u_C1R");

  --*
  -- * Three channel 16-bit unsigned Gauss filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nFilterTaps The number of filter taps where nFilterTaps =  2 * ((int)((float)ceil(radius) + 0.5F) ) + 1.
  -- * \param pKernel Pointer to an array of nFilterTaps kernel coefficients which sum to 1.0F. 
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussAdvanced_16u_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nFilterTaps : int;
      pKernel : access nppdefs_h.Npp32f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12411
   pragma Import (C, nppiFilterGaussAdvanced_16u_C3R, "nppiFilterGaussAdvanced_16u_C3R");

  --*
  -- * Four channel 16-bit unsigned Gauss filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nFilterTaps The number of filter taps where nFilterTaps =  2 * ((int)((float)ceil(radius) + 0.5F) ) + 1.
  -- * \param pKernel Pointer to an array of nFilterTaps kernel coefficients which sum to 1.0F. 
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussAdvanced_16u_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nFilterTaps : int;
      pKernel : access nppdefs_h.Npp32f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12427
   pragma Import (C, nppiFilterGaussAdvanced_16u_C4R, "nppiFilterGaussAdvanced_16u_C4R");

  --*
  -- * Four channel 16-bit unsigned Gauss filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nFilterTaps The number of filter taps where nFilterTaps =  2 * ((int)((float)ceil(radius) + 0.5F) ) + 1.
  -- * \param pKernel Pointer to an array of nFilterTaps kernel coefficients which sum to 1.0F. 
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussAdvanced_16u_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nFilterTaps : int;
      pKernel : access nppdefs_h.Npp32f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12443
   pragma Import (C, nppiFilterGaussAdvanced_16u_AC4R, "nppiFilterGaussAdvanced_16u_AC4R");

  --*
  -- * Single channel 16-bit signed Gauss filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nFilterTaps The number of filter taps where nFilterTaps =  2 * ((int)((float)ceil(radius) + 0.5F) ) + 1.
  -- * \param pKernel Pointer to an array of nFilterTaps kernel coefficients which sum to 1.0F. 
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussAdvanced_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nFilterTaps : int;
      pKernel : access nppdefs_h.Npp32f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12459
   pragma Import (C, nppiFilterGaussAdvanced_16s_C1R, "nppiFilterGaussAdvanced_16s_C1R");

  --*
  -- * Three channel 16-bit signed Gauss filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nFilterTaps The number of filter taps where nFilterTaps =  2 * ((int)((float)ceil(radius) + 0.5F) ) + 1.
  -- * \param pKernel Pointer to an array of nFilterTaps kernel coefficients which sum to 1.0F. 
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussAdvanced_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nFilterTaps : int;
      pKernel : access nppdefs_h.Npp32f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12475
   pragma Import (C, nppiFilterGaussAdvanced_16s_C3R, "nppiFilterGaussAdvanced_16s_C3R");

  --*
  -- * Four channel 16-bit signed Gauss filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nFilterTaps The number of filter taps where nFilterTaps =  2 * ((int)((float)ceil(radius) + 0.5F) ) + 1.
  -- * \param pKernel Pointer to an array of nFilterTaps kernel coefficients which sum to 1.0F. 
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussAdvanced_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nFilterTaps : int;
      pKernel : access nppdefs_h.Npp32f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12491
   pragma Import (C, nppiFilterGaussAdvanced_16s_C4R, "nppiFilterGaussAdvanced_16s_C4R");

  --*
  -- * Four channel 16-bit signed Gauss filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nFilterTaps The number of filter taps where nFilterTaps =  2 * ((int)((float)ceil(radius) + 0.5F) ) + 1.
  -- * \param pKernel Pointer to an array of nFilterTaps kernel coefficients which sum to 1.0F. 
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussAdvanced_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nFilterTaps : int;
      pKernel : access nppdefs_h.Npp32f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12507
   pragma Import (C, nppiFilterGaussAdvanced_16s_AC4R, "nppiFilterGaussAdvanced_16s_AC4R");

  --*
  -- * Single channel 32-bit floating-point Gauss filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nFilterTaps The number of filter taps where nFilterTaps =  2 * ((int)((float)ceil(radius) + 0.5F) ) + 1.
  -- * \param pKernel Pointer to an array of nFilterTaps kernel coefficients which sum to 1.0F. 
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussAdvanced_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nFilterTaps : int;
      pKernel : access nppdefs_h.Npp32f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12523
   pragma Import (C, nppiFilterGaussAdvanced_32f_C1R, "nppiFilterGaussAdvanced_32f_C1R");

  --*
  -- * Three channel 32-bit floating-point Gauss filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nFilterTaps The number of filter taps where nFilterTaps =  2 * ((int)((float)ceil(radius) + 0.5F) ) + 1.
  -- * \param pKernel Pointer to an array of nFilterTaps kernel coefficients which sum to 1.0F. 
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussAdvanced_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nFilterTaps : int;
      pKernel : access nppdefs_h.Npp32f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12539
   pragma Import (C, nppiFilterGaussAdvanced_32f_C3R, "nppiFilterGaussAdvanced_32f_C3R");

  --*
  -- * Four channel 32-bit floating-point Gauss filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nFilterTaps The number of filter taps where nFilterTaps =  2 * ((int)((float)ceil(radius) + 0.5F) ) + 1.
  -- * \param pKernel Pointer to an array of nFilterTaps kernel coefficients which sum to 1.0F. 
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussAdvanced_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nFilterTaps : int;
      pKernel : access nppdefs_h.Npp32f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12555
   pragma Import (C, nppiFilterGaussAdvanced_32f_C4R, "nppiFilterGaussAdvanced_32f_C4R");

  --*
  -- * Four channel 32-bit floating-point Gauss filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nFilterTaps The number of filter taps where nFilterTaps =  2 * ((int)((float)ceil(radius) + 0.5F) ) + 1.
  -- * \param pKernel Pointer to an array of nFilterTaps kernel coefficients which sum to 1.0F. 
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussAdvanced_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nFilterTaps : int;
      pKernel : access nppdefs_h.Npp32f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12571
   pragma Import (C, nppiFilterGaussAdvanced_32f_AC4R, "nppiFilterGaussAdvanced_32f_AC4R");

  --* @} FilterGaussAdvanced  
  --* @name FilterGaussBorder
  -- *
  -- * If any portion of the mask overlaps the source
  -- * image boundary the requested border type operation is applied to all mask pixels
  -- * which fall outside of the source image.
  -- *
  -- * Currently only the NPP_BORDER_REPLICATE border type operation is supported.
  -- *
  -- * Note that all FilterGaussBorder functions currently support mask sizes up to 15x15.
  -- *
  -- * Filters the image using a Gaussian filter kernel:
  -- *
  -- * \f[
  -- *  \left( \begin{array}{rrr}
  -- *      1/16  & 2/16  & 1/16 \ *      2/16  & 4/16  & 2/16 \ *      1/16  & 2/16  & 1/16 \ *  \end{array} \right)
  --ight)
  -- *  \left( \begin{array}{rrrrr}
  -- *       2/571 &  7/571 &  12/571 &  7/571 &  2/571 \ *       7/571 & 31/571 &  52/571 & 31/571 &  7/571 \ *      12/571 & 52/571 & 127/571 & 52/571 & 12/571 \ *       7/571 & 31/571 &  52/571 & 31/571 &  7/571 \ *       2/571 &  7/571 &  12/571 &  7/571 &  2/571 \ *  \end{array} \right)
  --} \right)
  -- * \f]
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned Gauss filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussBorder_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12622
   pragma Import (C, nppiFilterGaussBorder_8u_C1R, "nppiFilterGaussBorder_8u_C1R");

  --*
  -- * Three channel 8-bit unsigned Gauss filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussBorder_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12640
   pragma Import (C, nppiFilterGaussBorder_8u_C3R, "nppiFilterGaussBorder_8u_C3R");

  --*
  -- * Four channel 8-bit unsigned Gauss filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussBorder_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12658
   pragma Import (C, nppiFilterGaussBorder_8u_C4R, "nppiFilterGaussBorder_8u_C4R");

  --*
  -- * Four channel 8-bit unsigned Gauss filter with border control, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussBorder_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12676
   pragma Import (C, nppiFilterGaussBorder_8u_AC4R, "nppiFilterGaussBorder_8u_AC4R");

  --*
  -- * Single channel 16-bit unsigned Gauss filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussBorder_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12694
   pragma Import (C, nppiFilterGaussBorder_16u_C1R, "nppiFilterGaussBorder_16u_C1R");

  --*
  -- * Three channel 16-bit unsigned Gauss filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussBorder_16u_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12712
   pragma Import (C, nppiFilterGaussBorder_16u_C3R, "nppiFilterGaussBorder_16u_C3R");

  --*
  -- * Four channel 16-bit unsigned Gauss filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussBorder_16u_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12730
   pragma Import (C, nppiFilterGaussBorder_16u_C4R, "nppiFilterGaussBorder_16u_C4R");

  --*
  -- * Four channel 16-bit unsigned Gauss filter with border control, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussBorder_16u_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12748
   pragma Import (C, nppiFilterGaussBorder_16u_AC4R, "nppiFilterGaussBorder_16u_AC4R");

  --*
  -- * Single channel 16-bit signed Gauss filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussBorder_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12766
   pragma Import (C, nppiFilterGaussBorder_16s_C1R, "nppiFilterGaussBorder_16s_C1R");

  --*
  -- * Three channel 16-bit signed Gauss filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussBorder_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12784
   pragma Import (C, nppiFilterGaussBorder_16s_C3R, "nppiFilterGaussBorder_16s_C3R");

  --*
  -- * Four channel 16-bit signed Gauss filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussBorder_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12802
   pragma Import (C, nppiFilterGaussBorder_16s_C4R, "nppiFilterGaussBorder_16s_C4R");

  --*
  -- * Four channel 16-bit signed Gauss filter with border control, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussBorder_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12820
   pragma Import (C, nppiFilterGaussBorder_16s_AC4R, "nppiFilterGaussBorder_16s_AC4R");

  --*
  -- * Single channel 32-bit floating-point Gauss filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussBorder_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12838
   pragma Import (C, nppiFilterGaussBorder_32f_C1R, "nppiFilterGaussBorder_32f_C1R");

  --*
  -- * Three channel 32-bit floating-point Gauss filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussBorder_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12856
   pragma Import (C, nppiFilterGaussBorder_32f_C3R, "nppiFilterGaussBorder_32f_C3R");

  --*
  -- * Four channel 32-bit floating-point Gauss filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussBorder_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12874
   pragma Import (C, nppiFilterGaussBorder_32f_C4R, "nppiFilterGaussBorder_32f_C4R");

  --*
  -- * Four channel 32-bit floating-point Gauss filter with border control, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussBorder_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12892
   pragma Import (C, nppiFilterGaussBorder_32f_AC4R, "nppiFilterGaussBorder_32f_AC4R");

  --* @} FilterGaussBorder  
  --* @name FilterGaussAdvancedBorder
  -- *
  -- * Filters the image using a separable Gaussian filter kernel with user supplied floating point coefficients with border control:
  -- * If any portion of the mask overlaps the source image boundary the requested border type operation is applied to all mask pixels
  -- * which fall outside of the source image.
  -- *
  -- * Currently only the NPP_BORDER_REPLICATE and NPP_BORDER_MIRROR border type operations are supported.
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned Gauss filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nFilterTaps The number of filter taps where nFilterTaps =  2 * ((int)((float)ceil(radius) + 0.5F) ) + 1.
  -- * \param pKernel Pointer to an array of nFilterTaps kernel coefficients which sum to 1.0F. 
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussAdvancedBorder_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nFilterTaps : int;
      pKernel : access nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12925
   pragma Import (C, nppiFilterGaussAdvancedBorder_8u_C1R, "nppiFilterGaussAdvancedBorder_8u_C1R");

  --*
  -- * Three channel 8-bit unsigned Gauss filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nFilterTaps The number of filter taps where nFilterTaps =  2 * ((int)((float)ceil(radius) + 0.5F) ) + 1.
  -- * \param pKernel Pointer to an array of nFilterTaps kernel coefficients which sum to 1.0F. 
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussAdvancedBorder_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nFilterTaps : int;
      pKernel : access nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12944
   pragma Import (C, nppiFilterGaussAdvancedBorder_8u_C3R, "nppiFilterGaussAdvancedBorder_8u_C3R");

  --*
  -- * Four channel 8-bit unsigned Gauss filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nFilterTaps The number of filter taps where nFilterTaps =  2 * ((int)((float)ceil(radius) + 0.5F) ) + 1.
  -- * \param pKernel Pointer to an array of nFilterTaps kernel coefficients which sum to 1.0F. 
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussAdvancedBorder_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nFilterTaps : int;
      pKernel : access nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12963
   pragma Import (C, nppiFilterGaussAdvancedBorder_8u_C4R, "nppiFilterGaussAdvancedBorder_8u_C4R");

  --*
  -- * Four channel 8-bit unsigned Gauss filter with border control, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nFilterTaps The number of filter taps where nFilterTaps =  2 * ((int)((float)ceil(radius) + 0.5F) ) + 1.
  -- * \param pKernel Pointer to an array of nFilterTaps kernel coefficients which sum to 1.0F. 
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussAdvancedBorder_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nFilterTaps : int;
      pKernel : access nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:12982
   pragma Import (C, nppiFilterGaussAdvancedBorder_8u_AC4R, "nppiFilterGaussAdvancedBorder_8u_AC4R");

  --*
  -- * Single channel 16-bit unsigned Gauss filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nFilterTaps The number of filter taps where nFilterTaps =  2 * ((int)((float)ceil(radius) + 0.5F) ) + 1.
  -- * \param pKernel Pointer to an array of nFilterTaps kernel coefficients which sum to 1.0F. 
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussAdvancedBorder_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nFilterTaps : int;
      pKernel : access nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13001
   pragma Import (C, nppiFilterGaussAdvancedBorder_16u_C1R, "nppiFilterGaussAdvancedBorder_16u_C1R");

  --*
  -- * Three channel 16-bit unsigned Gauss filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nFilterTaps The number of filter taps where nFilterTaps =  2 * ((int)((float)ceil(radius) + 0.5F) ) + 1.
  -- * \param pKernel Pointer to an array of nFilterTaps kernel coefficients which sum to 1.0F. 
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussAdvancedBorder_16u_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nFilterTaps : int;
      pKernel : access nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13020
   pragma Import (C, nppiFilterGaussAdvancedBorder_16u_C3R, "nppiFilterGaussAdvancedBorder_16u_C3R");

  --*
  -- * Four channel 16-bit unsigned Gauss filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nFilterTaps The number of filter taps where nFilterTaps =  2 * ((int)((float)ceil(radius) + 0.5F) ) + 1.
  -- * \param pKernel Pointer to an array of nFilterTaps kernel coefficients which sum to 1.0F. 
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussAdvancedBorder_16u_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nFilterTaps : int;
      pKernel : access nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13039
   pragma Import (C, nppiFilterGaussAdvancedBorder_16u_C4R, "nppiFilterGaussAdvancedBorder_16u_C4R");

  --*
  -- * Four channel 16-bit unsigned Gauss filter with border control, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nFilterTaps The number of filter taps where nFilterTaps =  2 * ((int)((float)ceil(radius) + 0.5F) ) + 1.
  -- * \param pKernel Pointer to an array of nFilterTaps kernel coefficients which sum to 1.0F. 
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussAdvancedBorder_16u_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nFilterTaps : int;
      pKernel : access nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13058
   pragma Import (C, nppiFilterGaussAdvancedBorder_16u_AC4R, "nppiFilterGaussAdvancedBorder_16u_AC4R");

  --*
  -- * Single channel 16-bit signed Gauss filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nFilterTaps The number of filter taps where nFilterTaps =  2 * ((int)((float)ceil(radius) + 0.5F) ) + 1.
  -- * \param pKernel Pointer to an array of nFilterTaps kernel coefficients which sum to 1.0F. 
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussAdvancedBorder_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nFilterTaps : int;
      pKernel : access nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13077
   pragma Import (C, nppiFilterGaussAdvancedBorder_16s_C1R, "nppiFilterGaussAdvancedBorder_16s_C1R");

  --*
  -- * Three channel 16-bit signed Gauss filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nFilterTaps The number of filter taps where nFilterTaps =  2 * ((int)((float)ceil(radius) + 0.5F) ) + 1.
  -- * \param pKernel Pointer to an array of nFilterTaps kernel coefficients which sum to 1.0F. 
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussAdvancedBorder_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nFilterTaps : int;
      pKernel : access nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13096
   pragma Import (C, nppiFilterGaussAdvancedBorder_16s_C3R, "nppiFilterGaussAdvancedBorder_16s_C3R");

  --*
  -- * Four channel 16-bit signed Gauss filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nFilterTaps The number of filter taps where nFilterTaps =  2 * ((int)((float)ceil(radius) + 0.5F) ) + 1.
  -- * \param pKernel Pointer to an array of nFilterTaps kernel coefficients which sum to 1.0F. 
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussAdvancedBorder_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nFilterTaps : int;
      pKernel : access nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13115
   pragma Import (C, nppiFilterGaussAdvancedBorder_16s_C4R, "nppiFilterGaussAdvancedBorder_16s_C4R");

  --*
  -- * Four channel 16-bit signed Gauss filter with border control, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nFilterTaps The number of filter taps where nFilterTaps =  2 * ((int)((float)ceil(radius) + 0.5F) ) + 1.
  -- * \param pKernel Pointer to an array of nFilterTaps kernel coefficients which sum to 1.0F. 
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussAdvancedBorder_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nFilterTaps : int;
      pKernel : access nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13134
   pragma Import (C, nppiFilterGaussAdvancedBorder_16s_AC4R, "nppiFilterGaussAdvancedBorder_16s_AC4R");

  --*
  -- * Single channel 32-bit floating-point Gauss filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nFilterTaps The number of filter taps where nFilterTaps =  2 * ((int)((float)ceil(radius) + 0.5F) ) + 1.
  -- * \param pKernel Pointer to an array of nFilterTaps kernel coefficients which sum to 1.0F. 
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussAdvancedBorder_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nFilterTaps : int;
      pKernel : access nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13153
   pragma Import (C, nppiFilterGaussAdvancedBorder_32f_C1R, "nppiFilterGaussAdvancedBorder_32f_C1R");

  --*
  -- * Three channel 32-bit floating-point Gauss filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nFilterTaps The number of filter taps where nFilterTaps =  2 * ((int)((float)ceil(radius) + 0.5F) ) + 1.
  -- * \param pKernel Pointer to an array of nFilterTaps kernel coefficients which sum to 1.0F. 
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussAdvancedBorder_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nFilterTaps : int;
      pKernel : access nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13172
   pragma Import (C, nppiFilterGaussAdvancedBorder_32f_C3R, "nppiFilterGaussAdvancedBorder_32f_C3R");

  --*
  -- * Four channel 32-bit floating-point Gauss filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nFilterTaps The number of filter taps where nFilterTaps =  2 * ((int)((float)ceil(radius) + 0.5F) ) + 1.
  -- * \param pKernel Pointer to an array of nFilterTaps kernel coefficients which sum to 1.0F. 
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussAdvancedBorder_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nFilterTaps : int;
      pKernel : access nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13191
   pragma Import (C, nppiFilterGaussAdvancedBorder_32f_C4R, "nppiFilterGaussAdvancedBorder_32f_C4R");

  --*
  -- * Four channel 32-bit floating-point Gauss filter with border control, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nFilterTaps The number of filter taps where nFilterTaps =  2 * ((int)((float)ceil(radius) + 0.5F) ) + 1.
  -- * \param pKernel Pointer to an array of nFilterTaps kernel coefficients which sum to 1.0F. 
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussAdvancedBorder_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nFilterTaps : int;
      pKernel : access nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13210
   pragma Import (C, nppiFilterGaussAdvancedBorder_32f_AC4R, "nppiFilterGaussAdvancedBorder_32f_AC4R");

  --* @} FilterGaussAdvancedBorder  
  --* @name FilterGaussPyramidLayerDownBorder
  -- *
  -- * Filters the image using a separable Gaussian filter kernel with user supplied floating point coefficients with downsampling and border control.
  -- * If the downsampling rate is equivalent to an integer value then unnecessary source pixels are just skipped.
  -- * If any portion of the mask overlaps the source image boundary the requested border type operation is applied to all mask pixels
  -- * which fall outside of the source image.
  -- *
  -- * Currently only the NPP_BORDER_MIRROR and NPP_BORDER_REPLICATE border type operations are supported.
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Calculate destination image SizeROI width and height from source image ROI width and height and downsampling rate.
  -- * It is highly recommended that this function be use to determine the destination image ROI for consistent results. 
  -- *
  -- * \param nSrcROIWidth The desired source image ROI width, must be <= oSrcSize.width.
  -- * \param nSrcROIHeight The desired source image ROI height, must be <= oSrcSize.height.
  -- * \param pDstSizeROI Host memory pointer to the destination image roi_specification.
  -- * \param nRate The downsampling rate to be used.  For integer equivalent rates unnecessary source pixels are just skipped.
  -- *              For non-integer rates the source image is bilinear interpolated. nRate must be > 1.0F and <= 10.0F. 
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiGetFilterGaussPyramidLayerDownBorderDstROI
     (nSrcROIWidth : int;
      nSrcROIHeight : int;
      pDstSizeROI : access nppdefs_h.NppiSize;
      nRate : nppdefs_h.Npp32f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13241
   pragma Import (C, nppiGetFilterGaussPyramidLayerDownBorderDstROI, "nppiGetFilterGaussPyramidLayerDownBorderDstROI");

  --*
  -- * Single channel 8-bit unsigned Gauss filter with downsampling and border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nRate The downsampling rate to be used.  For integer equivalent rates unnecessary source pixels are just skipped.
  -- *              For non-integer rates the source image is bilinear interpolated. nRate must be > 1.0F and <= 10.0F. 
  -- * \param nFilterTaps The number of filter taps where nFilterTaps =  2 * ((int)((float)ceil(radius) + 0.5F) ) + 1.
  -- * \param pKernel Pointer to an array of nFilterTaps kernel coefficients which sum to 1.0F. 
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussPyramidLayerDownBorder_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nRate : nppdefs_h.Npp32f;
      nFilterTaps : int;
      pKernel : access nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13261
   pragma Import (C, nppiFilterGaussPyramidLayerDownBorder_8u_C1R, "nppiFilterGaussPyramidLayerDownBorder_8u_C1R");

  --*
  -- * Three channel 8-bit unsigned Gauss filter with downsampling and border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nRate The downsampling rate to be used.  For integer equivalent rates unnecessary source pixels are just skipped.
  -- *              For non-integer rates the source image is bilinear interpolated. nRate must be > 1.0F and <= 10.0F. 
  -- * \param nFilterTaps The number of filter taps where nFilterTaps =  2 * ((int)((float)ceil(radius) + 0.5F) ) + 1.
  -- * \param pKernel Pointer to an array of nFilterTaps kernel coefficients which sum to 1.0F. 
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussPyramidLayerDownBorder_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nRate : nppdefs_h.Npp32f;
      nFilterTaps : int;
      pKernel : access nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13282
   pragma Import (C, nppiFilterGaussPyramidLayerDownBorder_8u_C3R, "nppiFilterGaussPyramidLayerDownBorder_8u_C3R");

  --*
  -- * Single channel 16-bit unsigned Gauss filter with downsampling and border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nRate The downsampling rate to be used.  For integer equivalent rates unnecessary source pixels are just skipped.
  -- *              For non-integer rates the source image is bilinear interpolated. nRate must be > 1.0F and <= 10.0F. 
  -- * \param nFilterTaps The number of filter taps where nFilterTaps =  2 * ((int)((float)ceil(radius) + 0.5F) ) + 1.
  -- * \param pKernel Pointer to an array of nFilterTaps kernel coefficients which sum to 1.0F. 
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussPyramidLayerDownBorder_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nRate : nppdefs_h.Npp32f;
      nFilterTaps : int;
      pKernel : access nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13303
   pragma Import (C, nppiFilterGaussPyramidLayerDownBorder_16u_C1R, "nppiFilterGaussPyramidLayerDownBorder_16u_C1R");

  --*
  -- * Three channel 16-bit unsigned Gauss filter with downsampling and border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nRate The downsampling rate to be used.  For integer equivalent rates unnecessary source pixels are just skipped.
  -- *              For non-integer rates the source image is bilinear interpolated. nRate must be > 1.0F and <= 10.0F. 
  -- * \param nFilterTaps The number of filter taps where nFilterTaps =  2 * ((int)((float)ceil(radius) + 0.5F) ) + 1.
  -- * \param pKernel Pointer to an array of nFilterTaps kernel coefficients which sum to 1.0F. 
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussPyramidLayerDownBorder_16u_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nRate : nppdefs_h.Npp32f;
      nFilterTaps : int;
      pKernel : access nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13324
   pragma Import (C, nppiFilterGaussPyramidLayerDownBorder_16u_C3R, "nppiFilterGaussPyramidLayerDownBorder_16u_C3R");

  --*
  -- * Single channel 32-bit floating-point Gauss filter downsampling and with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nRate The downsampling rate to be used.  For integer equivalent rates unnecessary source pixels are just skipped.
  -- *              For non-integer rates the source image is bilinear interpolated. nRate must be > 1.0F and <= 10.0F. 
  -- * \param nFilterTaps The number of filter taps where nFilterTaps =  2 * ((int)((float)ceil(radius) + 0.5F) ) + 1.
  -- * \param pKernel Pointer to an array of nFilterTaps kernel coefficients which sum to 1.0F. 
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussPyramidLayerDownBorder_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nRate : nppdefs_h.Npp32f;
      nFilterTaps : int;
      pKernel : access nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13345
   pragma Import (C, nppiFilterGaussPyramidLayerDownBorder_32f_C1R, "nppiFilterGaussPyramidLayerDownBorder_32f_C1R");

  --*
  -- * Three channel 32-bit floating-point Gauss filter with downsampling and border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nRate The downsampling rate to be used.  For integer equivalent rates unnecessary source pixels are just skipped.
  -- *              For non-integer rates the source image is bilinear interpolated. nRate must be > 1.0F and <= 10.0F. 
  -- * \param nFilterTaps The number of filter taps where nFilterTaps =  2 * ((int)((float)ceil(radius) + 0.5F) ) + 1.
  -- * \param pKernel Pointer to an array of nFilterTaps kernel coefficients which sum to 1.0F. 
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussPyramidLayerDownBorder_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nRate : nppdefs_h.Npp32f;
      nFilterTaps : int;
      pKernel : access nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13366
   pragma Import (C, nppiFilterGaussPyramidLayerDownBorder_32f_C3R, "nppiFilterGaussPyramidLayerDownBorder_32f_C3R");

  --* @} FilterGaussPyramidLayerDownBorder  
  --* @name FilterGaussPyramidLayerUpBorder
  -- *
  -- * Filters the image using a separable Gaussian filter kernel with user supplied floating point coefficients with upsampling and border control.
  -- * If the upsampling rate is equivalent to an integer value then unnecessary source pixels are just skipped.
  -- * If any portion of the mask overlaps the source image boundary the requested border type operation is applied to all mask pixels
  -- * which fall outside of the source image.
  -- *
  -- * Currently only the NPP_BORDER_MIRROR and NPP_BORDER_REPLICATE border type operations are supported.
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Calculate destination image minimum and maximum SizeROI width and height from source image ROI width and height and upsampling rate.
  -- * It is highly recommended that this function be use to determine the best destination image ROI for consistent results. 
  -- *
  -- * \param nSrcROIWidth The desired source image ROI width, must be <= oSrcSize.width.
  -- * \param nSrcROIHeight The desired source image ROI height, must be <= oSrcSize.height.
  -- * \param pDstSizeROIMin Host memory pointer to the minimum recommended destination image roi_specification.
  -- * \param pDstSizeROIMax Host memory pointer to the maximum recommended destination image roi_specification.
  -- * \param nRate The upsampling rate to be used.  For integer equivalent rates unnecessary source pixels are just skipped.
  -- *              For non-integer rates the source image is bilinear interpolated. nRate must be > 1.0F and <= 10.0F. 
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiGetFilterGaussPyramidLayerUpBorderDstROI
     (nSrcROIWidth : int;
      nSrcROIHeight : int;
      pDstSizeROIMin : access nppdefs_h.NppiSize;
      pDstSizeROIMax : access nppdefs_h.NppiSize;
      nRate : nppdefs_h.Npp32f) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13398
   pragma Import (C, nppiGetFilterGaussPyramidLayerUpBorderDstROI, "nppiGetFilterGaussPyramidLayerUpBorderDstROI");

  --*
  -- * Single channel 8-bit unsigned Gauss filter with upsampling and border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nRate The upsampling rate to be used.  For integer equivalent rates unnecessary source pixels are just skipped.
  -- *              For non-integer rates the source image is bilinear interpolated. nRate must be > 1.0F and <= 10.0F. 
  -- * \param nFilterTaps The number of filter taps where nFilterTaps =  2 * ((int)((float)ceil(radius) + 0.5F) ) + 1.
  -- * \param pKernel Pointer to an array of nFilterTaps kernel coefficients which sum to 1.0F. 
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussPyramidLayerUpBorder_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nRate : nppdefs_h.Npp32f;
      nFilterTaps : int;
      pKernel : access nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13418
   pragma Import (C, nppiFilterGaussPyramidLayerUpBorder_8u_C1R, "nppiFilterGaussPyramidLayerUpBorder_8u_C1R");

  --*
  -- * Three channel 8-bit unsigned Gauss filter with upsampling and border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nRate The upsampling rate to be used.  For integer equivalent rates unnecessary source pixels are just skipped.
  -- *              For non-integer rates the source image is bilinear interpolated. nRate must be > 1.0F and <= 10.0F. 
  -- * \param nFilterTaps The number of filter taps where nFilterTaps =  2 * ((int)((float)ceil(radius) + 0.5F) ) + 1.
  -- * \param pKernel Pointer to an array of nFilterTaps kernel coefficients which sum to 1.0F. 
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussPyramidLayerUpBorder_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nRate : nppdefs_h.Npp32f;
      nFilterTaps : int;
      pKernel : access nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13439
   pragma Import (C, nppiFilterGaussPyramidLayerUpBorder_8u_C3R, "nppiFilterGaussPyramidLayerUpBorder_8u_C3R");

  --*
  -- * Single channel 16-bit unsigned Gauss filter with upsampling and border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nRate The upsampling rate to be used.  For integer equivalent rates unnecessary source pixels are just skipped.
  -- *              For non-integer rates the source image is bilinear interpolated. nRate must be > 1.0F and <= 10.0F. 
  -- * \param nFilterTaps The number of filter taps where nFilterTaps =  2 * ((int)((float)ceil(radius) + 0.5F) ) + 1.
  -- * \param pKernel Pointer to an array of nFilterTaps kernel coefficients which sum to 1.0F. 
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussPyramidLayerUpBorder_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nRate : nppdefs_h.Npp32f;
      nFilterTaps : int;
      pKernel : access nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13460
   pragma Import (C, nppiFilterGaussPyramidLayerUpBorder_16u_C1R, "nppiFilterGaussPyramidLayerUpBorder_16u_C1R");

  --*
  -- * Three channel 16-bit unsigned Gauss filter with upsampling and border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nRate The upsampling rate to be used.  For integer equivalent rates unnecessary source pixels are just skipped.
  -- *              For non-integer rates the source image is bilinear interpolated. nRate must be > 1.0F and <= 10.0F. 
  -- * \param nFilterTaps The number of filter taps where nFilterTaps =  2 * ((int)((float)ceil(radius) + 0.5F) ) + 1.
  -- * \param pKernel Pointer to an array of nFilterTaps kernel coefficients which sum to 1.0F. 
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussPyramidLayerUpBorder_16u_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nRate : nppdefs_h.Npp32f;
      nFilterTaps : int;
      pKernel : access nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13481
   pragma Import (C, nppiFilterGaussPyramidLayerUpBorder_16u_C3R, "nppiFilterGaussPyramidLayerUpBorder_16u_C3R");

  --*
  -- * Single channel 32-bit floating-point Gauss filter upsampling and with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nRate The upsampling rate to be used.  For integer equivalent rates unnecessary source pixels are just skipped.
  -- *              For non-integer rates the source image is bilinear interpolated. nRate must be > 1.0F and <= 10.0F. 
  -- * \param nFilterTaps The number of filter taps where nFilterTaps =  2 * ((int)((float)ceil(radius) + 0.5F) ) + 1.
  -- * \param pKernel Pointer to an array of nFilterTaps kernel coefficients which sum to 1.0F. 
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussPyramidLayerUpBorder_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nRate : nppdefs_h.Npp32f;
      nFilterTaps : int;
      pKernel : access nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13502
   pragma Import (C, nppiFilterGaussPyramidLayerUpBorder_32f_C1R, "nppiFilterGaussPyramidLayerUpBorder_32f_C1R");

  --*
  -- * Three channel 32-bit floating-point Gauss filter with upsampling and border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nRate The upsampling rate to be used.  For integer equivalent rates unnecessary source pixels are just skipped.
  -- *              For non-integer rates the source image is bilinear interpolated. nRate must be > 1.0F and <= 10.0F. 
  -- * \param nFilterTaps The number of filter taps where nFilterTaps =  2 * ((int)((float)ceil(radius) + 0.5F) ) + 1.
  -- * \param pKernel Pointer to an array of nFilterTaps kernel coefficients which sum to 1.0F. 
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterGaussPyramidLayerUpBorder_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nRate : nppdefs_h.Npp32f;
      nFilterTaps : int;
      pKernel : access nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13523
   pragma Import (C, nppiFilterGaussPyramidLayerUpBorder_32f_C3R, "nppiFilterGaussPyramidLayerUpBorder_32f_C3R");

  --* @} FilterGaussPyramidLayerUpBorder  
  --* @name FilterBilateralGaussBorder
  -- *
  -- * Filters the image using a bilateral Gaussian filter kernel with border control:
  -- * If any portion of the mask overlaps the source image boundary the requested border type operation is applied to all mask pixels
  -- * which fall outside of the source image.
  -- *
  -- * For this filter the anchor point is always the central element of the kernel. 
  -- * Coefficients of the bilateral filter kernel depend on their position in the kernel and 
  -- * on the value of some source image pixels overlayed by the filter kernel. 
  -- * Only source image pixels with both coordinates divisible by nDistanceBetweenSrcPixels are used in calculations.
  -- *
  -- * The value of an output pixel \f$d\f$ is 
  -- * \f[d = \frac{\sum_{h=-nRadius}^{nRadius}\sum_{w=-nRadius}^{nRadius}W1(h,w)\cdot W2(h,w)\cdot S(h,w)}{\sum_{h=-nRadius}^{nRadius}\sum_{w=-nRadius}^{nRadius}W1(h,w)\cdot W2(h,w)}\f]
  -- * where h and w are the corresponding kernel width and height indexes, 
  -- * S(h,w) is the value of the source image pixel overlayed by filter kernel position (h,w),
  -- * W1(h,w) is func(nValSquareSigma, (S(h,w) - S(0,0))) where S(0,0) is the value of the source image pixel at the center of the kernel,
  -- * W2(h,w) is func(nPosSquareSigma, sqrt(h*h+w*w)), and func is the following formula
  -- * \f[func(S,I) = exp(-\frac{I^2}{2.0F\cdot S^2})\f]
  -- *
  -- * Currently only the NPP_BORDER_REPLICATE border type operations are supported.
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned bilateral Gauss filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nRadius The radius of the round filter kernel to be used.  A radius of 1 indicates a filter kernel size of 3 by 3, 2 indicates 5 by 5, etc.
  -- *        Radius values from 1 to 32 are supported.
  -- * \param nStepBetweenSrcPixels The step size between adjacent source image pixels processed by the filter kernel, most commonly 1. 
  -- * \param nValSquareSigma The square of the sigma for the relative intensity distance between a source image pixel in the filter kernel 
  -- *        and the source image pixel at the center of the filter kernel.
  -- * \param nPosSquareSigma The square of the sigma for the relative geometric distance between a source image pixel in the filter kernel 
  -- *        and the source image pixel at the center of the filter kernel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBilateralGaussBorder_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nRadius : int;
      nStepBetweenSrcPixels : int;
      nValSquareSigma : nppdefs_h.Npp32f;
      nPosSquareSigma : nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13574
   pragma Import (C, nppiFilterBilateralGaussBorder_8u_C1R, "nppiFilterBilateralGaussBorder_8u_C1R");

  --*
  -- * Three channel 8-bit unsigned bilateral Gauss filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nRadius The radius of the round filter kernel to be used.  A radius of 1 indicates a filter kernel size of 3 by 3, 2 indicates 5 by 5, etc.
  -- *        Radius values from 1 to 32 are supported.
  -- * \param nStepBetweenSrcPixels The step size between adjacent source image pixels processed by the filter kernel, most commonly 1. 
  -- * \param nValSquareSigma The square of the sigma for the relative intensity distance between a source image pixel in the filter kernel 
  -- *        and the source image pixel at the center of the filter kernel.
  -- * \param nPosSquareSigma The square of the sigma for the relative geometric distance between a source image pixel in the filter kernel 
  -- *        and the source image pixel at the center of the filter kernel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBilateralGaussBorder_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nRadius : int;
      nStepBetweenSrcPixels : int;
      nValSquareSigma : nppdefs_h.Npp32f;
      nPosSquareSigma : nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13598
   pragma Import (C, nppiFilterBilateralGaussBorder_8u_C3R, "nppiFilterBilateralGaussBorder_8u_C3R");

  --*
  -- * Single channel 16-bit unsigned bilateral Gauss filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nRadius The radius of the round filter kernel to be used.  A radius of 1 indicates a filter kernel size of 3 by 3, 2 indicates 5 by 5, etc.
  -- *        Radius values from 1 to 32 are supported.
  -- * \param nStepBetweenSrcPixels The step size between adjacent source image pixels processed by the filter kernel, most commonly 1. 
  -- * \param nValSquareSigma The square of the sigma for the relative intensity distance between a source image pixel in the filter kernel 
  -- *        and the source image pixel at the center of the filter kernel.
  -- * \param nPosSquareSigma The square of the sigma for the relative geometric distance between a source image pixel in the filter kernel 
  -- *        and the source image pixel at the center of the filter kernel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBilateralGaussBorder_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nRadius : int;
      nStepBetweenSrcPixels : int;
      nValSquareSigma : nppdefs_h.Npp32f;
      nPosSquareSigma : nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13622
   pragma Import (C, nppiFilterBilateralGaussBorder_16u_C1R, "nppiFilterBilateralGaussBorder_16u_C1R");

  --*
  -- * Three channel 16-bit unsigned bilateral Gauss filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nRadius The radius of the round filter kernel to be used.  A radius of 1 indicates a filter kernel size of 3 by 3, 2 indicates 5 by 5, etc.
  -- *        Radius values from 1 to 32 are supported.
  -- * \param nStepBetweenSrcPixels The step size between adjacent source image pixels processed by the filter kernel, most commonly 1. 
  -- * \param nValSquareSigma The square of the sigma for the relative intensity distance between a source image pixel in the filter kernel 
  -- *        and the source image pixel at the center of the filter kernel.
  -- * \param nPosSquareSigma The square of the sigma for the relative geometric distance between a source image pixel in the filter kernel 
  -- *        and the source image pixel at the center of the filter kernel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBilateralGaussBorder_16u_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nRadius : int;
      nStepBetweenSrcPixels : int;
      nValSquareSigma : nppdefs_h.Npp32f;
      nPosSquareSigma : nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13646
   pragma Import (C, nppiFilterBilateralGaussBorder_16u_C3R, "nppiFilterBilateralGaussBorder_16u_C3R");

  --*
  -- * One channel 32-bit floating-point bilateral Gauss filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nRadius The radius of the round filter kernel to be used.  A radius of 1 indicates a filter kernel size of 3 by 3, 2 indicates 5 by 5, etc.
  -- *        Radius values from 1 to 32 are supported.
  -- * \param nStepBetweenSrcPixels The step size between adjacent source image pixels processed by the filter kernel, most commonly 1. 
  -- * \param nValSquareSigma The square of the sigma for the relative intensity distance between a source image pixel in the filter kernel 
  -- *        and the source image pixel at the center of the filter kernel.
  -- * \param nPosSquareSigma The square of the sigma for the relative geometric distance between a source image pixel in the filter kernel 
  -- *        and the source image pixel at the center of the filter kernel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBilateralGaussBorder_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nRadius : int;
      nStepBetweenSrcPixels : int;
      nValSquareSigma : nppdefs_h.Npp32f;
      nPosSquareSigma : nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13670
   pragma Import (C, nppiFilterBilateralGaussBorder_32f_C1R, "nppiFilterBilateralGaussBorder_32f_C1R");

  --*
  -- * Three channel 32-bit floating-point bilateral Gauss filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nRadius The radius of the round filter kernel to be used.  A radius of 1 indicates a filter kernel size of 3 by 3, 2 indicates 5 by 5, etc.
  -- *        Radius values from 1 to 32 are supported.
  -- * \param nStepBetweenSrcPixels The step size between adjacent source image pixels processed by the filter kernel, most commonly 1. 
  -- * \param nValSquareSigma The square of the sigma for the relative intensity distance between a source image pixel in the filter kernel 
  -- *        and the source image pixel at the center of the filter kernel.
  -- * \param nPosSquareSigma The square of the sigma for the relative geometric distance between a source image pixel in the filter kernel 
  -- *        and the source image pixel at the center of the filter kernel.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterBilateralGaussBorder_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nRadius : int;
      nStepBetweenSrcPixels : int;
      nValSquareSigma : nppdefs_h.Npp32f;
      nPosSquareSigma : nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13694
   pragma Import (C, nppiFilterBilateralGaussBorder_32f_C3R, "nppiFilterBilateralGaussBorder_32f_C3R");

  --* @} FilterBilateralGaussBorder  
  --* @name FilterHighPass
  -- *
  -- * Filters the image using a high-pass filter kernel:
  -- *
  -- * \f[
  -- *  \left( \begin{array}{rrr}
  -- *      -1 & -1 & -1 \ *      -1 &  8 & -1 \ *      -1 & -1 & -1 \ *  \end{array} \right)
  --ight)
  -- *  \left( \begin{array}{rrrrr}
  -- *      -1 & -1 & -1 & -1 & -1 \ *      -1 & -1 & -1 & -1 & -1 \ *      -1 & -1 & 24 & -1 & -1 \ *      -1 & -1 & -1 & -1 & -1 \ *      -1 & -1 & -1 & -1 & -1 \ *  \end{array} \right)
  --} \right)
  -- * \f]
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned high-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterHighPass_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13734
   pragma Import (C, nppiFilterHighPass_8u_C1R, "nppiFilterHighPass_8u_C1R");

  --*
  -- * Three channel 8-bit unsigned high-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterHighPass_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13749
   pragma Import (C, nppiFilterHighPass_8u_C3R, "nppiFilterHighPass_8u_C3R");

  --*
  -- * Four channel 8-bit unsigned high-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterHighPass_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13764
   pragma Import (C, nppiFilterHighPass_8u_C4R, "nppiFilterHighPass_8u_C4R");

  --*
  -- * Four channel 8-bit unsigned high-pass filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterHighPass_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13779
   pragma Import (C, nppiFilterHighPass_8u_AC4R, "nppiFilterHighPass_8u_AC4R");

  --*
  -- * Single channel 16-bit unsigned high-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterHighPass_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13794
   pragma Import (C, nppiFilterHighPass_16u_C1R, "nppiFilterHighPass_16u_C1R");

  --*
  -- * Three channel 16-bit unsigned high-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterHighPass_16u_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13809
   pragma Import (C, nppiFilterHighPass_16u_C3R, "nppiFilterHighPass_16u_C3R");

  --*
  -- * Four channel 16-bit unsigned high-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterHighPass_16u_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13824
   pragma Import (C, nppiFilterHighPass_16u_C4R, "nppiFilterHighPass_16u_C4R");

  --*
  -- * Four channel 16-bit unsigned high-pass filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterHighPass_16u_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13839
   pragma Import (C, nppiFilterHighPass_16u_AC4R, "nppiFilterHighPass_16u_AC4R");

  --*
  -- * Single channel 16-bit signed high-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterHighPass_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13854
   pragma Import (C, nppiFilterHighPass_16s_C1R, "nppiFilterHighPass_16s_C1R");

  --*
  -- * Three channel 16-bit signed high-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterHighPass_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13869
   pragma Import (C, nppiFilterHighPass_16s_C3R, "nppiFilterHighPass_16s_C3R");

  --*
  -- * Four channel 16-bit signed high-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterHighPass_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13884
   pragma Import (C, nppiFilterHighPass_16s_C4R, "nppiFilterHighPass_16s_C4R");

  --*
  -- * Four channel 16-bit signed high-pass filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterHighPass_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13899
   pragma Import (C, nppiFilterHighPass_16s_AC4R, "nppiFilterHighPass_16s_AC4R");

  --*
  -- * Single channel 32-bit floating-point high-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterHighPass_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13914
   pragma Import (C, nppiFilterHighPass_32f_C1R, "nppiFilterHighPass_32f_C1R");

  --*
  -- * Three channel 32-bit floating-point high-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterHighPass_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13929
   pragma Import (C, nppiFilterHighPass_32f_C3R, "nppiFilterHighPass_32f_C3R");

  --*
  -- * Four channel 32-bit floating-point high-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterHighPass_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13944
   pragma Import (C, nppiFilterHighPass_32f_C4R, "nppiFilterHighPass_32f_C4R");

  --*
  -- * Four channel 32-bit floating-point high-pass filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterHighPass_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:13959
   pragma Import (C, nppiFilterHighPass_32f_AC4R, "nppiFilterHighPass_32f_AC4R");

  --* @} FilterHighPass  
  --* @name FilterHighPassBorder
  -- *
  -- * Filters the image using a high-pass filter kernel with border control.
  -- * If any portion of the mask overlaps the source image boundary the requested 
  -- * border type operation is applied to all mask pixels which fall outside of the source image.
  -- *
  -- * Currently only the NPP_BORDER_REPLICATE border type operation is supported. 
  -- *
  -- *
  -- * \f[
  -- *  \left( \begin{array}{rrr}
  -- *      -1 & -1 & -1 \ *      -1 &  8 & -1 \ *      -1 & -1 & -1 \ *  \end{array} \right)
  --ight)
  -- *  \left( \begin{array}{rrrrr}
  -- *      -1 & -1 & -1 & -1 & -1 \ *      -1 & -1 & -1 & -1 & -1 \ *      -1 & -1 & 24 & -1 & -1 \ *      -1 & -1 & -1 & -1 & -1 \ *      -1 & -1 & -1 & -1 & -1 \ *  \end{array} \right)
  --} \right)
  -- * \f]
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned high-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterHighPassBorder_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14007
   pragma Import (C, nppiFilterHighPassBorder_8u_C1R, "nppiFilterHighPassBorder_8u_C1R");

  --*
  -- * Three channel 8-bit unsigned high-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterHighPassBorder_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14025
   pragma Import (C, nppiFilterHighPassBorder_8u_C3R, "nppiFilterHighPassBorder_8u_C3R");

  --*
  -- * Four channel 8-bit unsigned high-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterHighPassBorder_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14043
   pragma Import (C, nppiFilterHighPassBorder_8u_C4R, "nppiFilterHighPassBorder_8u_C4R");

  --*
  -- * Four channel 8-bit unsigned high-pass filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterHighPassBorder_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14061
   pragma Import (C, nppiFilterHighPassBorder_8u_AC4R, "nppiFilterHighPassBorder_8u_AC4R");

  --*
  -- * Single channel 16-bit unsigned high-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterHighPassBorder_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14079
   pragma Import (C, nppiFilterHighPassBorder_16u_C1R, "nppiFilterHighPassBorder_16u_C1R");

  --*
  -- * Three channel 16-bit unsigned high-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterHighPassBorder_16u_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14097
   pragma Import (C, nppiFilterHighPassBorder_16u_C3R, "nppiFilterHighPassBorder_16u_C3R");

  --*
  -- * Four channel 16-bit unsigned high-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterHighPassBorder_16u_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14115
   pragma Import (C, nppiFilterHighPassBorder_16u_C4R, "nppiFilterHighPassBorder_16u_C4R");

  --*
  -- * Four channel 16-bit unsigned high-pass filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterHighPassBorder_16u_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14133
   pragma Import (C, nppiFilterHighPassBorder_16u_AC4R, "nppiFilterHighPassBorder_16u_AC4R");

  --*
  -- * Single channel 16-bit signed high-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterHighPassBorder_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14151
   pragma Import (C, nppiFilterHighPassBorder_16s_C1R, "nppiFilterHighPassBorder_16s_C1R");

  --*
  -- * Three channel 16-bit signed high-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterHighPassBorder_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14169
   pragma Import (C, nppiFilterHighPassBorder_16s_C3R, "nppiFilterHighPassBorder_16s_C3R");

  --*
  -- * Four channel 16-bit signed high-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterHighPassBorder_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14187
   pragma Import (C, nppiFilterHighPassBorder_16s_C4R, "nppiFilterHighPassBorder_16s_C4R");

  --*
  -- * Four channel 16-bit signed high-pass filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterHighPassBorder_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14205
   pragma Import (C, nppiFilterHighPassBorder_16s_AC4R, "nppiFilterHighPassBorder_16s_AC4R");

  --*
  -- * Single channel 32-bit floating-point high-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterHighPassBorder_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14223
   pragma Import (C, nppiFilterHighPassBorder_32f_C1R, "nppiFilterHighPassBorder_32f_C1R");

  --*
  -- * Three channel 32-bit floating-point high-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterHighPassBorder_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14241
   pragma Import (C, nppiFilterHighPassBorder_32f_C3R, "nppiFilterHighPassBorder_32f_C3R");

  --*
  -- * Four channel 32-bit floating-point high-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterHighPassBorder_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14259
   pragma Import (C, nppiFilterHighPassBorder_32f_C4R, "nppiFilterHighPassBorder_32f_C4R");

  --*
  -- * Four channel 32-bit floating-point high-pass filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterHighPassBorder_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14277
   pragma Import (C, nppiFilterHighPassBorder_32f_AC4R, "nppiFilterHighPassBorder_32f_AC4R");

  --* @} FilterHighPassBorder  
  --* @name FilterLowPass
  -- *
  -- * Filters the image using a low-pass filter kernel:
  -- *
  -- * \f[
  -- *  \left( \begin{array}{rrr}
  -- *      1/9 & 1/9 & 1/9 \ *      1/9 & 1/9 & 1/9 \ *      1/9 & 1/9 & 1/9 \ *  \end{array} \right)
  --ight)
  -- *  \left( \begin{array}{rrrrr}
  -- *      1/25 & 1/25 & 1/25 & 1/25 & 1/25 \ *      1/25 & 1/25 & 1/25 & 1/25 & 1/25 \ *      1/25 & 1/25 & 1/25 & 1/25 & 1/25 \ *      1/25 & 1/25 & 1/25 & 1/25 & 1/25 \ *      1/25 & 1/25 & 1/25 & 1/25 & 1/25 \ *  \end{array} \right)
  --} \right)
  -- * \f]
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned low-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLowPass_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14317
   pragma Import (C, nppiFilterLowPass_8u_C1R, "nppiFilterLowPass_8u_C1R");

  --*
  -- * Three channel 8-bit unsigned low-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLowPass_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14332
   pragma Import (C, nppiFilterLowPass_8u_C3R, "nppiFilterLowPass_8u_C3R");

  --*
  -- * Four channel 8-bit unsigned low-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLowPass_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14347
   pragma Import (C, nppiFilterLowPass_8u_C4R, "nppiFilterLowPass_8u_C4R");

  --*
  -- * Four channel 8-bit unsigned low-pass filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLowPass_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14362
   pragma Import (C, nppiFilterLowPass_8u_AC4R, "nppiFilterLowPass_8u_AC4R");

  --*
  -- * Single channel 16-bit unsigned low-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLowPass_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14377
   pragma Import (C, nppiFilterLowPass_16u_C1R, "nppiFilterLowPass_16u_C1R");

  --*
  -- * Three channel 16-bit unsigned low-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLowPass_16u_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14392
   pragma Import (C, nppiFilterLowPass_16u_C3R, "nppiFilterLowPass_16u_C3R");

  --*
  -- * Four channel 16-bit unsigned low-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLowPass_16u_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14407
   pragma Import (C, nppiFilterLowPass_16u_C4R, "nppiFilterLowPass_16u_C4R");

  --*
  -- * Four channel 16-bit unsigned low-pass filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLowPass_16u_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14422
   pragma Import (C, nppiFilterLowPass_16u_AC4R, "nppiFilterLowPass_16u_AC4R");

  --*
  -- * Single channel 16-bit signed low-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLowPass_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14437
   pragma Import (C, nppiFilterLowPass_16s_C1R, "nppiFilterLowPass_16s_C1R");

  --*
  -- * Three channel 16-bit signed low-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLowPass_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14452
   pragma Import (C, nppiFilterLowPass_16s_C3R, "nppiFilterLowPass_16s_C3R");

  --*
  -- * Four channel 16-bit signed low-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLowPass_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14467
   pragma Import (C, nppiFilterLowPass_16s_C4R, "nppiFilterLowPass_16s_C4R");

  --*
  -- * Four channel 16-bit signed low-pass filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLowPass_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14482
   pragma Import (C, nppiFilterLowPass_16s_AC4R, "nppiFilterLowPass_16s_AC4R");

  --*
  -- * Single channel 32-bit floating-point low-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLowPass_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14497
   pragma Import (C, nppiFilterLowPass_32f_C1R, "nppiFilterLowPass_32f_C1R");

  --*
  -- * Three channel 32-bit floating-point low-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLowPass_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14512
   pragma Import (C, nppiFilterLowPass_32f_C3R, "nppiFilterLowPass_32f_C3R");

  --*
  -- * Four channel 32-bit floating-point low-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLowPass_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14527
   pragma Import (C, nppiFilterLowPass_32f_C4R, "nppiFilterLowPass_32f_C4R");

  --*
  -- * Four channel 32-bit floating-point high-pass filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLowPass_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14542
   pragma Import (C, nppiFilterLowPass_32f_AC4R, "nppiFilterLowPass_32f_AC4R");

  --* @} FilterLowPass  
  --* @name FilterLowPassBorder
  -- *
  -- * Filters the image using a low-pass filter kernel with border control.
  -- * If any portion of the mask overlaps the source image boundary the requested 
  -- * border type operation is applied to all mask pixels which fall outside of the source image.
  -- *
  -- * Currently only the NPP_BORDER_REPLICATE border type operation is supported. 
  -- *
  -- *
  -- * \f[
  -- *  \left( \begin{array}{rrr}
  -- *      1/9 & 1/9 & 1/9 \ *      1/9 & 1/9 & 1/9 \ *      1/9 & 1/9 & 1/9 \ *  \end{array} \right)
  --ight)
  -- *  \left( \begin{array}{rrrrr}
  -- *      1/25 & 1/25 & 1/25 & 1/25 & 1/25 \ *      1/25 & 1/25 & 1/25 & 1/25 & 1/25 \ *      1/25 & 1/25 & 1/25 & 1/25 & 1/25 \ *      1/25 & 1/25 & 1/25 & 1/25 & 1/25 \ *      1/25 & 1/25 & 1/25 & 1/25 & 1/25 \ *  \end{array} \right)
  --} \right)
  -- * \f]
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned high-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLowPassBorder_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14590
   pragma Import (C, nppiFilterLowPassBorder_8u_C1R, "nppiFilterLowPassBorder_8u_C1R");

  --*
  -- * Three channel 8-bit unsigned high-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLowPassBorder_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14608
   pragma Import (C, nppiFilterLowPassBorder_8u_C3R, "nppiFilterLowPassBorder_8u_C3R");

  --*
  -- * Four channel 8-bit unsigned high-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLowPassBorder_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14626
   pragma Import (C, nppiFilterLowPassBorder_8u_C4R, "nppiFilterLowPassBorder_8u_C4R");

  --*
  -- * Four channel 8-bit unsigned high-pass filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLowPassBorder_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14644
   pragma Import (C, nppiFilterLowPassBorder_8u_AC4R, "nppiFilterLowPassBorder_8u_AC4R");

  --*
  -- * Single channel 16-bit unsigned high-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLowPassBorder_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14662
   pragma Import (C, nppiFilterLowPassBorder_16u_C1R, "nppiFilterLowPassBorder_16u_C1R");

  --*
  -- * Three channel 16-bit unsigned high-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLowPassBorder_16u_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14680
   pragma Import (C, nppiFilterLowPassBorder_16u_C3R, "nppiFilterLowPassBorder_16u_C3R");

  --*
  -- * Four channel 16-bit unsigned high-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLowPassBorder_16u_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14698
   pragma Import (C, nppiFilterLowPassBorder_16u_C4R, "nppiFilterLowPassBorder_16u_C4R");

  --*
  -- * Four channel 16-bit unsigned high-pass filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLowPassBorder_16u_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14716
   pragma Import (C, nppiFilterLowPassBorder_16u_AC4R, "nppiFilterLowPassBorder_16u_AC4R");

  --*
  -- * Single channel 16-bit signed high-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLowPassBorder_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14734
   pragma Import (C, nppiFilterLowPassBorder_16s_C1R, "nppiFilterLowPassBorder_16s_C1R");

  --*
  -- * Three channel 16-bit signed high-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLowPassBorder_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14752
   pragma Import (C, nppiFilterLowPassBorder_16s_C3R, "nppiFilterLowPassBorder_16s_C3R");

  --*
  -- * Four channel 16-bit signed high-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLowPassBorder_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14770
   pragma Import (C, nppiFilterLowPassBorder_16s_C4R, "nppiFilterLowPassBorder_16s_C4R");

  --*
  -- * Four channel 16-bit signed high-pass filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLowPassBorder_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14788
   pragma Import (C, nppiFilterLowPassBorder_16s_AC4R, "nppiFilterLowPassBorder_16s_AC4R");

  --*
  -- * Single channel 32-bit floating-point high-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLowPassBorder_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14806
   pragma Import (C, nppiFilterLowPassBorder_32f_C1R, "nppiFilterLowPassBorder_32f_C1R");

  --*
  -- * Three channel 32-bit floating-point high-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLowPassBorder_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14824
   pragma Import (C, nppiFilterLowPassBorder_32f_C3R, "nppiFilterLowPassBorder_32f_C3R");

  --*
  -- * Four channel 32-bit floating-point high-pass filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLowPassBorder_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14842
   pragma Import (C, nppiFilterLowPassBorder_32f_C4R, "nppiFilterLowPassBorder_32f_C4R");

  --*
  -- * Four channel 32-bit floating-point high-pass filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize Enumeration value specifying the mask size.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterLowPassBorder_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14860
   pragma Import (C, nppiFilterLowPassBorder_32f_AC4R, "nppiFilterLowPassBorder_32f_AC4R");

  --* @} FilterLowPassBorder  
  --* @name FilterSharpen
  -- *
  -- * Filters the image using a sharpening filter kernel:
  -- *
  -- * \f[
  -- *  \left( \begin{array}{rrr}
  -- *      -1/8 & -1/8 & -1/8 \ *      -1/8 & 16/8 & -1/8 \ *      -1/8 & -1/8 & -1/8 \ *  \end{array} \right)
  --ight)
  -- * \f]
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned sharpening filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSharpen_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14892
   pragma Import (C, nppiFilterSharpen_8u_C1R, "nppiFilterSharpen_8u_C1R");

  --*
  -- * Three channel 8-bit unsigned sharpening filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSharpen_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14905
   pragma Import (C, nppiFilterSharpen_8u_C3R, "nppiFilterSharpen_8u_C3R");

  --*
  -- * Four channel 8-bit unsigned sharpening filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSharpen_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14918
   pragma Import (C, nppiFilterSharpen_8u_C4R, "nppiFilterSharpen_8u_C4R");

  --*
  -- * Four channel 8-bit unsigned sharpening filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSharpen_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14931
   pragma Import (C, nppiFilterSharpen_8u_AC4R, "nppiFilterSharpen_8u_AC4R");

  --*
  -- * Single channel 16-bit unsigned sharpening filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSharpen_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14944
   pragma Import (C, nppiFilterSharpen_16u_C1R, "nppiFilterSharpen_16u_C1R");

  --*
  -- * Three channel 16-bit unsigned sharpening filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSharpen_16u_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14957
   pragma Import (C, nppiFilterSharpen_16u_C3R, "nppiFilterSharpen_16u_C3R");

  --*
  -- * Four channel 16-bit unsigned sharpening filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSharpen_16u_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14970
   pragma Import (C, nppiFilterSharpen_16u_C4R, "nppiFilterSharpen_16u_C4R");

  --*
  -- * Four channel 16-bit unsigned sharpening filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSharpen_16u_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14983
   pragma Import (C, nppiFilterSharpen_16u_AC4R, "nppiFilterSharpen_16u_AC4R");

  --*
  -- * Single channel 16-bit signed sharpening filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSharpen_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:14996
   pragma Import (C, nppiFilterSharpen_16s_C1R, "nppiFilterSharpen_16s_C1R");

  --*
  -- * Three channel 16-bit signed sharpening filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSharpen_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15009
   pragma Import (C, nppiFilterSharpen_16s_C3R, "nppiFilterSharpen_16s_C3R");

  --*
  -- * Four channel 16-bit signed sharpening filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSharpen_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15022
   pragma Import (C, nppiFilterSharpen_16s_C4R, "nppiFilterSharpen_16s_C4R");

  --*
  -- * Four channel 16-bit signed sharpening filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSharpen_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15035
   pragma Import (C, nppiFilterSharpen_16s_AC4R, "nppiFilterSharpen_16s_AC4R");

  --*
  -- * Single channel 32-bit floating-point sharpening filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSharpen_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15048
   pragma Import (C, nppiFilterSharpen_32f_C1R, "nppiFilterSharpen_32f_C1R");

  --*
  -- * Three channel 32-bit floating-point sharpening filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSharpen_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15061
   pragma Import (C, nppiFilterSharpen_32f_C3R, "nppiFilterSharpen_32f_C3R");

  --*
  -- * Four channel 32-bit floating-point sharpening filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSharpen_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15074
   pragma Import (C, nppiFilterSharpen_32f_C4R, "nppiFilterSharpen_32f_C4R");

  --*
  -- * Four channel 32-bit floating-point sharpening filter, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSharpen_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15087
   pragma Import (C, nppiFilterSharpen_32f_AC4R, "nppiFilterSharpen_32f_AC4R");

  --* @} FilterSharpen  
  --* @name FilterSharpenBorder
  -- *
  -- * Filters the image using a sharpening filter kernel with border control. If any portion of the 3x3 mask overlaps the source
  -- * image boundary the requested border type operation is applied to all mask pixels
  -- * which fall outside of the source image.
  -- *
  -- * Currently only the NPP_BORDER_REPLICATE border type operation is supported.
  -- *
  -- * \f[
  -- *  \left( \begin{array}{rrr}
  -- *      -1/8 & -1/8 & -1/8 \ *      -1/8 & 16/8 & -1/8 \ *      -1/8 & -1/8 & -1/8 \ *  \end{array} \right)
  --ight)
  -- * \f]
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned sharpening filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSharpenBorder_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15125
   pragma Import (C, nppiFilterSharpenBorder_8u_C1R, "nppiFilterSharpenBorder_8u_C1R");

  --*
  -- * Three channel 8-bit unsigned sharpening filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSharpenBorder_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15141
   pragma Import (C, nppiFilterSharpenBorder_8u_C3R, "nppiFilterSharpenBorder_8u_C3R");

  --*
  -- * Four channel 8-bit unsigned sharpening filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSharpenBorder_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15157
   pragma Import (C, nppiFilterSharpenBorder_8u_C4R, "nppiFilterSharpenBorder_8u_C4R");

  --*
  -- * Four channel 8-bit unsigned sharpening filter with border control, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSharpenBorder_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15173
   pragma Import (C, nppiFilterSharpenBorder_8u_AC4R, "nppiFilterSharpenBorder_8u_AC4R");

  --*
  -- * Single channel 16-bit unsigned sharpening filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSharpenBorder_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15189
   pragma Import (C, nppiFilterSharpenBorder_16u_C1R, "nppiFilterSharpenBorder_16u_C1R");

  --*
  -- * Three channel 16-bit unsigned sharpening filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSharpenBorder_16u_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15205
   pragma Import (C, nppiFilterSharpenBorder_16u_C3R, "nppiFilterSharpenBorder_16u_C3R");

  --*
  -- * Four channel 16-bit unsigned sharpening filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSharpenBorder_16u_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15221
   pragma Import (C, nppiFilterSharpenBorder_16u_C4R, "nppiFilterSharpenBorder_16u_C4R");

  --*
  -- * Four channel 16-bit unsigned sharpening filter with border control, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSharpenBorder_16u_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15237
   pragma Import (C, nppiFilterSharpenBorder_16u_AC4R, "nppiFilterSharpenBorder_16u_AC4R");

  --*
  -- * Single channel 16-bit signed sharpening filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSharpenBorder_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15253
   pragma Import (C, nppiFilterSharpenBorder_16s_C1R, "nppiFilterSharpenBorder_16s_C1R");

  --*
  -- * Three channel 16-bit signed sharpening filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSharpenBorder_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15269
   pragma Import (C, nppiFilterSharpenBorder_16s_C3R, "nppiFilterSharpenBorder_16s_C3R");

  --*
  -- * Four channel 16-bit signed sharpening filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSharpenBorder_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15285
   pragma Import (C, nppiFilterSharpenBorder_16s_C4R, "nppiFilterSharpenBorder_16s_C4R");

  --*
  -- * Four channel 16-bit signed sharpening filter with border control, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSharpenBorder_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15301
   pragma Import (C, nppiFilterSharpenBorder_16s_AC4R, "nppiFilterSharpenBorder_16s_AC4R");

  --*
  -- * Single channel 32-bit floating-point sharpening filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSharpenBorder_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15317
   pragma Import (C, nppiFilterSharpenBorder_32f_C1R, "nppiFilterSharpenBorder_32f_C1R");

  --*
  -- * Three channel 32-bit floating-point sharpening filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSharpenBorder_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15333
   pragma Import (C, nppiFilterSharpenBorder_32f_C3R, "nppiFilterSharpenBorder_32f_C3R");

  --*
  -- * Four channel 32-bit floating-point sharpening filter with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSharpenBorder_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15349
   pragma Import (C, nppiFilterSharpenBorder_32f_C4R, "nppiFilterSharpenBorder_32f_C4R");

  --*
  -- * Four channel 32-bit floating-point sharpening filter with border control, ignoring alpha channel.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterSharpenBorder_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15365
   pragma Import (C, nppiFilterSharpenBorder_32f_AC4R, "nppiFilterSharpenBorder_32f_AC4R");

  --* @} FilterSharpenBorder  
  --* @name FilterUnsharpBorder
  -- *
  -- * Filters the image using a unsharp-mask sharpening filter kernel with border control.
  -- *
  -- * The algorithm involves the following steps:
  -- * Smooth the original image with a Gaussian filter, with the width controlled by the nRadius.
  -- * Subtract the smoothed image from the original to create a high-pass filtered image.
  -- * Apply any clipping needed on the high-pass image, as controlled by the nThreshold.
  -- * Add a certain percentage of the high-pass filtered image to the original image, 
  -- * with the percentage controlled by the nWeight.
  -- * In pseudocode this algorithm can be written as:
  -- * HighPass = Image - Gaussian(Image)
  -- * Result = Image + nWeight * HighPass * ( |HighPass| >= nThreshold ) 
  -- * where nWeight is the amount, nThreshold is the threshold, and >= indicates a Boolean operation, 1 if true, or 0 otherwise.
  -- *
  -- * If any portion of the mask overlaps the source image boundary, the requested border type 
  -- * operation is applied to all mask pixels which fall outside of the source image.
  -- *
  -- * Currently only the NPP_BORDER_REPLICATE border type operation is supported.
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Single channel 8-bit unsigned unsharp filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nRadius The radius of the Gaussian filter, in pixles, not counting the center pixel.
  -- * \param nSigma The standard deviation of the Gaussian filter, in pixel.
  -- * \param nWeight The percentage of the difference between the original and the high pass image that is added back into the original.
  -- * \param nThreshold The threshold neede to apply the difference amount.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \param pDeviceBuffer Pointer to the user-allocated device scratch buffer required for the unsharp operation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterUnsharpBorder_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nRadius : nppdefs_h.Npp32f;
      nSigma : nppdefs_h.Npp32f;
      nWeight : nppdefs_h.Npp32f;
      nThreshold : nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15411
   pragma Import (C, nppiFilterUnsharpBorder_8u_C1R, "nppiFilterUnsharpBorder_8u_C1R");

  --*
  -- * Three channel 8-bit unsigned unsharp filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nRadius The radius of the Gaussian filter, in pixles, not counting the center pixel.
  -- * \param nSigma The standard deviation of the Gaussian filter, in pixel.
  -- * \param nWeight The percentage of the difference between the original and the high pass image that is added back into the original.
  -- * \param nThreshold The threshold neede to apply the difference amount.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \param pDeviceBuffer Pointer to the user-allocated device scratch buffer required for the unsharp operation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterUnsharpBorder_8u_C3R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nRadius : nppdefs_h.Npp32f;
      nSigma : nppdefs_h.Npp32f;
      nWeight : nppdefs_h.Npp32f;
      nThreshold : nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15431
   pragma Import (C, nppiFilterUnsharpBorder_8u_C3R, "nppiFilterUnsharpBorder_8u_C3R");

  --*
  -- * Four channel 8-bit unsigned unsharp filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nRadius The radius of the Gaussian filter, in pixles, not counting the center pixel.
  -- * \param nSigma The standard deviation of the Gaussian filter, in pixel.
  -- * \param nWeight The percentage of the difference between the original and the high pass image that is added back into the original.
  -- * \param nThreshold The threshold neede to apply the difference amount.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \param pDeviceBuffer Pointer to the user-allocated device scratch buffer required for the unsharp operation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterUnsharpBorder_8u_C4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nRadius : nppdefs_h.Npp32f;
      nSigma : nppdefs_h.Npp32f;
      nWeight : nppdefs_h.Npp32f;
      nThreshold : nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15451
   pragma Import (C, nppiFilterUnsharpBorder_8u_C4R, "nppiFilterUnsharpBorder_8u_C4R");

  --*
  -- * Four channel 8-bit unsigned unsharp filter (alpha channel is not processed).
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nRadius The radius of the Gaussian filter, in pixles, not counting the center pixel.
  -- * \param nSigma The standard deviation of the Gaussian filter, in pixel.
  -- * \param nWeight The percentage of the difference between the original and the high pass image that is added back into the original.
  -- * \param nThreshold The threshold neede to apply the difference amount.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \param pDeviceBuffer Pointer to the user-allocated device scratch buffer required for the unsharp operation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterUnsharpBorder_8u_AC4R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nRadius : nppdefs_h.Npp32f;
      nSigma : nppdefs_h.Npp32f;
      nWeight : nppdefs_h.Npp32f;
      nThreshold : nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15471
   pragma Import (C, nppiFilterUnsharpBorder_8u_AC4R, "nppiFilterUnsharpBorder_8u_AC4R");

  --*
  -- * Single channel 16-bit unsigned unsharp filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nRadius The radius of the Gaussian filter, in pixles, not counting the center pixel.
  -- * \param nSigma The standard deviation of the Gaussian filter, in pixel.
  -- * \param nWeight The percentage of the difference between the original and the high pass image that is added back into the original.
  -- * \param nThreshold The threshold neede to apply the difference amount.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \param pDeviceBuffer Pointer to the user-allocated device scratch buffer required for the unsharp operation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterUnsharpBorder_16u_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nRadius : nppdefs_h.Npp32f;
      nSigma : nppdefs_h.Npp32f;
      nWeight : nppdefs_h.Npp32f;
      nThreshold : nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15491
   pragma Import (C, nppiFilterUnsharpBorder_16u_C1R, "nppiFilterUnsharpBorder_16u_C1R");

  --*
  -- * Three channel 16-bit unsigned unsharp filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nRadius The radius of the Gaussian filter, in pixles, not counting the center pixel.
  -- * \param nSigma The standard deviation of the Gaussian filter, in pixel.
  -- * \param nWeight The percentage of the difference between the original and the high pass image that is added back into the original.
  -- * \param nThreshold The threshold neede to apply the difference amount.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \param pDeviceBuffer Pointer to the user-allocated device scratch buffer required for the unsharp operation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterUnsharpBorder_16u_C3R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nRadius : nppdefs_h.Npp32f;
      nSigma : nppdefs_h.Npp32f;
      nWeight : nppdefs_h.Npp32f;
      nThreshold : nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15511
   pragma Import (C, nppiFilterUnsharpBorder_16u_C3R, "nppiFilterUnsharpBorder_16u_C3R");

  --*
  -- * Four channel 16-bit unsigned unsharp filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nRadius The radius of the Gaussian filter, in pixles, not counting the center pixel.
  -- * \param nSigma The standard deviation of the Gaussian filter, in pixel.
  -- * \param nWeight The percentage of the difference between the original and the high pass image that is added back into the original.
  -- * \param nThreshold The threshold neede to apply the difference amount.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \param pDeviceBuffer Pointer to the user-allocated device scratch buffer required for the unsharp operation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterUnsharpBorder_16u_C4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nRadius : nppdefs_h.Npp32f;
      nSigma : nppdefs_h.Npp32f;
      nWeight : nppdefs_h.Npp32f;
      nThreshold : nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15531
   pragma Import (C, nppiFilterUnsharpBorder_16u_C4R, "nppiFilterUnsharpBorder_16u_C4R");

  --*
  -- * Four channel 16-bit unsigned unsharp filter (alpha channel is not processed).
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nRadius The radius of the Gaussian filter, in pixles, not counting the center pixel.
  -- * \param nSigma The standard deviation of the Gaussian filter, in pixel.
  -- * \param nWeight The percentage of the difference between the original and the high pass image that is added back into the original.
  -- * \param nThreshold The threshold neede to apply the difference amount.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \param pDeviceBuffer Pointer to the user-allocated device scratch buffer required for the unsharp operation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterUnsharpBorder_16u_AC4R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16u;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nRadius : nppdefs_h.Npp32f;
      nSigma : nppdefs_h.Npp32f;
      nWeight : nppdefs_h.Npp32f;
      nThreshold : nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15551
   pragma Import (C, nppiFilterUnsharpBorder_16u_AC4R, "nppiFilterUnsharpBorder_16u_AC4R");

  --*
  -- * Single channel 16-bit signed unsharp filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nRadius The radius of the Gaussian filter, in pixles, not counting the center pixel.
  -- * \param nSigma The standard deviation of the Gaussian filter, in pixel.
  -- * \param nWeight The percentage of the difference between the original and the high pass image that is added back into the original.
  -- * \param nThreshold The threshold neede to apply the difference amount.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \param pDeviceBuffer Pointer to the user-allocated device scratch buffer required for the unsharp operation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterUnsharpBorder_16s_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nRadius : nppdefs_h.Npp32f;
      nSigma : nppdefs_h.Npp32f;
      nWeight : nppdefs_h.Npp32f;
      nThreshold : nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15571
   pragma Import (C, nppiFilterUnsharpBorder_16s_C1R, "nppiFilterUnsharpBorder_16s_C1R");

  --*
  -- * Three channel 16-bit signed unsharp filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nRadius The radius of the Gaussian filter, in pixles, not counting the center pixel.
  -- * \param nSigma The standard deviation of the Gaussian filter, in pixel.
  -- * \param nWeight The percentage of the difference between the original and the high pass image that is added back into the original.
  -- * \param nThreshold The threshold neede to apply the difference amount.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \param pDeviceBuffer Pointer to the user-allocated device scratch buffer required for the unsharp operation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterUnsharpBorder_16s_C3R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nRadius : nppdefs_h.Npp32f;
      nSigma : nppdefs_h.Npp32f;
      nWeight : nppdefs_h.Npp32f;
      nThreshold : nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15591
   pragma Import (C, nppiFilterUnsharpBorder_16s_C3R, "nppiFilterUnsharpBorder_16s_C3R");

  --*
  -- * Four channel 16-bit signed unsharp filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nRadius The radius of the Gaussian filter, in pixles, not counting the center pixel.
  -- * \param nSigma The standard deviation of the Gaussian filter, in pixel.
  -- * \param nWeight The percentage of the difference between the original and the high pass image that is added back into the original.
  -- * \param nThreshold The threshold neede to apply the difference amount.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \param pDeviceBuffer Pointer to the user-allocated device scratch buffer required for the unsharp operation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterUnsharpBorder_16s_C4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nRadius : nppdefs_h.Npp32f;
      nSigma : nppdefs_h.Npp32f;
      nWeight : nppdefs_h.Npp32f;
      nThreshold : nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15611
   pragma Import (C, nppiFilterUnsharpBorder_16s_C4R, "nppiFilterUnsharpBorder_16s_C4R");

  --*
  -- * Four channel 16-bit signed unsharp filter (alpha channel is not processed).
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nRadius The radius of the Gaussian filter, in pixles, not counting the center pixel.
  -- * \param nSigma The standard deviation of the Gaussian filter, in pixel.
  -- * \param nWeight The percentage of the difference between the original and the high pass image that is added back into the original.
  -- * \param nThreshold The threshold neede to apply the difference amount.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \param pDeviceBuffer Pointer to the user-allocated device scratch buffer required for the unsharp operation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterUnsharpBorder_16s_AC4R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp16s;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nRadius : nppdefs_h.Npp32f;
      nSigma : nppdefs_h.Npp32f;
      nWeight : nppdefs_h.Npp32f;
      nThreshold : nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15631
   pragma Import (C, nppiFilterUnsharpBorder_16s_AC4R, "nppiFilterUnsharpBorder_16s_AC4R");

  --*
  -- * Single channel 32-bit floating point unsharp filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nRadius The radius of the Gaussian filter, in pixles, not counting the center pixel.
  -- * \param nSigma The standard deviation of the Gaussian filter, in pixel.
  -- * \param nWeight The percentage of the difference between the original and the high pass image that is added back into the original.
  -- * \param nThreshold The threshold neede to apply the difference amount.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \param pDeviceBuffer Pointer to the user-allocated device scratch buffer required for the unsharp operation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterUnsharpBorder_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nRadius : nppdefs_h.Npp32f;
      nSigma : nppdefs_h.Npp32f;
      nWeight : nppdefs_h.Npp32f;
      nThreshold : nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15651
   pragma Import (C, nppiFilterUnsharpBorder_32f_C1R, "nppiFilterUnsharpBorder_32f_C1R");

  --*
  -- * Three channel 32-bit floating point unsharp filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nRadius The radius of the Gaussian filter, in pixles, not counting the center pixel.
  -- * \param nSigma The standard deviation of the Gaussian filter, in pixel.
  -- * \param nWeight The percentage of the difference between the original and the high pass image that is added back into the original.
  -- * \param nThreshold The threshold neede to apply the difference amount.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \param pDeviceBuffer Pointer to the user-allocated device scratch buffer required for the unsharp operation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterUnsharpBorder_32f_C3R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nRadius : nppdefs_h.Npp32f;
      nSigma : nppdefs_h.Npp32f;
      nWeight : nppdefs_h.Npp32f;
      nThreshold : nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15671
   pragma Import (C, nppiFilterUnsharpBorder_32f_C3R, "nppiFilterUnsharpBorder_32f_C3R");

  --*
  -- * Four channel 32-bit floating point unsharp filter.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nRadius The radius of the Gaussian filter, in pixles, not counting the center pixel.
  -- * \param nSigma The standard deviation of the Gaussian filter, in pixel.
  -- * \param nWeight The percentage of the difference between the original and the high pass image that is added back into the original.
  -- * \param nThreshold The threshold neede to apply the difference amount.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \param pDeviceBuffer Pointer to the user-allocated device scratch buffer required for the unsharp operation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterUnsharpBorder_32f_C4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nRadius : nppdefs_h.Npp32f;
      nSigma : nppdefs_h.Npp32f;
      nWeight : nppdefs_h.Npp32f;
      nThreshold : nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15691
   pragma Import (C, nppiFilterUnsharpBorder_32f_C4R, "nppiFilterUnsharpBorder_32f_C4R");

  --*
  -- * Four channel 32-bit floating point unsharp filter (alpha channel is not processed).
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst \ref destination_image_pointer.
  -- * \param nDstStep \ref destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param nRadius The radius of the Gaussian filter, in pixles, not counting the center pixel.
  -- * \param nSigma The standard deviation of the Gaussian filter, in pixel.
  -- * \param nWeight The percentage of the difference between the original and the high pass image that is added back into the original.
  -- * \param nThreshold The threshold neede to apply the difference amount.
  -- * \param eBorderType The border type operation to be applied at source image border boundaries.
  -- * \param pDeviceBuffer Pointer to the user-allocated device scratch buffer required for the unsharp operation.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterUnsharpBorder_32f_AC4R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : nppdefs_h.Npp32s;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : nppdefs_h.Npp32s;
      oSizeROI : nppdefs_h.NppiSize;
      nRadius : nppdefs_h.Npp32f;
      nSigma : nppdefs_h.Npp32f;
      nWeight : nppdefs_h.Npp32f;
      nThreshold : nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15711
   pragma Import (C, nppiFilterUnsharpBorder_32f_AC4R, "nppiFilterUnsharpBorder_32f_AC4R");

  --*
  -- * Single channel 8-bit unsigned unsharp filter scratch memory size.
  -- * \param nRadius The radius of the Gaussian filter, in pixles, not counting the center pixel.
  -- * \param nSigma The standard deviation of the Gaussian filter, in pixel.
  -- * \param hpBufferSize Pointer to the size of the scratch buffer required for the unsharp operation.
  -- * \return \ref image_data_error_codes
  --  

   function nppiFilterUnsharpGetBufferSize_8u_C1R
     (nRadius : nppdefs_h.Npp32f;
      nSigma : nppdefs_h.Npp32f;
      hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15721
   pragma Import (C, nppiFilterUnsharpGetBufferSize_8u_C1R, "nppiFilterUnsharpGetBufferSize_8u_C1R");

  --*
  -- * Three channel 8-bit unsigned unsharp filter scratch memory size.
  -- * \param nRadius The radius of the Gaussian filter, in pixles, not counting the center pixel.
  -- * \param nSigma The standard deviation of the Gaussian filter, in pixel.
  -- * \param hpBufferSize Pointer to the size of the scratch buffer required for the unsharp operation.
  -- * \return \ref image_data_error_codes
  --  

   function nppiFilterUnsharpGetBufferSize_8u_C3R
     (nRadius : nppdefs_h.Npp32f;
      nSigma : nppdefs_h.Npp32f;
      hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15731
   pragma Import (C, nppiFilterUnsharpGetBufferSize_8u_C3R, "nppiFilterUnsharpGetBufferSize_8u_C3R");

  --*
  -- * Four channel 8-bit unsigned unsharp filter scratch memory size.
  -- * \param nRadius The radius of the Gaussian filter, in pixles, not counting the center pixel.
  -- * \param nSigma The standard deviation of the Gaussian filter, in pixel.
  -- * \param hpBufferSize Pointer to the size of the scratch buffer required for the unsharp operation.
  -- * \return \ref image_data_error_codes
  --  

   function nppiFilterUnsharpGetBufferSize_8u_C4R
     (nRadius : nppdefs_h.Npp32f;
      nSigma : nppdefs_h.Npp32f;
      hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15741
   pragma Import (C, nppiFilterUnsharpGetBufferSize_8u_C4R, "nppiFilterUnsharpGetBufferSize_8u_C4R");

  --*
  -- * Four channel 8-bit unsigned unsharp filter scratch memory size (alpha channel is not processed).
  -- * \param nRadius The radius of the Gaussian filter, in pixles, not counting the center pixel.
  -- * \param nSigma The standard deviation of the Gaussian filter, in pixel.
  -- * \param hpBufferSize Pointer to the size of the scratch buffer required for the unsharp operation.
  -- * \return \ref image_data_error_codes
  --  

   function nppiFilterUnsharpGetBufferSize_8u_AC4R
     (nRadius : nppdefs_h.Npp32f;
      nSigma : nppdefs_h.Npp32f;
      hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15751
   pragma Import (C, nppiFilterUnsharpGetBufferSize_8u_AC4R, "nppiFilterUnsharpGetBufferSize_8u_AC4R");

  --*
  -- * Single channel 16-bit unsigned unsharp filter scratch memory size.
  -- * \param nRadius The radius of the Gaussian filter, in pixles, not counting the center pixel.
  -- * \param nSigma The standard deviation of the Gaussian filter, in pixel.
  -- * \param hpBufferSize Pointer to the size of the scratch buffer required for the unsharp operation.
  -- * \return \ref image_data_error_codes
  --  

   function nppiFilterUnsharpGetBufferSize_16u_C1R
     (nRadius : nppdefs_h.Npp32f;
      nSigma : nppdefs_h.Npp32f;
      hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15761
   pragma Import (C, nppiFilterUnsharpGetBufferSize_16u_C1R, "nppiFilterUnsharpGetBufferSize_16u_C1R");

  --*
  -- * Three channel 16-bit unsigned unsharp filter scratch memory size.
  -- * \param nRadius The radius of the Gaussian filter, in pixles, not counting the center pixel.
  -- * \param nSigma The standard deviation of the Gaussian filter, in pixel.
  -- * \param hpBufferSize Pointer to the size of the scratch buffer required for the unsharp operation.
  -- * \return \ref image_data_error_codes
  --  

   function nppiFilterUnsharpGetBufferSize_16u_C3R
     (nRadius : nppdefs_h.Npp32f;
      nSigma : nppdefs_h.Npp32f;
      hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15771
   pragma Import (C, nppiFilterUnsharpGetBufferSize_16u_C3R, "nppiFilterUnsharpGetBufferSize_16u_C3R");

  --*
  -- * Four channel 16-bit unsigned unsharp filter scratch memory size.
  -- * \param nRadius The radius of the Gaussian filter, in pixles, not counting the center pixel.
  -- * \param nSigma The standard deviation of the Gaussian filter, in pixel.
  -- * \param hpBufferSize Pointer to the size of the scratch buffer required for the unsharp operation.
  -- * \return \ref image_data_error_codes
  --  

   function nppiFilterUnsharpGetBufferSize_16u_C4R
     (nRadius : nppdefs_h.Npp32f;
      nSigma : nppdefs_h.Npp32f;
      hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15781
   pragma Import (C, nppiFilterUnsharpGetBufferSize_16u_C4R, "nppiFilterUnsharpGetBufferSize_16u_C4R");

  --*
  -- * Four channel 16-bit unsigned unsharp filter scratch memory size (alpha channel is not processed).
  -- * \param nRadius The radius of the Gaussian filter, in pixles, not counting the center pixel.
  -- * \param nSigma The standard deviation of the Gaussian filter, in pixel.
  -- * \param hpBufferSize Pointer to the size of the scratch buffer required for the unsharp operation.
  -- * \return \ref image_data_error_codes
  --  

   function nppiFilterUnsharpGetBufferSize_16u_AC4R
     (nRadius : nppdefs_h.Npp32f;
      nSigma : nppdefs_h.Npp32f;
      hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15791
   pragma Import (C, nppiFilterUnsharpGetBufferSize_16u_AC4R, "nppiFilterUnsharpGetBufferSize_16u_AC4R");

  --*
  -- * Single channel 16-bit signed unsharp filter scratch memory size.
  -- * \param nRadius The radius of the Gaussian filter, in pixles, not counting the center pixel.
  -- * \param nSigma The standard deviation of the Gaussian filter, in pixel.
  -- * \param hpBufferSize Pointer to the size of the scratch buffer required for the unsharp operation.
  -- * \return \ref image_data_error_codes
  --  

   function nppiFilterUnsharpGetBufferSize_16s_C1R
     (nRadius : nppdefs_h.Npp32f;
      nSigma : nppdefs_h.Npp32f;
      hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15801
   pragma Import (C, nppiFilterUnsharpGetBufferSize_16s_C1R, "nppiFilterUnsharpGetBufferSize_16s_C1R");

  --*
  -- * Three channel 16-bit signed unsharp filter scratch memory size.
  -- * \param nRadius The radius of the Gaussian filter, in pixles, not counting the center pixel.
  -- * \param nSigma The standard deviation of the Gaussian filter, in pixel.
  -- * \param hpBufferSize Pointer to the size of the scratch buffer required for the unsharp operation.
  -- * \return \ref image_data_error_codes
  --  

   function nppiFilterUnsharpGetBufferSize_16s_C3R
     (nRadius : nppdefs_h.Npp32f;
      nSigma : nppdefs_h.Npp32f;
      hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15811
   pragma Import (C, nppiFilterUnsharpGetBufferSize_16s_C3R, "nppiFilterUnsharpGetBufferSize_16s_C3R");

  --*
  -- * Four channel 16-bit signed unsharp filter scratch memory size.
  -- * \param nRadius The radius of the Gaussian filter, in pixles, not counting the center pixel.
  -- * \param nSigma The standard deviation of the Gaussian filter, in pixel.
  -- * \param hpBufferSize Pointer to the size of the scratch buffer required for the unsharp operation.
  -- * \return \ref image_data_error_codes
  --  

   function nppiFilterUnsharpGetBufferSize_16s_C4R
     (nRadius : nppdefs_h.Npp32f;
      nSigma : nppdefs_h.Npp32f;
      hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15821
   pragma Import (C, nppiFilterUnsharpGetBufferSize_16s_C4R, "nppiFilterUnsharpGetBufferSize_16s_C4R");

  --*
  -- * Four channel 16-bit signed unsharp filter scratch memory size (alpha channel is not processed).
  -- * \param nRadius The radius of the Gaussian filter, in pixles, not counting the center pixel.
  -- * \param nSigma The standard deviation of the Gaussian filter, in pixel.
  -- * \param hpBufferSize Pointer to the size of the scratch buffer required for the unsharp operation.
  -- * \return \ref image_data_error_codes
  --  

   function nppiFilterUnsharpGetBufferSize_16s_AC4R
     (nRadius : nppdefs_h.Npp32f;
      nSigma : nppdefs_h.Npp32f;
      hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15831
   pragma Import (C, nppiFilterUnsharpGetBufferSize_16s_AC4R, "nppiFilterUnsharpGetBufferSize_16s_AC4R");

  --*
  -- * Single channel 32-bit floating point unsharp filter scratch memory size.
  -- * \param nRadius The radius of the Gaussian filter, in pixles, not counting the center pixel.
  -- * \param nSigma The standard deviation of the Gaussian filter, in pixel.
  -- * \param hpBufferSize Pointer to the size of the scratch buffer required for the unsharp operation.
  -- * \return \ref image_data_error_codes
  --  

   function nppiFilterUnsharpGetBufferSize_32f_C1R
     (nRadius : nppdefs_h.Npp32f;
      nSigma : nppdefs_h.Npp32f;
      hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15841
   pragma Import (C, nppiFilterUnsharpGetBufferSize_32f_C1R, "nppiFilterUnsharpGetBufferSize_32f_C1R");

  --*
  -- * Three channel 32-bit floating point unsharp filter scratch memory size.
  -- * \param nRadius The radius of the Gaussian filter, in pixles, not counting the center pixel.
  -- * \param nSigma The standard deviation of the Gaussian filter, in pixel.
  -- * \param hpBufferSize Pointer to the size of the scratch buffer required for the unsharp operation.
  -- * \return \ref image_data_error_codes
  --  

   function nppiFilterUnsharpGetBufferSize_32f_C3R
     (nRadius : nppdefs_h.Npp32f;
      nSigma : nppdefs_h.Npp32f;
      hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15851
   pragma Import (C, nppiFilterUnsharpGetBufferSize_32f_C3R, "nppiFilterUnsharpGetBufferSize_32f_C3R");

  --*
  -- * Four channel 32-bit floating point unsharp filter scratch memory size.
  -- * \param nRadius The radius of the Gaussian filter, in pixles, not counting the center pixel.
  -- * \param nSigma The standard deviation of the Gaussian filter, in pixel.
  -- * \param hpBufferSize Pointer to the size of the scratch buffer required for the unsharp operation.
  -- * \return \ref image_data_error_codes
  --  

   function nppiFilterUnsharpGetBufferSize_32f_C4R
     (nRadius : nppdefs_h.Npp32f;
      nSigma : nppdefs_h.Npp32f;
      hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15861
   pragma Import (C, nppiFilterUnsharpGetBufferSize_32f_C4R, "nppiFilterUnsharpGetBufferSize_32f_C4R");

  --*
  -- * Four channel 32-bit floating point unsharp filter scratch memory size (alpha channel is not processed).
  -- * \param nRadius The radius of the Gaussian filter, in pixles, not counting the center pixel.
  -- * \param nSigma The standard deviation of the Gaussian filter, in pixel.
  -- * \param hpBufferSize Pointer to the size of the scratch buffer required for the unsharp operation.
  -- * \return \ref image_data_error_codes
  --  

   function nppiFilterUnsharpGetBufferSize_32f_AC4R
     (nRadius : nppdefs_h.Npp32f;
      nSigma : nppdefs_h.Npp32f;
      hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15871
   pragma Import (C, nppiFilterUnsharpGetBufferSize_32f_AC4R, "nppiFilterUnsharpGetBufferSize_32f_AC4R");

  --* @} FilterUnsharp  
  --* @name GradientVectorPrewittBorder
  -- * 
  -- *  RGB Color to Prewitt Gradient Vector conversion using user selected fixed mask size and gradient distance method.
  -- *  Functions support up to 4 optional single channel output gradient vectors, X (vertical), Y (horizontal), magnitude, and angle
  -- *  with user selectable distance methods.  Output for a particular vector is disabled by supplying a NULL pointer for that
  -- *  vector. X and Y gradient vectors are in cartesian form in the destination data type.  
  -- *  Magnitude vectors are polar gradient form in the destination data type, angle is always in floating point polar gradient format.
  -- *  Only fixed mask sizes of 3x3 are supported.
  -- *  Only nppiNormL1 (sum) and nppiNormL2 (sqrt of sum of squares) distance methods are currently supported.
  -- *
  -- * Currently only the NPP_BORDER_REPLICATE border type operation is supported.  Borderless output can be accomplished by using a
  -- * larger source image than the destination and adjusting oSrcSize and oSrcOffset parameters accordingly.
  -- *
  -- * The following fixed kernel mask is used for producing the pDstX (vertical) output image.
  -- *
  -- * \f[
  -- *  \left( \begin{array}{rrr}
  -- *   -1 & 0 & 1 \ *   -1 & 0 & 1 \ *   -1 & 0 & 1 \ *  \end{array} \right)
  --ight)
  -- * \f]
  -- *  
  -- * The following fixed kernel mask is used for producing the pDstY (horizontal) output image.
  -- *
  -- * \f[
  -- *  \left( \begin{array}{rrr}
  -- *    1 &  1 &  1 \ *    0 &  0 &  0 \ *   -1 & -1 & -1 \ *  \end{array} \right)
  --ight)
  -- * \f]
  -- *
  -- * For the C1R versions of the function the pDstMag output image value for L1 normalization consists of 
  -- * the absolute value of the pDstX value plus the absolute value of the pDstY value at that particular image pixel location.
  -- * For the C1R versions of the function the pDstMag output image value for L2 normalization consists of 
  -- * the square root of the pDstX value squared plus the pDstY value squared at that particular image pixel location.
  -- * For the C1R versions of the function the pDstAngle output image value consists of the arctangent (atan2) of 
  -- * the pDstY value and the pDstX value at that particular image pixel location.
  -- *
  -- * For the C3C1R versions of the function, regardless of the selected normalization method, 
  -- * the L2 normalization value is first determined for each or the pDstX and pDstY values for each source channel then the largest L2
  -- * normalization value (largest gradient) is used to select which of the 3 pDstX channel values are output to the pDstX image or 
  -- * pDstY channel values are output to the pDstY image.
  -- * For the C3C1R versions of the function the pDstMag output image value for L1 normalizaton consists of the same technique
  -- * used for the C1R version for each source image channel.  Then the largest L2 normalization value is again used to select which
  -- * of the 3 pDstMag channel values to output to the pDstMag image.
  -- * For the C3C1R versions of the function the pDstMag output image value for L2 normalizaton consists of just outputting
  -- * the largest per source channel L2 normalization value to the pDstMag image.
  -- * For the C3C1R versions of the function the pDstAngle output image value consists of the same technique used for the C1R version
  -- * calculated for each source image channel.  Then the largest L2 normalization value is again used to select which of the 3 angle
  -- * values to output to the pDstAngle image. 
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * 1 channel 8-bit unsigned packed RGB to optional 1 channel 16-bit signed X (vertical), Y (horizontal), magnitude, 
  -- * and/or 32-bit floating point angle gradient vectors with user selectable fixed mask size and distance method with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDstX X vector destination_image_pointer.
  -- * \param nDstXStep X vector destination_image_line_step.
  -- * \param pDstY Y vector destination_image_pointer.
  -- * \param nDstYStep Y vector destination_image_line_step.
  -- * \param pDstMag magnitude destination_image_pointer.
  -- * \param nDstMagStep magnitude destination_image_line_step.
  -- * \param pDstAngle angle destination_image_pointer.
  -- * \param nDstAngleStep angle destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize fixed filter mask size to use.
  -- * \param eNorm gradient distance method to use.
  -- * \param eBorderType source image border type to use use.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiGradientVectorPrewittBorder_8u16s_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDstX : access nppdefs_h.Npp16s;
      nDstXStep : int;
      pDstY : access nppdefs_h.Npp16s;
      nDstYStep : int;
      pDstMag : access nppdefs_h.Npp16s;
      nDstMagStep : int;
      pDstAngle : access nppdefs_h.Npp32f;
      nDstAngleStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eNorm : nppdefs_h.NppiNorm;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15954
   pragma Import (C, nppiGradientVectorPrewittBorder_8u16s_C1R, "nppiGradientVectorPrewittBorder_8u16s_C1R");

  --*
  -- * 3 channel 8-bit unsigned packed RGB to optional 1 channel 16-bit signed X (vertical), Y (horizontal), magnitude, 
  -- * and/or 32-bit floating point angle gradient vectors with user selectable fixed mask size and distance method with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDstX X vector destination_image_pointer.
  -- * \param nDstXStep X vector destination_image_line_step.
  -- * \param pDstY Y vector destination_image_pointer.
  -- * \param nDstYStep Y vector destination_image_line_step.
  -- * \param pDstMag magnitude destination_image_pointer.
  -- * \param nDstMagStep magnitude destination_image_line_step.
  -- * \param pDstAngle angle destination_image_pointer.
  -- * \param nDstAngleStep angle destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize fixed filter mask size to use.
  -- * \param eNorm gradient distance method to use.
  -- * \param eBorderType source image border type to use use.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiGradientVectorPrewittBorder_8u16s_C3C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDstX : access nppdefs_h.Npp16s;
      nDstXStep : int;
      pDstY : access nppdefs_h.Npp16s;
      nDstYStep : int;
      pDstMag : access nppdefs_h.Npp16s;
      nDstMagStep : int;
      pDstAngle : access nppdefs_h.Npp32f;
      nDstAngleStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eNorm : nppdefs_h.NppiNorm;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:15980
   pragma Import (C, nppiGradientVectorPrewittBorder_8u16s_C3C1R, "nppiGradientVectorPrewittBorder_8u16s_C3C1R");

  --*
  -- * 1 channel 16-bit signed packed RGB to optional 1 channel 32-bit floating point X (vertical), Y (horizontal), magnitude, 
  -- * and/or 32-bit floating point angle gradient vectors with user selectable fixed mask size and distance method with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDstX X vector destination_image_pointer.
  -- * \param nDstXStep X vector destination_image_line_step.
  -- * \param pDstY Y vector destination_image_pointer.
  -- * \param nDstYStep Y vector destination_image_line_step.
  -- * \param pDstMag magnitude destination_image_pointer.
  -- * \param nDstMagStep magnitude destination_image_line_step.
  -- * \param pDstAngle angle destination_image_pointer.
  -- * \param nDstAngleStep angle destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize fixed filter mask size to use.
  -- * \param eNorm gradient distance method to use.
  -- * \param eBorderType source image border type to use use.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiGradientVectorPrewittBorder_16s32f_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDstX : access nppdefs_h.Npp32f;
      nDstXStep : int;
      pDstY : access nppdefs_h.Npp32f;
      nDstYStep : int;
      pDstMag : access nppdefs_h.Npp32f;
      nDstMagStep : int;
      pDstAngle : access nppdefs_h.Npp32f;
      nDstAngleStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eNorm : nppdefs_h.NppiNorm;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:16006
   pragma Import (C, nppiGradientVectorPrewittBorder_16s32f_C1R, "nppiGradientVectorPrewittBorder_16s32f_C1R");

  --*
  -- * 3 channel 16-bit signed packed RGB to optional 1 channel 32-bit floating point X (vertical), Y (horizontal), magnitude, 
  -- * and/or 32-bit floating point angle gradient vectors with user selectable fixed mask size and distance method with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDstX X vector destination_image_pointer.
  -- * \param nDstXStep X vector destination_image_line_step.
  -- * \param pDstY Y vector destination_image_pointer.
  -- * \param nDstYStep Y vector destination_image_line_step.
  -- * \param pDstMag magnitude destination_image_pointer.
  -- * \param nDstMagStep magnitude destination_image_line_step.
  -- * \param pDstAngle angle destination_image_pointer.
  -- * \param nDstAngleStep angle destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize fixed filter mask size to use.
  -- * \param eNorm gradient distance method to use.
  -- * \param eBorderType source image border type to use use.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiGradientVectorPrewittBorder_16s32f_C3C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDstX : access nppdefs_h.Npp32f;
      nDstXStep : int;
      pDstY : access nppdefs_h.Npp32f;
      nDstYStep : int;
      pDstMag : access nppdefs_h.Npp32f;
      nDstMagStep : int;
      pDstAngle : access nppdefs_h.Npp32f;
      nDstAngleStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eNorm : nppdefs_h.NppiNorm;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:16032
   pragma Import (C, nppiGradientVectorPrewittBorder_16s32f_C3C1R, "nppiGradientVectorPrewittBorder_16s32f_C3C1R");

  --*
  -- * 1 channel 16-bit unsigned packed RGB to optional 1 channel 32-bit floating point X (vertical), Y (horizontal), magnitude, 
  -- * and/or 32-bit floating point angle gradient vectors with user selectable fixed mask size and distance method with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDstX X vector destination_image_pointer.
  -- * \param nDstXStep X vector destination_image_line_step.
  -- * \param pDstY Y vector destination_image_pointer.
  -- * \param nDstYStep Y vector destination_image_line_step.
  -- * \param pDstMag magnitude destination_image_pointer.
  -- * \param nDstMagStep magnitude destination_image_line_step.
  -- * \param pDstAngle angle destination_image_pointer.
  -- * \param nDstAngleStep angle destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize fixed filter mask size to use.
  -- * \param eNorm gradient distance method to use.
  -- * \param eBorderType source image border type to use use.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiGradientVectorPrewittBorder_16u32f_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDstX : access nppdefs_h.Npp32f;
      nDstXStep : int;
      pDstY : access nppdefs_h.Npp32f;
      nDstYStep : int;
      pDstMag : access nppdefs_h.Npp32f;
      nDstMagStep : int;
      pDstAngle : access nppdefs_h.Npp32f;
      nDstAngleStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eNorm : nppdefs_h.NppiNorm;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:16058
   pragma Import (C, nppiGradientVectorPrewittBorder_16u32f_C1R, "nppiGradientVectorPrewittBorder_16u32f_C1R");

  --*
  -- * 3 channel 16-bit unsigned packed RGB to optional 1 channel 32-bit floating point X (vertical), Y (horizontal), magnitude, 
  -- * and/or 32-bit floating point angle gradient vectors with user selectable fixed mask size and distance method with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDstX X vector destination_image_pointer.
  -- * \param nDstXStep X vector destination_image_line_step.
  -- * \param pDstY Y vector destination_image_pointer.
  -- * \param nDstYStep Y vector destination_image_line_step.
  -- * \param pDstMag magnitude destination_image_pointer.
  -- * \param nDstMagStep magnitude destination_image_line_step.
  -- * \param pDstAngle angle destination_image_pointer.
  -- * \param nDstAngleStep angle destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize fixed filter mask size to use.
  -- * \param eNorm gradient distance method to use.
  -- * \param eBorderType source image border type to use use.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiGradientVectorPrewittBorder_16u32f_C3C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDstX : access nppdefs_h.Npp32f;
      nDstXStep : int;
      pDstY : access nppdefs_h.Npp32f;
      nDstYStep : int;
      pDstMag : access nppdefs_h.Npp32f;
      nDstMagStep : int;
      pDstAngle : access nppdefs_h.Npp32f;
      nDstAngleStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eNorm : nppdefs_h.NppiNorm;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:16084
   pragma Import (C, nppiGradientVectorPrewittBorder_16u32f_C3C1R, "nppiGradientVectorPrewittBorder_16u32f_C3C1R");

  --*
  -- * 1 channel 32-bit floating point packed RGB to optional 1 channel 32-bit floating point X (vertical), Y (horizontal), magnitude, 
  -- * and/or 32-bit floating point angle gradient vectors with user selectable fixed mask size and distance method with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDstX X vector destination_image_pointer.
  -- * \param nDstXStep X vector destination_image_line_step.
  -- * \param pDstY Y vector destination_image_pointer.
  -- * \param nDstYStep Y vector destination_image_line_step.
  -- * \param pDstMag magnitude destination_image_pointer.
  -- * \param nDstMagStep magnitude destination_image_line_step.
  -- * \param pDstAngle angle destination_image_pointer.
  -- * \param nDstAngleStep angle destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize fixed filter mask size to use.
  -- * \param eNorm gradient distance method to use.
  -- * \param eBorderType source image border type to use use.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiGradientVectorPrewittBorder_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDstX : access nppdefs_h.Npp32f;
      nDstXStep : int;
      pDstY : access nppdefs_h.Npp32f;
      nDstYStep : int;
      pDstMag : access nppdefs_h.Npp32f;
      nDstMagStep : int;
      pDstAngle : access nppdefs_h.Npp32f;
      nDstAngleStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eNorm : nppdefs_h.NppiNorm;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:16110
   pragma Import (C, nppiGradientVectorPrewittBorder_32f_C1R, "nppiGradientVectorPrewittBorder_32f_C1R");

  --*
  -- * 3 channel 32-bit floating point packed RGB to optional 1 channel 32-bit floating point X (vertical), Y (horizontal), magnitude, 
  -- * and/or 32-bit floating point angle gradient vectors with user selectable fixed mask size and distance method with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDstX X vector destination_image_pointer.
  -- * \param nDstXStep X vector destination_image_line_step.
  -- * \param pDstY Y vector destination_image_pointer.
  -- * \param nDstYStep Y vector destination_image_line_step.
  -- * \param pDstMag magnitude destination_image_pointer.
  -- * \param nDstMagStep magnitude destination_image_line_step.
  -- * \param pDstAngle angle destination_image_pointer.
  -- * \param nDstAngleStep angle destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize fixed filter mask size to use.
  -- * \param eNorm gradient distance method to use.
  -- * \param eBorderType source image border type to use use.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiGradientVectorPrewittBorder_32f_C3C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDstX : access nppdefs_h.Npp32f;
      nDstXStep : int;
      pDstY : access nppdefs_h.Npp32f;
      nDstYStep : int;
      pDstMag : access nppdefs_h.Npp32f;
      nDstMagStep : int;
      pDstAngle : access nppdefs_h.Npp32f;
      nDstAngleStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eNorm : nppdefs_h.NppiNorm;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:16136
   pragma Import (C, nppiGradientVectorPrewittBorder_32f_C3C1R, "nppiGradientVectorPrewittBorder_32f_C3C1R");

  --* @} GradientVectorPrewittBorder  
  --* @name GradientVectorScharrBorder
  -- * 
  -- *  RGB Color to Scharr Gradient Vector conversion using user selected fixed mask size and gradient distance method.
  -- *  Functions support up to 4 optional single channel output gradient vectors, X (vertical), Y (horizontal), magnitude, and angle
  -- *  with user selectable distance methods.  Output for a particular vector is disabled by supplying a NULL pointer for that
  -- *  vector. X and Y gradient vectors are in cartesian form in the destination data type.  
  -- *  Magnitude vectors are polar gradient form in the destination data type, angle is always in floating point polar gradient format.
  -- *  Only fixed mask sizes of 3x3 are supported.
  -- *  Only nppiNormL1 (sum) and nppiNormL2 (sqrt of sum of squares) distance methods are currently supported.
  -- *
  -- * Currently only the NPP_BORDER_REPLICATE border type operation is supported.  Borderless output can be accomplished by using a
  -- * larger source image than the destination and adjusting oSrcSize and oSrcOffset parameters accordingly.
  -- *
  -- * The following fixed kernel mask is used for producing the pDstX (vertical) output image.
  -- *
  -- * \f[
  -- *  \left( \begin{array}{rrr}
  -- *    3 & 0 &  -3 \ *   10 & 0 & -10 \ *    3 & 0 &  -3 \ *  \end{array} \right)
  --ight)
  -- * \f]
  -- *  
  -- * The following fixed kernel mask is used for producing the pDstY (horizontal) output image.
  -- *
  -- * \f[
  -- *  \left( \begin{array}{rrr}
  -- *    3 &  10 &  3 \ *    0 &   0 &  0 \ *   -3 & -10 & -3 \ *  \end{array} \right)
  --ight)
  -- * \f]
  -- *
  -- * For the C1R versions of the function the pDstMag output image value for L1 normalization consists of 
  -- * the absolute value of the pDstX value plus the absolute value of the pDstY value at that particular image pixel location.
  -- * For the C1R versions of the function the pDstMag output image value for L2 normalization consists of 
  -- * the square root of the pDstX value squared plus the pDstY value squared at that particular image pixel location.
  -- * For the C1R versions of the function the pDstAngle output image value consists of the arctangent (atan2) of 
  -- * the pDstY value and the pDstX value at that particular image pixel location.
  -- *
  -- * For the C3C1R versions of the function, regardless of the selected normalization method, 
  -- * the L2 normalization value is first determined for each or the pDstX and pDstY values for each source channel then the largest L2
  -- * normalization value (largest gradient) is used to select which of the 3 pDstX channel values are output to the pDstX image or 
  -- * pDstY channel values are output to the pDstY image.
  -- * For the C3C1R versions of the function the pDstMag output image value for L1 normalizaton consists of the same technique
  -- * used for the C1R version for each source image channel.  Then the largest L2 normalization value is again used to select which
  -- * of the 3 pDstMag channel values to output to the pDstMag image.
  -- * For the C3C1R versions of the function the pDstMag output image value for L2 normalizaton consists of just outputting
  -- * the largest per source channel L2 normalization value to the pDstMag image.
  -- * For the C3C1R versions of the function the pDstAngle output image value consists of the same technique used for the C1R version
  -- * calculated for each source image channel.  Then the largest L2 normalization value is again used to select which of the 3 angle
  -- * values to output to the pDstAngle image. 
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * 1 channel 8-bit unsigned packed RGB to optional 1 channel 16-bit signed X (vertical), Y (horizontal), magnitude, 
  -- * and/or 32-bit floating point angle gradient vectors with user selectable fixed mask size and distance method with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDstX X vector destination_image_pointer.
  -- * \param nDstXStep X vector destination_image_line_step.
  -- * \param pDstY Y vector destination_image_pointer.
  -- * \param nDstYStep Y vector destination_image_line_step.
  -- * \param pDstMag magnitude destination_image_pointer.
  -- * \param nDstMagStep magnitude destination_image_line_step.
  -- * \param pDstAngle angle destination_image_pointer.
  -- * \param nDstAngleStep angle destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize fixed filter mask size to use.
  -- * \param eNorm gradient distance method to use.
  -- * \param eBorderType source image border type to use use.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiGradientVectorScharrBorder_8u16s_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDstX : access nppdefs_h.Npp16s;
      nDstXStep : int;
      pDstY : access nppdefs_h.Npp16s;
      nDstYStep : int;
      pDstMag : access nppdefs_h.Npp16s;
      nDstMagStep : int;
      pDstAngle : access nppdefs_h.Npp32f;
      nDstAngleStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eNorm : nppdefs_h.NppiNorm;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:16222
   pragma Import (C, nppiGradientVectorScharrBorder_8u16s_C1R, "nppiGradientVectorScharrBorder_8u16s_C1R");

  --*
  -- * 3 channel 8-bit unsigned packed RGB to optional 1 channel 16-bit signed X (vertical), Y (horizontal), magnitude, 
  -- * and/or 32-bit floating point angle gradient vectors with user selectable fixed mask size and distance method with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDstX X vector destination_image_pointer.
  -- * \param nDstXStep X vector destination_image_line_step.
  -- * \param pDstY Y vector destination_image_pointer.
  -- * \param nDstYStep Y vector destination_image_line_step.
  -- * \param pDstMag magnitude destination_image_pointer.
  -- * \param nDstMagStep magnitude destination_image_line_step.
  -- * \param pDstAngle angle destination_image_pointer.
  -- * \param nDstAngleStep angle destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize fixed filter mask size to use.
  -- * \param eNorm gradient distance method to use.
  -- * \param eBorderType source image border type to use use.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiGradientVectorScharrBorder_8u16s_C3C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDstX : access nppdefs_h.Npp16s;
      nDstXStep : int;
      pDstY : access nppdefs_h.Npp16s;
      nDstYStep : int;
      pDstMag : access nppdefs_h.Npp16s;
      nDstMagStep : int;
      pDstAngle : access nppdefs_h.Npp32f;
      nDstAngleStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eNorm : nppdefs_h.NppiNorm;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:16248
   pragma Import (C, nppiGradientVectorScharrBorder_8u16s_C3C1R, "nppiGradientVectorScharrBorder_8u16s_C3C1R");

  --*
  -- * 1 channel 16-bit signed packed RGB to optional 1 channel 32-bit floating point X (vertical), Y (horizontal), magnitude, 
  -- * and/or 32-bit floating point angle gradient vectors with user selectable fixed mask size and distance method with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDstX X vector destination_image_pointer.
  -- * \param nDstXStep X vector destination_image_line_step.
  -- * \param pDstY Y vector destination_image_pointer.
  -- * \param nDstYStep Y vector destination_image_line_step.
  -- * \param pDstMag magnitude destination_image_pointer.
  -- * \param nDstMagStep magnitude destination_image_line_step.
  -- * \param pDstAngle angle destination_image_pointer.
  -- * \param nDstAngleStep angle destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize fixed filter mask size to use.
  -- * \param eNorm gradient distance method to use.
  -- * \param eBorderType source image border type to use use.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiGradientVectorScharrBorder_16s32f_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDstX : access nppdefs_h.Npp32f;
      nDstXStep : int;
      pDstY : access nppdefs_h.Npp32f;
      nDstYStep : int;
      pDstMag : access nppdefs_h.Npp32f;
      nDstMagStep : int;
      pDstAngle : access nppdefs_h.Npp32f;
      nDstAngleStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eNorm : nppdefs_h.NppiNorm;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:16274
   pragma Import (C, nppiGradientVectorScharrBorder_16s32f_C1R, "nppiGradientVectorScharrBorder_16s32f_C1R");

  --*
  -- * 3 channel 16-bit signed packed RGB to optional 1 channel 32-bit floating point X (vertical), Y (horizontal), magnitude, 
  -- * and/or 32-bit floating point angle gradient vectors with user selectable fixed mask size and distance method with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDstX X vector destination_image_pointer.
  -- * \param nDstXStep X vector destination_image_line_step.
  -- * \param pDstY Y vector destination_image_pointer.
  -- * \param nDstYStep Y vector destination_image_line_step.
  -- * \param pDstMag magnitude destination_image_pointer.
  -- * \param nDstMagStep magnitude destination_image_line_step.
  -- * \param pDstAngle angle destination_image_pointer.
  -- * \param nDstAngleStep angle destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize fixed filter mask size to use.
  -- * \param eNorm gradient distance method to use.
  -- * \param eBorderType source image border type to use use.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiGradientVectorScharrBorder_16s32f_C3C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDstX : access nppdefs_h.Npp32f;
      nDstXStep : int;
      pDstY : access nppdefs_h.Npp32f;
      nDstYStep : int;
      pDstMag : access nppdefs_h.Npp32f;
      nDstMagStep : int;
      pDstAngle : access nppdefs_h.Npp32f;
      nDstAngleStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eNorm : nppdefs_h.NppiNorm;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:16300
   pragma Import (C, nppiGradientVectorScharrBorder_16s32f_C3C1R, "nppiGradientVectorScharrBorder_16s32f_C3C1R");

  --*
  -- * 1 channel 16-bit unsigned packed RGB to optional 1 channel 32-bit floating point X (vertical), Y (horizontal), magnitude, 
  -- * and/or 32-bit floating point angle gradient vectors with user selectable fixed mask size and distance method with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDstX X vector destination_image_pointer.
  -- * \param nDstXStep X vector destination_image_line_step.
  -- * \param pDstY Y vector destination_image_pointer.
  -- * \param nDstYStep Y vector destination_image_line_step.
  -- * \param pDstMag magnitude destination_image_pointer.
  -- * \param nDstMagStep magnitude destination_image_line_step.
  -- * \param pDstAngle angle destination_image_pointer.
  -- * \param nDstAngleStep angle destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize fixed filter mask size to use.
  -- * \param eNorm gradient distance method to use.
  -- * \param eBorderType source image border type to use use.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiGradientVectorScharrBorder_16u32f_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDstX : access nppdefs_h.Npp32f;
      nDstXStep : int;
      pDstY : access nppdefs_h.Npp32f;
      nDstYStep : int;
      pDstMag : access nppdefs_h.Npp32f;
      nDstMagStep : int;
      pDstAngle : access nppdefs_h.Npp32f;
      nDstAngleStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eNorm : nppdefs_h.NppiNorm;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:16326
   pragma Import (C, nppiGradientVectorScharrBorder_16u32f_C1R, "nppiGradientVectorScharrBorder_16u32f_C1R");

  --*
  -- * 3 channel 16-bit unsigned packed RGB to optional 1 channel 32-bit floating point X (vertical), Y (horizontal), magnitude, 
  -- * and/or 32-bit floating point angle gradient vectors with user selectable fixed mask size and distance method with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDstX X vector destination_image_pointer.
  -- * \param nDstXStep X vector destination_image_line_step.
  -- * \param pDstY Y vector destination_image_pointer.
  -- * \param nDstYStep Y vector destination_image_line_step.
  -- * \param pDstMag magnitude destination_image_pointer.
  -- * \param nDstMagStep magnitude destination_image_line_step.
  -- * \param pDstAngle angle destination_image_pointer.
  -- * \param nDstAngleStep angle destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize fixed filter mask size to use.
  -- * \param eNorm gradient distance method to use.
  -- * \param eBorderType source image border type to use use.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiGradientVectorScharrBorder_16u32f_C3C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDstX : access nppdefs_h.Npp32f;
      nDstXStep : int;
      pDstY : access nppdefs_h.Npp32f;
      nDstYStep : int;
      pDstMag : access nppdefs_h.Npp32f;
      nDstMagStep : int;
      pDstAngle : access nppdefs_h.Npp32f;
      nDstAngleStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eNorm : nppdefs_h.NppiNorm;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:16352
   pragma Import (C, nppiGradientVectorScharrBorder_16u32f_C3C1R, "nppiGradientVectorScharrBorder_16u32f_C3C1R");

  --*
  -- * 1 channel 32-bit floating point packed RGB to optional 1 channel 32-bit floating point X (vertical), Y (horizontal), magnitude, 
  -- * and/or 32-bit floating point angle gradient vectors with user selectable fixed mask size and distance method with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDstX X vector destination_image_pointer.
  -- * \param nDstXStep X vector destination_image_line_step.
  -- * \param pDstY Y vector destination_image_pointer.
  -- * \param nDstYStep Y vector destination_image_line_step.
  -- * \param pDstMag magnitude destination_image_pointer.
  -- * \param nDstMagStep magnitude destination_image_line_step.
  -- * \param pDstAngle angle destination_image_pointer.
  -- * \param nDstAngleStep angle destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize fixed filter mask size to use.
  -- * \param eNorm gradient distance method to use.
  -- * \param eBorderType source image border type to use use.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiGradientVectorScharrBorder_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDstX : access nppdefs_h.Npp32f;
      nDstXStep : int;
      pDstY : access nppdefs_h.Npp32f;
      nDstYStep : int;
      pDstMag : access nppdefs_h.Npp32f;
      nDstMagStep : int;
      pDstAngle : access nppdefs_h.Npp32f;
      nDstAngleStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eNorm : nppdefs_h.NppiNorm;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:16378
   pragma Import (C, nppiGradientVectorScharrBorder_32f_C1R, "nppiGradientVectorScharrBorder_32f_C1R");

  --*
  -- * 3 channel 32-bit floating point packed RGB to optional 1 channel 32-bit floating point X (vertical), Y (horizontal), magnitude, 
  -- * and/or 32-bit floating point angle gradient vectors with user selectable fixed mask size and distance method with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDstX X vector destination_image_pointer.
  -- * \param nDstXStep X vector destination_image_line_step.
  -- * \param pDstY Y vector destination_image_pointer.
  -- * \param nDstYStep Y vector destination_image_line_step.
  -- * \param pDstMag magnitude destination_image_pointer.
  -- * \param nDstMagStep magnitude destination_image_line_step.
  -- * \param pDstAngle angle destination_image_pointer.
  -- * \param nDstAngleStep angle destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize fixed filter mask size to use.
  -- * \param eNorm gradient distance method to use.
  -- * \param eBorderType source image border type to use use.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiGradientVectorScharrBorder_32f_C3C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDstX : access nppdefs_h.Npp32f;
      nDstXStep : int;
      pDstY : access nppdefs_h.Npp32f;
      nDstYStep : int;
      pDstMag : access nppdefs_h.Npp32f;
      nDstMagStep : int;
      pDstAngle : access nppdefs_h.Npp32f;
      nDstAngleStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eNorm : nppdefs_h.NppiNorm;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:16404
   pragma Import (C, nppiGradientVectorScharrBorder_32f_C3C1R, "nppiGradientVectorScharrBorder_32f_C3C1R");

  --* @} GradientVectorScharrBorder  
  --* @name GradientVectorSobelBorder
  -- * 
  -- *  RGB Color to Sobel Gradient Vector conversion using user selected fixed mask size and gradient distance method.
  -- *  Functions support up to 4 optional single channel output gradient vectors, X (vertical), Y (horizontal), magnitude, and angle
  -- *  with user selectable distance methods.  Output for a particular vector is disabled by supplying a NULL pointer for that
  -- *  vector. X and Y gradient vectors are in cartesian form in the destination data type.  
  -- *  Magnitude vectors are polar gradient form in the destination data type, angle is always in floating point polar gradient format.
  -- *  Only fixed mask sizes of 3x3 and 5x5 are supported.
  -- *  Only nppiNormL1 (sum) and nppiNormL2 (sqrt of sum of squares) distance methods are currently supported.
  -- *
  -- * Currently only the NPP_BORDER_REPLICATE border type operation is supported.  Borderless output can be accomplished by using a
  -- * larger source image than the destination and adjusting oSrcSize and oSrcOffset parameters accordingly.
  -- *
  -- * One of the following fixed kernel masks are used for producing the 3x3 or 5x5 pDstX (vertical) output image depending on selected mask size.
  -- *
  -- * \f[
  -- *  \left( \begin{array}{rrr}
  -- *   -1 & 0 & 1 \ *   -2 & 0 & 2 \ *   -1 & 0 & 1 \ *  \end{array} \right)
  --ight)
  -- * \f]
  -- *  
  -- *
  -- * \f[
  -- *  \left( \begin{array}{rrrrr}
  -- *   -1 &  -2 & 0 &  2 & 1 \ *   -4 &  -8 & 0 &  8 & 4 \ *   -6 & -12 & 0 & 12 & 6 \ *   -4 &  -8 & 0 &  8 & 4 \ *   -1 &  -2 & 0 &  2 & 1 \ *  \end{array} \right)
  --} \right)
  -- * \f]
  -- *  
  -- * One of the following fixed kernel masks are used for producing the 3x3 or 5x5 pDstY (horizontal) output image depending on selected mask size.
  -- *
  -- * \f[
  -- *  \left( \begin{array}{rrr}
  -- *    1 &  2 &  1 \ *    0 &  0 &  0 \ *   -1 & -2 & -1 \ *  \end{array} \right)
  --ight)
  -- * \f]
  -- *
  -- *
  -- * \f[
  -- *  \left( \begin{array}{rrrrr}
  -- *    1 &  4 &   6 &  4 &  1 \ *    2 &  8 &  12 &  8 &  2 \ *    0 &  0 &   0 &  0 &  0 \ *   -2 & -8 & -12 & -8 & -2 \ *   -1 & -4 &  -6 & -4 & -1 \ *  \end{array} \right)
  --} \right)
  -- * \f]
  -- *
  -- * For the C1R versions of the function the pDstMag output image value for L1 normalization consists of 
  -- * the absolute value of the pDstX value plus the absolute value of the pDstY value at that particular image pixel location.
  -- * For the C1R versions of the function the pDstMag output image value for L2 normalization consists of 
  -- * the square root of the pDstX value squared plus the pDstY value squared at that particular image pixel location.
  -- * For the C1R versions of the function the pDstAngle output image value consists of the arctangent (atan2) of 
  -- * the pDstY value and the pDstX value at that particular image pixel location.
  -- *
  -- * For the C3C1R versions of the function, regardless of the selected normalization method, 
  -- * the L2 normalization value is first determined for each or the pDstX and pDstY values for each source channel then the largest L2
  -- * normalization value (largest gradient) is used to select which of the 3 pDstX channel values are output to the pDstX image or 
  -- * pDstY channel values are output to the pDstY image.
  -- * For the C3C1R versions of the function the pDstMag output image value for L1 normalizaton consists of the same technique
  -- * used for the C1R version for each source image channel.  Then the largest L2 normalization value is again used to select which
  -- * of the 3 pDstMag channel values to output to the pDstMag image.
  -- * For the C3C1R versions of the function the pDstMag output image value for L2 normalizaton consists of just outputting
  -- * the largest per source channel L2 normalization value to the pDstMag image.
  -- * For the C3C1R versions of the function the pDstAngle output image value consists of the same technique used for the C1R version
  -- * calculated for each source image channel.  Then the largest L2 normalization value is again used to select which of the 3 angle
  -- * values to output to the pDstAngle image. 
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * 1 channel 8-bit unsigned packed RGB to optional 1 channel 16-bit signed X (vertical), Y (horizontal), magnitude, 
  -- * and/or 32-bit floating point angle gradient vectors with user selectable fixed mask size and distance method with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDstX X vector destination_image_pointer.
  -- * \param nDstXStep X vector destination_image_line_step.
  -- * \param pDstY Y vector destination_image_pointer.
  -- * \param nDstYStep Y vector destination_image_line_step.
  -- * \param pDstMag magnitude destination_image_pointer.
  -- * \param nDstMagStep magnitude destination_image_line_step.
  -- * \param pDstAngle angle destination_image_pointer.
  -- * \param nDstAngleStep angle destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize fixed filter mask size to use.
  -- * \param eNorm gradient distance method to use.
  -- * \param eBorderType source image border type to use use.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiGradientVectorSobelBorder_8u16s_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDstX : access nppdefs_h.Npp16s;
      nDstXStep : int;
      pDstY : access nppdefs_h.Npp16s;
      nDstYStep : int;
      pDstMag : access nppdefs_h.Npp16s;
      nDstMagStep : int;
      pDstAngle : access nppdefs_h.Npp32f;
      nDstAngleStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eNorm : nppdefs_h.NppiNorm;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:16512
   pragma Import (C, nppiGradientVectorSobelBorder_8u16s_C1R, "nppiGradientVectorSobelBorder_8u16s_C1R");

  --*
  -- * 3 channel 8-bit unsigned packed RGB to optional 1 channel 16-bit signed X (vertical), Y (horizontal), magnitude, 
  -- * and/or 32-bit floating point angle gradient vectors with user selectable fixed mask size and distance method with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDstX X vector destination_image_pointer.
  -- * \param nDstXStep X vector destination_image_line_step.
  -- * \param pDstY Y vector destination_image_pointer.
  -- * \param nDstYStep Y vector destination_image_line_step.
  -- * \param pDstMag magnitude destination_image_pointer.
  -- * \param nDstMagStep magnitude destination_image_line_step.
  -- * \param pDstAngle angle destination_image_pointer.
  -- * \param nDstAngleStep angle destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize fixed filter mask size to use.
  -- * \param eNorm gradient distance method to use.
  -- * \param eBorderType source image border type to use use.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiGradientVectorSobelBorder_8u16s_C3C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDstX : access nppdefs_h.Npp16s;
      nDstXStep : int;
      pDstY : access nppdefs_h.Npp16s;
      nDstYStep : int;
      pDstMag : access nppdefs_h.Npp16s;
      nDstMagStep : int;
      pDstAngle : access nppdefs_h.Npp32f;
      nDstAngleStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eNorm : nppdefs_h.NppiNorm;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:16538
   pragma Import (C, nppiGradientVectorSobelBorder_8u16s_C3C1R, "nppiGradientVectorSobelBorder_8u16s_C3C1R");

  --*
  -- * 1 channel 16-bit signed packed RGB to optional 1 channel 32-bit floating point X (vertical), Y (horizontal), magnitude, 
  -- * and/or 32-bit floating point angle gradient vectors with user selectable fixed mask size and distance method with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDstX X vector destination_image_pointer.
  -- * \param nDstXStep X vector destination_image_line_step.
  -- * \param pDstY Y vector destination_image_pointer.
  -- * \param nDstYStep Y vector destination_image_line_step.
  -- * \param pDstMag magnitude destination_image_pointer.
  -- * \param nDstMagStep magnitude destination_image_line_step.
  -- * \param pDstAngle angle destination_image_pointer.
  -- * \param nDstAngleStep angle destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize fixed filter mask size to use.
  -- * \param eNorm gradient distance method to use.
  -- * \param eBorderType source image border type to use use.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiGradientVectorSobelBorder_16s32f_C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDstX : access nppdefs_h.Npp32f;
      nDstXStep : int;
      pDstY : access nppdefs_h.Npp32f;
      nDstYStep : int;
      pDstMag : access nppdefs_h.Npp32f;
      nDstMagStep : int;
      pDstAngle : access nppdefs_h.Npp32f;
      nDstAngleStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eNorm : nppdefs_h.NppiNorm;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:16564
   pragma Import (C, nppiGradientVectorSobelBorder_16s32f_C1R, "nppiGradientVectorSobelBorder_16s32f_C1R");

  --*
  -- * 3 channel 16-bit signed packed RGB to optional 1 channel 32-bit floating point X (vertical), Y (horizontal), magnitude, 
  -- * and/or 32-bit floating point angle gradient vectors with user selectable fixed mask size and distance method with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDstX X vector destination_image_pointer.
  -- * \param nDstXStep X vector destination_image_line_step.
  -- * \param pDstY Y vector destination_image_pointer.
  -- * \param nDstYStep Y vector destination_image_line_step.
  -- * \param pDstMag magnitude destination_image_pointer.
  -- * \param nDstMagStep magnitude destination_image_line_step.
  -- * \param pDstAngle angle destination_image_pointer.
  -- * \param nDstAngleStep angle destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize fixed filter mask size to use.
  -- * \param eNorm gradient distance method to use.
  -- * \param eBorderType source image border type to use use.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiGradientVectorSobelBorder_16s32f_C3C1R
     (pSrc : access nppdefs_h.Npp16s;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDstX : access nppdefs_h.Npp32f;
      nDstXStep : int;
      pDstY : access nppdefs_h.Npp32f;
      nDstYStep : int;
      pDstMag : access nppdefs_h.Npp32f;
      nDstMagStep : int;
      pDstAngle : access nppdefs_h.Npp32f;
      nDstAngleStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eNorm : nppdefs_h.NppiNorm;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:16590
   pragma Import (C, nppiGradientVectorSobelBorder_16s32f_C3C1R, "nppiGradientVectorSobelBorder_16s32f_C3C1R");

  --*
  -- * 1 channel 16-bit unsigned packed RGB to optional 1 channel 32-bit floating point X (vertical), Y (horizontal), magnitude, 
  -- * and/or 32-bit floating point angle gradient vectors with user selectable fixed mask size and distance method with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDstX X vector destination_image_pointer.
  -- * \param nDstXStep X vector destination_image_line_step.
  -- * \param pDstY Y vector destination_image_pointer.
  -- * \param nDstYStep Y vector destination_image_line_step.
  -- * \param pDstMag magnitude destination_image_pointer.
  -- * \param nDstMagStep magnitude destination_image_line_step.
  -- * \param pDstAngle angle destination_image_pointer.
  -- * \param nDstAngleStep angle destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize fixed filter mask size to use.
  -- * \param eNorm gradient distance method to use.
  -- * \param eBorderType source image border type to use use.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiGradientVectorSobelBorder_16u32f_C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDstX : access nppdefs_h.Npp32f;
      nDstXStep : int;
      pDstY : access nppdefs_h.Npp32f;
      nDstYStep : int;
      pDstMag : access nppdefs_h.Npp32f;
      nDstMagStep : int;
      pDstAngle : access nppdefs_h.Npp32f;
      nDstAngleStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eNorm : nppdefs_h.NppiNorm;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:16616
   pragma Import (C, nppiGradientVectorSobelBorder_16u32f_C1R, "nppiGradientVectorSobelBorder_16u32f_C1R");

  --*
  -- * 3 channel 16-bit unsigned packed RGB to optional 1 channel 32-bit floating point X (vertical), Y (horizontal), magnitude, 
  -- * and/or 32-bit floating point angle gradient vectors with user selectable fixed mask size and distance method with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDstX X vector destination_image_pointer.
  -- * \param nDstXStep X vector destination_image_line_step.
  -- * \param pDstY Y vector destination_image_pointer.
  -- * \param nDstYStep Y vector destination_image_line_step.
  -- * \param pDstMag magnitude destination_image_pointer.
  -- * \param nDstMagStep magnitude destination_image_line_step.
  -- * \param pDstAngle angle destination_image_pointer.
  -- * \param nDstAngleStep angle destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize fixed filter mask size to use.
  -- * \param eNorm gradient distance method to use.
  -- * \param eBorderType source image border type to use use.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiGradientVectorSobelBorder_16u32f_C3C1R
     (pSrc : access nppdefs_h.Npp16u;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDstX : access nppdefs_h.Npp32f;
      nDstXStep : int;
      pDstY : access nppdefs_h.Npp32f;
      nDstYStep : int;
      pDstMag : access nppdefs_h.Npp32f;
      nDstMagStep : int;
      pDstAngle : access nppdefs_h.Npp32f;
      nDstAngleStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eNorm : nppdefs_h.NppiNorm;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:16642
   pragma Import (C, nppiGradientVectorSobelBorder_16u32f_C3C1R, "nppiGradientVectorSobelBorder_16u32f_C3C1R");

  --*
  -- * 1 channel 32-bit floating point packed RGB to optional 1 channel 32-bit floating point X (vertical), Y (horizontal), magnitude, 
  -- * and/or 32-bit floating point angle gradient vectors with user selectable fixed mask size and distance method with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDstX X vector destination_image_pointer.
  -- * \param nDstXStep X vector destination_image_line_step.
  -- * \param pDstY Y vector destination_image_pointer.
  -- * \param nDstYStep Y vector destination_image_line_step.
  -- * \param pDstMag magnitude destination_image_pointer.
  -- * \param nDstMagStep magnitude destination_image_line_step.
  -- * \param pDstAngle angle destination_image_pointer.
  -- * \param nDstAngleStep angle destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize fixed filter mask size to use.
  -- * \param eNorm gradient distance method to use.
  -- * \param eBorderType source image border type to use use.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiGradientVectorSobelBorder_32f_C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDstX : access nppdefs_h.Npp32f;
      nDstXStep : int;
      pDstY : access nppdefs_h.Npp32f;
      nDstYStep : int;
      pDstMag : access nppdefs_h.Npp32f;
      nDstMagStep : int;
      pDstAngle : access nppdefs_h.Npp32f;
      nDstAngleStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eNorm : nppdefs_h.NppiNorm;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:16668
   pragma Import (C, nppiGradientVectorSobelBorder_32f_C1R, "nppiGradientVectorSobelBorder_32f_C1R");

  --*
  -- * 3 channel 32-bit floating point packed RGB to optional 1 channel 32-bit floating point X (vertical), Y (horizontal), magnitude, 
  -- * and/or 32-bit floating point angle gradient vectors with user selectable fixed mask size and distance method with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDstX X vector destination_image_pointer.
  -- * \param nDstXStep X vector destination_image_line_step.
  -- * \param pDstY Y vector destination_image_pointer.
  -- * \param nDstYStep Y vector destination_image_line_step.
  -- * \param pDstMag magnitude destination_image_pointer.
  -- * \param nDstMagStep magnitude destination_image_line_step.
  -- * \param pDstAngle angle destination_image_pointer.
  -- * \param nDstAngleStep angle destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eMaskSize fixed filter mask size to use.
  -- * \param eNorm gradient distance method to use.
  -- * \param eBorderType source image border type to use use.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiGradientVectorSobelBorder_32f_C3C1R
     (pSrc : access nppdefs_h.Npp32f;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDstX : access nppdefs_h.Npp32f;
      nDstXStep : int;
      pDstY : access nppdefs_h.Npp32f;
      nDstYStep : int;
      pDstMag : access nppdefs_h.Npp32f;
      nDstMagStep : int;
      pDstAngle : access nppdefs_h.Npp32f;
      nDstAngleStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eNorm : nppdefs_h.NppiNorm;
      eBorderType : nppdefs_h.NppiBorderType) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:16694
   pragma Import (C, nppiGradientVectorSobelBorder_32f_C3C1R, "nppiGradientVectorSobelBorder_32f_C3C1R");

  --* @} GradientVectorSobelBorder  
  --* @name FilterCannyBorder
  -- * 
  -- *  Performs Canny edge detection on a single channel 8-bit grayscale image and outputs a single channel 8-bit image consisting of 0x00 and 0xFF
  -- *  values with 0xFF representing edge pixels.  The algorithm consists of three phases.  The first phase generates two output images consisting
  -- *  of a single channel 16-bit signed image containing magnitude values and a single channel 32-bit floating point image containing the angular
  -- *  direction of those magnitude values.   This phase is accomplished by calling the appropriate GradientVectorBorder filter function based on
  -- *  the filter type, filter mask size, and norm type requested.  The next phase uses those magnitude and direction images to suppress non-maximum
  -- *  magnitude values which are lower than the values of either of its two nearest neighbors in the same direction as the test magnitude pixel in 
  -- *  the 3x3 surrounding magnitude pixel neighborhood.  This phase outputs a new magnitude image with non-maximum pixel values suppressed.  Finally, in the
  -- *  third phase, the new magnitude image is passed through a hysteresis threshold filter that filters out any magnitude values that are not connected
  -- *  to another edge magnitude value.   In this phase, any magnitude value above the high threshold value is automatically accepted, any magnitude
  -- *  value below the low threshold value is automatically rejected.  For magnitude values that lie between the low and high threshold, values are
  -- *  only accepted if one of their two neighbors in the same direction in the 3x3 neighborhood around them lies above the low threshold value.  In other words,
  -- *  if they are connected to an active edge.   J. Canny recommends that the ratio of high to low threshold limit be in the range two or three to one, 
  -- *  based on predicted signal-to-noise ratios. The final output of the third phase consists of a single channel 8-bit unsigned image of 0x00 and 0xFF 
  -- *  values based on whether they are accepted or rejected during threshold testing.
  -- *    
  -- * Currently only the NPP_BORDER_REPLICATE border type operation is supported.  Borderless output can be accomplished by using a
  -- * larger source image than the destination and adjusting oSrcSize and oSrcOffset parameters accordingly.
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Calculate scratch buffer size needed for the FilterCannyBorder function based on destination image SizeROI width and height.
  -- *
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterCannyBorderGetBufferSize (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:16735
   pragma Import (C, nppiFilterCannyBorderGetBufferSize, "nppiFilterCannyBorderGetBufferSize");

  --*
  -- * 1 channel 8-bit unsigned grayscale to 1 channel 8-bit unsigned black (0x00) and white (0xFF) image with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst output edge destination_image_pointer.
  -- * \param nDstStep output edge destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eFilterType selects between Sobel or Scharr filter type.
  -- * \param eMaskSize fixed filter mask size to use.
  -- * \param nLowThreshold low hysteresis threshold value.
  -- * \param nHighThreshold high hysteresis threshold value.
  -- * \param eNorm gradient distance method to use.
  -- * \param eBorderType source image border type to use use.
  -- * \param pDeviceBuffer pointer to scratch DEVICE memory buffer of size hpBufferSize (see nppiFilterCannyBorderGetBufferSize() above)
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterCannyBorder_8u_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp8u;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      eFilterType : nppdefs_h.NppiDifferentialKernel;
      eMaskSize : nppdefs_h.NppiMaskSize;
      nLowThreshold : nppdefs_h.Npp16s;
      nHighThreshold : nppdefs_h.Npp16s;
      eNorm : nppdefs_h.NppiNorm;
      eBorderType : nppdefs_h.NppiBorderType;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:16757
   pragma Import (C, nppiFilterCannyBorder_8u_C1R, "nppiFilterCannyBorder_8u_C1R");

  --* @} FilterCannyBorder  
  --* @name FilterHarrisCornersBorder
  -- * 
  -- *  Performs Harris Corner detection on a single channel 8-bit grayscale image and outputs a single channel 32-bit floating point image 
  -- *  consisting the corner response at each pixel of the image.  The algorithm consists of two phases.  The first phase generates the floating
  -- *  point product of XX, YY, and XY gradients at each pixel in the image.  The type of gradient used is controlled by the eFilterType and eMaskSize parameters.
  -- *  The second phase averages those products over a window of either 3x3 or 5x5 pixels around the center pixel then generates the Harris corner
  -- *  response at that pixel which is output in the destination image. The Harris response value is determined as H = ((XX * YY - XY * XY) - 
  -- *  (nK * ((XX + YY) * (XX + YY)))) * nScale.
  -- *    
  -- * Currently only the NPP_BORDER_REPLICATE border type operation is supported.  Borderless output can be accomplished by using a
  -- * larger source image than the destination and adjusting oSrcSize and oSrcOffset parameters accordingly.
  -- *
  -- * @{
  -- *
  --  

  --*
  -- * Calculate scratch buffer size needed for the FilterHarrisCornersBorder function based on destination image SizeROI width and height.
  -- *
  -- * \param oSizeROI \ref roi_specification.
  -- * \param hpBufferSize Required buffer size. Important: hpBufferSize is a 
  -- *        <em>host pointer.</em> \ref general_scratch_buffer.
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterHarrisCornersBorderGetBufferSize (oSizeROI : nppdefs_h.NppiSize; hpBufferSize : access int) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:16790
   pragma Import (C, nppiFilterHarrisCornersBorderGetBufferSize, "nppiFilterHarrisCornersBorderGetBufferSize");

  --*
  -- * 1 channel 8-bit unsigned grayscale to 1 channel 32-bit floating point Harris corners response image with border control.
  -- *
  -- * \param pSrc \ref source_image_pointer.
  -- * \param nSrcStep \ref source_image_line_step.
  -- * \param oSrcSize Source image width and height in pixels relative to pSrc.
  -- * \param oSrcOffset The pixel offset that pSrc points to relative to the origin of the source image. 
  -- * \param pDst output edge destination_image_pointer.
  -- * \param nDstStep output edge destination_image_line_step.
  -- * \param oSizeROI \ref roi_specification.
  -- * \param eFilterType selects between Sobel or Scharr filter type.
  -- * \param eMaskSize fixed filter mask size to use (3x3 or 5x5 for Sobel).
  -- * \param eAvgWindowSize fixed window mask size to use (3x3 or 5x5).
  -- * \param nK Harris Corners constant (commonly used value is 0.04F).
  -- * \param nScale output is scaled by this scale factor.
  -- * \param eBorderType source image border type to use use.
  -- * \param pDeviceBuffer pointer to scratch DEVICE memory buffer of size hpBufferSize (see nppiFilterHarrisCornersBorderGetBufferSize() above)
  -- * \return \ref image_data_error_codes, \ref roi_error_codes
  --  

   function nppiFilterHarrisCornersBorder_8u32f_C1R
     (pSrc : access nppdefs_h.Npp8u;
      nSrcStep : int;
      oSrcSize : nppdefs_h.NppiSize;
      oSrcOffset : nppdefs_h.NppiPoint;
      pDst : access nppdefs_h.Npp32f;
      nDstStep : int;
      oSizeROI : nppdefs_h.NppiSize;
      eFilterType : nppdefs_h.NppiDifferentialKernel;
      eMaskSize : nppdefs_h.NppiMaskSize;
      eAvgWindowSize : nppdefs_h.NppiMaskSize;
      nK : nppdefs_h.Npp32f;
      nScale : nppdefs_h.Npp32f;
      eBorderType : nppdefs_h.NppiBorderType;
      pDeviceBuffer : access nppdefs_h.Npp8u) return nppdefs_h.NppStatus;  -- /usr/local/cuda-8.0/include/nppi_filtering_functions.h:16812
   pragma Import (C, nppiFilterHarrisCornersBorder_8u32f_C1R, "nppiFilterHarrisCornersBorder_8u32f_C1R");

  --* @} FilterHarrisCornersBorder  
  --* @} fixed_filters  
  --* @} image_filtering_functions  
  -- extern "C"  
end nppi_filtering_functions_h;
